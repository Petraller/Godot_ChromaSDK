#include "NodeChromaSDK.h"
#include "ChromaAnimationAPI.h"

#include <godot_cpp/core/class_db.hpp>

using namespace godot;
using namespace ChromaSDK;

void NodeChromaSDK::_bind_methods() {
	ClassDB::bind_method(D_METHOD("IsAPIInitialized"), &NodeChromaSDK::IsAPIInitialized);
#pragma region autogenerated
	ClassDB::bind_method(D_METHOD("AddColor", "color1", "color2"), &NodeChromaSDK::AddColor);
	//ClassDB::bind_method(D_METHOD("AddFrame", "animationId", "duration", "colors", "length"), &NodeChromaSDK::AddFrame);
	ClassDB::bind_method(D_METHOD("AddNonZeroAllKeys", "sourceAnimationId", "targetAnimationId", "frameId"), &NodeChromaSDK::AddNonZeroAllKeys);
	ClassDB::bind_method(D_METHOD("AddNonZeroAllKeysAllFrames", "sourceAnimationId", "targetAnimationId"), &NodeChromaSDK::AddNonZeroAllKeysAllFrames);
	ClassDB::bind_method(D_METHOD("AddNonZeroAllKeysAllFramesName", "sourceAnimation", "targetAnimation"), &NodeChromaSDK::AddNonZeroAllKeysAllFramesName);
	ClassDB::bind_method(D_METHOD("AddNonZeroAllKeysAllFramesNameD", "sourceAnimation", "targetAnimation"), &NodeChromaSDK::AddNonZeroAllKeysAllFramesNameD);
	ClassDB::bind_method(D_METHOD("AddNonZeroAllKeysAllFramesOffset", "sourceAnimationId", "targetAnimationId", "offset"), &NodeChromaSDK::AddNonZeroAllKeysAllFramesOffset);
	ClassDB::bind_method(D_METHOD("AddNonZeroAllKeysAllFramesOffsetName", "sourceAnimation", "targetAnimation", "offset"), &NodeChromaSDK::AddNonZeroAllKeysAllFramesOffsetName);
	ClassDB::bind_method(D_METHOD("AddNonZeroAllKeysAllFramesOffsetNameD", "sourceAnimation", "targetAnimation", "offset"), &NodeChromaSDK::AddNonZeroAllKeysAllFramesOffsetNameD);
	ClassDB::bind_method(D_METHOD("AddNonZeroAllKeysName", "sourceAnimation", "targetAnimation", "frameId"), &NodeChromaSDK::AddNonZeroAllKeysName);
	ClassDB::bind_method(D_METHOD("AddNonZeroAllKeysOffset", "sourceAnimationId", "targetAnimationId", "frameId", "offset"), &NodeChromaSDK::AddNonZeroAllKeysOffset);
	ClassDB::bind_method(D_METHOD("AddNonZeroAllKeysOffsetName", "sourceAnimation", "targetAnimation", "frameId", "offset"), &NodeChromaSDK::AddNonZeroAllKeysOffsetName);
	ClassDB::bind_method(D_METHOD("AddNonZeroAllKeysOffsetNameD", "sourceAnimation", "targetAnimation", "frameId", "offset"), &NodeChromaSDK::AddNonZeroAllKeysOffsetNameD);
	ClassDB::bind_method(D_METHOD("AddNonZeroTargetAllKeysAllFrames", "sourceAnimationId", "targetAnimationId"), &NodeChromaSDK::AddNonZeroTargetAllKeysAllFrames);
	ClassDB::bind_method(D_METHOD("AddNonZeroTargetAllKeysAllFramesName", "sourceAnimation", "targetAnimation"), &NodeChromaSDK::AddNonZeroTargetAllKeysAllFramesName);
	ClassDB::bind_method(D_METHOD("AddNonZeroTargetAllKeysAllFramesNameD", "sourceAnimation", "targetAnimation"), &NodeChromaSDK::AddNonZeroTargetAllKeysAllFramesNameD);
	ClassDB::bind_method(D_METHOD("AddNonZeroTargetAllKeysAllFramesOffset", "sourceAnimationId", "targetAnimationId", "offset"), &NodeChromaSDK::AddNonZeroTargetAllKeysAllFramesOffset);
	ClassDB::bind_method(D_METHOD("AddNonZeroTargetAllKeysAllFramesOffsetName", "sourceAnimation", "targetAnimation", "offset"), &NodeChromaSDK::AddNonZeroTargetAllKeysAllFramesOffsetName);
	ClassDB::bind_method(D_METHOD("AddNonZeroTargetAllKeysAllFramesOffsetNameD", "sourceAnimation", "targetAnimation", "offset"), &NodeChromaSDK::AddNonZeroTargetAllKeysAllFramesOffsetNameD);
	ClassDB::bind_method(D_METHOD("AddNonZeroTargetAllKeysOffset", "sourceAnimationId", "targetAnimationId", "frameId", "offset"), &NodeChromaSDK::AddNonZeroTargetAllKeysOffset);
	ClassDB::bind_method(D_METHOD("AddNonZeroTargetAllKeysOffsetName", "sourceAnimation", "targetAnimation", "frameId", "offset"), &NodeChromaSDK::AddNonZeroTargetAllKeysOffsetName);
	ClassDB::bind_method(D_METHOD("AddNonZeroTargetAllKeysOffsetNameD", "sourceAnimation", "targetAnimation", "frameId", "offset"), &NodeChromaSDK::AddNonZeroTargetAllKeysOffsetNameD);
	ClassDB::bind_method(D_METHOD("AppendAllFrames", "sourceAnimationId", "targetAnimationId"), &NodeChromaSDK::AppendAllFrames);
	ClassDB::bind_method(D_METHOD("AppendAllFramesName", "sourceAnimation", "targetAnimation"), &NodeChromaSDK::AppendAllFramesName);
	ClassDB::bind_method(D_METHOD("AppendAllFramesNameD", "sourceAnimation", "targetAnimation"), &NodeChromaSDK::AppendAllFramesNameD);
	ClassDB::bind_method(D_METHOD("ClearAll"), &NodeChromaSDK::ClearAll);
	ClassDB::bind_method(D_METHOD("ClearAnimationType", "deviceType", "device"), &NodeChromaSDK::ClearAnimationType);
	ClassDB::bind_method(D_METHOD("CloseAll"), &NodeChromaSDK::CloseAll);
	ClassDB::bind_method(D_METHOD("CloseAnimation", "animationId"), &NodeChromaSDK::CloseAnimation);
	ClassDB::bind_method(D_METHOD("CloseAnimationD", "animationId"), &NodeChromaSDK::CloseAnimationD);
	ClassDB::bind_method(D_METHOD("CloseAnimationName", "path"), &NodeChromaSDK::CloseAnimationName);
	ClassDB::bind_method(D_METHOD("CloseAnimationNameD", "path"), &NodeChromaSDK::CloseAnimationNameD);
	ClassDB::bind_method(D_METHOD("CloseComposite", "name"), &NodeChromaSDK::CloseComposite);
	ClassDB::bind_method(D_METHOD("CloseCompositeD", "name"), &NodeChromaSDK::CloseCompositeD);
	ClassDB::bind_method(D_METHOD("CopyAllKeys", "sourceAnimationId", "targetAnimationId", "frameId"), &NodeChromaSDK::CopyAllKeys);
	ClassDB::bind_method(D_METHOD("CopyAllKeysName", "sourceAnimation", "targetAnimation", "frameId"), &NodeChromaSDK::CopyAllKeysName);
	ClassDB::bind_method(D_METHOD("CopyAnimation", "sourceAnimationId", "targetAnimation"), &NodeChromaSDK::CopyAnimation);
	ClassDB::bind_method(D_METHOD("CopyAnimationName", "sourceAnimation", "targetAnimation"), &NodeChromaSDK::CopyAnimationName);
	ClassDB::bind_method(D_METHOD("CopyAnimationNameD", "sourceAnimation", "targetAnimation"), &NodeChromaSDK::CopyAnimationNameD);
	ClassDB::bind_method(D_METHOD("CopyBlueChannelAllFrames", "animationId", "redIntensity", "greenIntensity"), &NodeChromaSDK::CopyBlueChannelAllFrames);
	ClassDB::bind_method(D_METHOD("CopyBlueChannelAllFramesName", "path", "redIntensity", "greenIntensity"), &NodeChromaSDK::CopyBlueChannelAllFramesName);
	ClassDB::bind_method(D_METHOD("CopyBlueChannelAllFramesNameD", "path", "redIntensity", "greenIntensity"), &NodeChromaSDK::CopyBlueChannelAllFramesNameD);
	ClassDB::bind_method(D_METHOD("CopyGreenChannelAllFrames", "animationId", "redIntensity", "blueIntensity"), &NodeChromaSDK::CopyGreenChannelAllFrames);
	ClassDB::bind_method(D_METHOD("CopyGreenChannelAllFramesName", "path", "redIntensity", "blueIntensity"), &NodeChromaSDK::CopyGreenChannelAllFramesName);
	ClassDB::bind_method(D_METHOD("CopyGreenChannelAllFramesNameD", "path", "redIntensity", "blueIntensity"), &NodeChromaSDK::CopyGreenChannelAllFramesNameD);
	ClassDB::bind_method(D_METHOD("CopyKeyColor", "sourceAnimationId", "targetAnimationId", "frameId", "rzkey"), &NodeChromaSDK::CopyKeyColor);
	ClassDB::bind_method(D_METHOD("CopyKeyColorAllFrames", "sourceAnimationId", "targetAnimationId", "rzkey"), &NodeChromaSDK::CopyKeyColorAllFrames);
	ClassDB::bind_method(D_METHOD("CopyKeyColorAllFramesName", "sourceAnimation", "targetAnimation", "rzkey"), &NodeChromaSDK::CopyKeyColorAllFramesName);
	ClassDB::bind_method(D_METHOD("CopyKeyColorAllFramesNameD", "sourceAnimation", "targetAnimation", "rzkey"), &NodeChromaSDK::CopyKeyColorAllFramesNameD);
	ClassDB::bind_method(D_METHOD("CopyKeyColorAllFramesOffset", "sourceAnimationId", "targetAnimationId", "rzkey", "offset"), &NodeChromaSDK::CopyKeyColorAllFramesOffset);
	ClassDB::bind_method(D_METHOD("CopyKeyColorAllFramesOffsetName", "sourceAnimation", "targetAnimation", "rzkey", "offset"), &NodeChromaSDK::CopyKeyColorAllFramesOffsetName);
	ClassDB::bind_method(D_METHOD("CopyKeyColorAllFramesOffsetNameD", "sourceAnimation", "targetAnimation", "rzkey", "offset"), &NodeChromaSDK::CopyKeyColorAllFramesOffsetNameD);
	ClassDB::bind_method(D_METHOD("CopyKeyColorName", "sourceAnimation", "targetAnimation", "frameId", "rzkey"), &NodeChromaSDK::CopyKeyColorName);
	ClassDB::bind_method(D_METHOD("CopyKeyColorNameD", "sourceAnimation", "targetAnimation", "frameId", "rzkey"), &NodeChromaSDK::CopyKeyColorNameD);
	ClassDB::bind_method(D_METHOD("CopyKeysColor", "sourceAnimationId", "targetAnimationId", "frameId", "keys", "size"), &NodeChromaSDK::CopyKeysColor);
	ClassDB::bind_method(D_METHOD("CopyKeysColorAllFrames", "sourceAnimationId", "targetAnimationId", "keys", "size"), &NodeChromaSDK::CopyKeysColorAllFrames);
	ClassDB::bind_method(D_METHOD("CopyKeysColorAllFramesName", "sourceAnimation", "targetAnimation", "keys", "size"), &NodeChromaSDK::CopyKeysColorAllFramesName);
	ClassDB::bind_method(D_METHOD("CopyKeysColorName", "sourceAnimation", "targetAnimation", "frameId", "keys", "size"), &NodeChromaSDK::CopyKeysColorName);
	ClassDB::bind_method(D_METHOD("CopyKeysColorOffset", "sourceAnimationId", "targetAnimationId", "sourceFrameId", "targetFrameId", "keys", "size"), &NodeChromaSDK::CopyKeysColorOffset);
	ClassDB::bind_method(D_METHOD("CopyKeysColorOffsetName", "sourceAnimation", "targetAnimation", "sourceFrameId", "targetFrameId", "keys", "size"), &NodeChromaSDK::CopyKeysColorOffsetName);
	ClassDB::bind_method(D_METHOD("CopyNonZeroAllKeys", "sourceAnimationId", "targetAnimationId", "frameId"), &NodeChromaSDK::CopyNonZeroAllKeys);
	ClassDB::bind_method(D_METHOD("CopyNonZeroAllKeysAllFrames", "sourceAnimationId", "targetAnimationId"), &NodeChromaSDK::CopyNonZeroAllKeysAllFrames);
	ClassDB::bind_method(D_METHOD("CopyNonZeroAllKeysAllFramesName", "sourceAnimation", "targetAnimation"), &NodeChromaSDK::CopyNonZeroAllKeysAllFramesName);
	ClassDB::bind_method(D_METHOD("CopyNonZeroAllKeysAllFramesNameD", "sourceAnimation", "targetAnimation"), &NodeChromaSDK::CopyNonZeroAllKeysAllFramesNameD);
	ClassDB::bind_method(D_METHOD("CopyNonZeroAllKeysAllFramesOffset", "sourceAnimationId", "targetAnimationId", "offset"), &NodeChromaSDK::CopyNonZeroAllKeysAllFramesOffset);
	ClassDB::bind_method(D_METHOD("CopyNonZeroAllKeysAllFramesOffsetName", "sourceAnimation", "targetAnimation", "offset"), &NodeChromaSDK::CopyNonZeroAllKeysAllFramesOffsetName);
	ClassDB::bind_method(D_METHOD("CopyNonZeroAllKeysAllFramesOffsetNameD", "sourceAnimation", "targetAnimation", "offset"), &NodeChromaSDK::CopyNonZeroAllKeysAllFramesOffsetNameD);
	ClassDB::bind_method(D_METHOD("CopyNonZeroAllKeysName", "sourceAnimation", "targetAnimation", "frameId"), &NodeChromaSDK::CopyNonZeroAllKeysName);
	ClassDB::bind_method(D_METHOD("CopyNonZeroAllKeysNameD", "sourceAnimation", "targetAnimation", "frameId"), &NodeChromaSDK::CopyNonZeroAllKeysNameD);
	ClassDB::bind_method(D_METHOD("CopyNonZeroAllKeysOffset", "sourceAnimationId", "targetAnimationId", "frameId", "offset"), &NodeChromaSDK::CopyNonZeroAllKeysOffset);
	ClassDB::bind_method(D_METHOD("CopyNonZeroAllKeysOffsetName", "sourceAnimation", "targetAnimation", "frameId", "offset"), &NodeChromaSDK::CopyNonZeroAllKeysOffsetName);
	ClassDB::bind_method(D_METHOD("CopyNonZeroAllKeysOffsetNameD", "sourceAnimation", "targetAnimation", "frameId", "offset"), &NodeChromaSDK::CopyNonZeroAllKeysOffsetNameD);
	ClassDB::bind_method(D_METHOD("CopyNonZeroKeyColor", "sourceAnimationId", "targetAnimationId", "frameId", "rzkey"), &NodeChromaSDK::CopyNonZeroKeyColor);
	ClassDB::bind_method(D_METHOD("CopyNonZeroKeyColorName", "sourceAnimation", "targetAnimation", "frameId", "rzkey"), &NodeChromaSDK::CopyNonZeroKeyColorName);
	ClassDB::bind_method(D_METHOD("CopyNonZeroKeyColorNameD", "sourceAnimation", "targetAnimation", "frameId", "rzkey"), &NodeChromaSDK::CopyNonZeroKeyColorNameD);
	ClassDB::bind_method(D_METHOD("CopyNonZeroTargetAllKeys", "sourceAnimationId", "targetAnimationId", "frameId"), &NodeChromaSDK::CopyNonZeroTargetAllKeys);
	ClassDB::bind_method(D_METHOD("CopyNonZeroTargetAllKeysAllFrames", "sourceAnimationId", "targetAnimationId"), &NodeChromaSDK::CopyNonZeroTargetAllKeysAllFrames);
	ClassDB::bind_method(D_METHOD("CopyNonZeroTargetAllKeysAllFramesName", "sourceAnimation", "targetAnimation"), &NodeChromaSDK::CopyNonZeroTargetAllKeysAllFramesName);
	ClassDB::bind_method(D_METHOD("CopyNonZeroTargetAllKeysAllFramesNameD", "sourceAnimation", "targetAnimation"), &NodeChromaSDK::CopyNonZeroTargetAllKeysAllFramesNameD);
	ClassDB::bind_method(D_METHOD("CopyNonZeroTargetAllKeysAllFramesOffset", "sourceAnimationId", "targetAnimationId", "offset"), &NodeChromaSDK::CopyNonZeroTargetAllKeysAllFramesOffset);
	ClassDB::bind_method(D_METHOD("CopyNonZeroTargetAllKeysAllFramesOffsetName", "sourceAnimation", "targetAnimation", "offset"), &NodeChromaSDK::CopyNonZeroTargetAllKeysAllFramesOffsetName);
	ClassDB::bind_method(D_METHOD("CopyNonZeroTargetAllKeysAllFramesOffsetNameD", "sourceAnimation", "targetAnimation", "offset"), &NodeChromaSDK::CopyNonZeroTargetAllKeysAllFramesOffsetNameD);
	ClassDB::bind_method(D_METHOD("CopyNonZeroTargetAllKeysName", "sourceAnimation", "targetAnimation", "frameId"), &NodeChromaSDK::CopyNonZeroTargetAllKeysName);
	ClassDB::bind_method(D_METHOD("CopyNonZeroTargetAllKeysNameD", "sourceAnimation", "targetAnimation", "frameId"), &NodeChromaSDK::CopyNonZeroTargetAllKeysNameD);
	ClassDB::bind_method(D_METHOD("CopyNonZeroTargetAllKeysOffset", "sourceAnimationId", "targetAnimationId", "frameId", "offset"), &NodeChromaSDK::CopyNonZeroTargetAllKeysOffset);
	ClassDB::bind_method(D_METHOD("CopyNonZeroTargetAllKeysOffsetName", "sourceAnimation", "targetAnimation", "frameId", "offset"), &NodeChromaSDK::CopyNonZeroTargetAllKeysOffsetName);
	ClassDB::bind_method(D_METHOD("CopyNonZeroTargetAllKeysOffsetNameD", "sourceAnimation", "targetAnimation", "frameId", "offset"), &NodeChromaSDK::CopyNonZeroTargetAllKeysOffsetNameD);
	ClassDB::bind_method(D_METHOD("CopyNonZeroTargetZeroAllKeysAllFrames", "sourceAnimationId", "targetAnimationId"), &NodeChromaSDK::CopyNonZeroTargetZeroAllKeysAllFrames);
	ClassDB::bind_method(D_METHOD("CopyNonZeroTargetZeroAllKeysAllFramesName", "sourceAnimation", "targetAnimation"), &NodeChromaSDK::CopyNonZeroTargetZeroAllKeysAllFramesName);
	ClassDB::bind_method(D_METHOD("CopyNonZeroTargetZeroAllKeysAllFramesNameD", "sourceAnimation", "targetAnimation"), &NodeChromaSDK::CopyNonZeroTargetZeroAllKeysAllFramesNameD);
	ClassDB::bind_method(D_METHOD("CopyRedChannelAllFrames", "animationId", "greenIntensity", "blueIntensity"), &NodeChromaSDK::CopyRedChannelAllFrames);
	ClassDB::bind_method(D_METHOD("CopyRedChannelAllFramesName", "path", "greenIntensity", "blueIntensity"), &NodeChromaSDK::CopyRedChannelAllFramesName);
	ClassDB::bind_method(D_METHOD("CopyRedChannelAllFramesNameD", "path", "greenIntensity", "blueIntensity"), &NodeChromaSDK::CopyRedChannelAllFramesNameD);
	ClassDB::bind_method(D_METHOD("CopyZeroAllKeys", "sourceAnimationId", "targetAnimationId", "frameId"), &NodeChromaSDK::CopyZeroAllKeys);
	ClassDB::bind_method(D_METHOD("CopyZeroAllKeysAllFrames", "sourceAnimationId", "targetAnimationId"), &NodeChromaSDK::CopyZeroAllKeysAllFrames);
	ClassDB::bind_method(D_METHOD("CopyZeroAllKeysAllFramesName", "sourceAnimation", "targetAnimation"), &NodeChromaSDK::CopyZeroAllKeysAllFramesName);
	ClassDB::bind_method(D_METHOD("CopyZeroAllKeysAllFramesNameD", "sourceAnimation", "targetAnimation"), &NodeChromaSDK::CopyZeroAllKeysAllFramesNameD);
	ClassDB::bind_method(D_METHOD("CopyZeroAllKeysAllFramesOffset", "sourceAnimationId", "targetAnimationId", "offset"), &NodeChromaSDK::CopyZeroAllKeysAllFramesOffset);
	ClassDB::bind_method(D_METHOD("CopyZeroAllKeysAllFramesOffsetName", "sourceAnimation", "targetAnimation", "offset"), &NodeChromaSDK::CopyZeroAllKeysAllFramesOffsetName);
	ClassDB::bind_method(D_METHOD("CopyZeroAllKeysAllFramesOffsetNameD", "sourceAnimation", "targetAnimation", "offset"), &NodeChromaSDK::CopyZeroAllKeysAllFramesOffsetNameD);
	ClassDB::bind_method(D_METHOD("CopyZeroAllKeysName", "sourceAnimation", "targetAnimation", "frameId"), &NodeChromaSDK::CopyZeroAllKeysName);
	ClassDB::bind_method(D_METHOD("CopyZeroAllKeysOffset", "sourceAnimationId", "targetAnimationId", "frameId", "offset"), &NodeChromaSDK::CopyZeroAllKeysOffset);
	ClassDB::bind_method(D_METHOD("CopyZeroAllKeysOffsetName", "sourceAnimation", "targetAnimation", "frameId", "offset"), &NodeChromaSDK::CopyZeroAllKeysOffsetName);
	ClassDB::bind_method(D_METHOD("CopyZeroKeyColor", "sourceAnimationId", "targetAnimationId", "frameId", "rzkey"), &NodeChromaSDK::CopyZeroKeyColor);
	ClassDB::bind_method(D_METHOD("CopyZeroKeyColorName", "sourceAnimation", "targetAnimation", "frameId", "rzkey"), &NodeChromaSDK::CopyZeroKeyColorName);
	ClassDB::bind_method(D_METHOD("CopyZeroKeyColorNameD", "sourceAnimation", "targetAnimation", "frameId", "rzkey"), &NodeChromaSDK::CopyZeroKeyColorNameD);
	ClassDB::bind_method(D_METHOD("CopyZeroTargetAllKeys", "sourceAnimationId", "targetAnimationId", "frameId"), &NodeChromaSDK::CopyZeroTargetAllKeys);
	ClassDB::bind_method(D_METHOD("CopyZeroTargetAllKeysAllFrames", "sourceAnimationId", "targetAnimationId"), &NodeChromaSDK::CopyZeroTargetAllKeysAllFrames);
	ClassDB::bind_method(D_METHOD("CopyZeroTargetAllKeysAllFramesName", "sourceAnimation", "targetAnimation"), &NodeChromaSDK::CopyZeroTargetAllKeysAllFramesName);
	ClassDB::bind_method(D_METHOD("CopyZeroTargetAllKeysAllFramesNameD", "sourceAnimation", "targetAnimation"), &NodeChromaSDK::CopyZeroTargetAllKeysAllFramesNameD);
	ClassDB::bind_method(D_METHOD("CopyZeroTargetAllKeysName", "sourceAnimation", "targetAnimation", "frameId"), &NodeChromaSDK::CopyZeroTargetAllKeysName);
	//ClassDB::bind_method(D_METHOD("CoreCreateChromaLinkEffect", "Effect", "pParam", "pEffectId"), &NodeChromaSDK::CoreCreateChromaLinkEffect);
	//ClassDB::bind_method(D_METHOD("CoreCreateEffect", "DeviceId", "Effect", "pParam", "pEffectId"), &NodeChromaSDK::CoreCreateEffect);
	//ClassDB::bind_method(D_METHOD("CoreCreateHeadsetEffect", "Effect", "pParam", "pEffectId"), &NodeChromaSDK::CoreCreateHeadsetEffect);
	//ClassDB::bind_method(D_METHOD("CoreCreateKeyboardEffect", "Effect", "pParam", "pEffectId"), &NodeChromaSDK::CoreCreateKeyboardEffect);
	//ClassDB::bind_method(D_METHOD("CoreCreateKeypadEffect", "Effect", "pParam", "pEffectId"), &NodeChromaSDK::CoreCreateKeypadEffect);
	//ClassDB::bind_method(D_METHOD("CoreCreateMouseEffect", "Effect", "pParam", "pEffectId"), &NodeChromaSDK::CoreCreateMouseEffect);
	//ClassDB::bind_method(D_METHOD("CoreCreateMousepadEffect", "Effect", "pParam", "pEffectId"), &NodeChromaSDK::CoreCreateMousepadEffect);
	//ClassDB::bind_method(D_METHOD("CoreDeleteEffect", "EffectId"), &NodeChromaSDK::CoreDeleteEffect);
	ClassDB::bind_method(D_METHOD("CoreInit"), &NodeChromaSDK::CoreInit);
	//ClassDB::bind_method(D_METHOD("CoreInitSDK", "AppInfo"), &NodeChromaSDK::CoreInitSDK);
	//ClassDB::bind_method(D_METHOD("CoreQueryDevice", "DeviceId", "DeviceInfo"), &NodeChromaSDK::CoreQueryDevice);
	//ClassDB::bind_method(D_METHOD("CoreSetEffect", "EffectId"), &NodeChromaSDK::CoreSetEffect);
	ClassDB::bind_method(D_METHOD("CoreStreamBroadcast", "streamId", "streamKey"), &NodeChromaSDK::CoreStreamBroadcast);
	ClassDB::bind_method(D_METHOD("CoreStreamBroadcastEnd"), &NodeChromaSDK::CoreStreamBroadcastEnd);
	//ClassDB::bind_method(D_METHOD("CoreStreamGetAuthShortcode", "shortcode", "length", "platform", "title"), &NodeChromaSDK::CoreStreamGetAuthShortcode);
	//ClassDB::bind_method(D_METHOD("CoreStreamGetFocus", "focus", "length"), &NodeChromaSDK::CoreStreamGetFocus);
	//ClassDB::bind_method(D_METHOD("CoreStreamGetId", "shortcode", "streamId", "length"), &NodeChromaSDK::CoreStreamGetId);
	//ClassDB::bind_method(D_METHOD("CoreStreamGetKey", "shortcode", "streamKey", "length"), &NodeChromaSDK::CoreStreamGetKey);
	ClassDB::bind_method(D_METHOD("CoreStreamGetStatus"), &NodeChromaSDK::CoreStreamGetStatus);
	ClassDB::bind_method(D_METHOD("CoreStreamGetStatusString", "status"), &NodeChromaSDK::CoreStreamGetStatusString);
	ClassDB::bind_method(D_METHOD("CoreStreamReleaseShortcode", "shortcode"), &NodeChromaSDK::CoreStreamReleaseShortcode);
	ClassDB::bind_method(D_METHOD("CoreStreamSetFocus", "focus"), &NodeChromaSDK::CoreStreamSetFocus);
	ClassDB::bind_method(D_METHOD("CoreStreamSupportsStreaming"), &NodeChromaSDK::CoreStreamSupportsStreaming);
	ClassDB::bind_method(D_METHOD("CoreStreamWatch", "streamId", "timestamp"), &NodeChromaSDK::CoreStreamWatch);
	ClassDB::bind_method(D_METHOD("CoreStreamWatchEnd"), &NodeChromaSDK::CoreStreamWatchEnd);
	ClassDB::bind_method(D_METHOD("CoreUnInit"), &NodeChromaSDK::CoreUnInit);
	ClassDB::bind_method(D_METHOD("CreateAnimation", "path", "deviceType", "device"), &NodeChromaSDK::CreateAnimation);
	ClassDB::bind_method(D_METHOD("CreateAnimationInMemory", "deviceType", "device"), &NodeChromaSDK::CreateAnimationInMemory);
	//ClassDB::bind_method(D_METHOD("CreateEffect", "deviceId", "effect", "colors", "size", "effectId"), &NodeChromaSDK::CreateEffect);
	//ClassDB::bind_method(D_METHOD("DeleteEffect", "effectId"), &NodeChromaSDK::DeleteEffect);
	ClassDB::bind_method(D_METHOD("DuplicateFirstFrame", "animationId", "frameCount"), &NodeChromaSDK::DuplicateFirstFrame);
	ClassDB::bind_method(D_METHOD("DuplicateFirstFrameName", "path", "frameCount"), &NodeChromaSDK::DuplicateFirstFrameName);
	ClassDB::bind_method(D_METHOD("DuplicateFirstFrameNameD", "path", "frameCount"), &NodeChromaSDK::DuplicateFirstFrameNameD);
	ClassDB::bind_method(D_METHOD("DuplicateFrames", "animationId"), &NodeChromaSDK::DuplicateFrames);
	ClassDB::bind_method(D_METHOD("DuplicateFramesName", "path"), &NodeChromaSDK::DuplicateFramesName);
	ClassDB::bind_method(D_METHOD("DuplicateFramesNameD", "path"), &NodeChromaSDK::DuplicateFramesNameD);
	ClassDB::bind_method(D_METHOD("DuplicateMirrorFrames", "animationId"), &NodeChromaSDK::DuplicateMirrorFrames);
	ClassDB::bind_method(D_METHOD("DuplicateMirrorFramesName", "path"), &NodeChromaSDK::DuplicateMirrorFramesName);
	ClassDB::bind_method(D_METHOD("DuplicateMirrorFramesNameD", "path"), &NodeChromaSDK::DuplicateMirrorFramesNameD);
	ClassDB::bind_method(D_METHOD("FadeEndFrames", "animationId", "fade"), &NodeChromaSDK::FadeEndFrames);
	ClassDB::bind_method(D_METHOD("FadeEndFramesName", "path", "fade"), &NodeChromaSDK::FadeEndFramesName);
	ClassDB::bind_method(D_METHOD("FadeEndFramesNameD", "path", "fade"), &NodeChromaSDK::FadeEndFramesNameD);
	ClassDB::bind_method(D_METHOD("FadeStartFrames", "animationId", "fade"), &NodeChromaSDK::FadeStartFrames);
	ClassDB::bind_method(D_METHOD("FadeStartFramesName", "path", "fade"), &NodeChromaSDK::FadeStartFramesName);
	ClassDB::bind_method(D_METHOD("FadeStartFramesNameD", "path", "fade"), &NodeChromaSDK::FadeStartFramesNameD);
	ClassDB::bind_method(D_METHOD("FillColor", "animationId", "frameId", "color"), &NodeChromaSDK::FillColor);
	ClassDB::bind_method(D_METHOD("FillColorAllFrames", "animationId", "color"), &NodeChromaSDK::FillColorAllFrames);
	ClassDB::bind_method(D_METHOD("FillColorAllFramesName", "path", "color"), &NodeChromaSDK::FillColorAllFramesName);
	ClassDB::bind_method(D_METHOD("FillColorAllFramesNameD", "path", "color"), &NodeChromaSDK::FillColorAllFramesNameD);
	ClassDB::bind_method(D_METHOD("FillColorAllFramesRGB", "animationId", "red", "green", "blue"), &NodeChromaSDK::FillColorAllFramesRGB);
	ClassDB::bind_method(D_METHOD("FillColorAllFramesRGBName", "path", "red", "green", "blue"), &NodeChromaSDK::FillColorAllFramesRGBName);
	ClassDB::bind_method(D_METHOD("FillColorAllFramesRGBNameD", "path", "red", "green", "blue"), &NodeChromaSDK::FillColorAllFramesRGBNameD);
	ClassDB::bind_method(D_METHOD("FillColorName", "path", "frameId", "color"), &NodeChromaSDK::FillColorName);
	ClassDB::bind_method(D_METHOD("FillColorNameD", "path", "frameId", "color"), &NodeChromaSDK::FillColorNameD);
	ClassDB::bind_method(D_METHOD("FillColorRGB", "animationId", "frameId", "red", "green", "blue"), &NodeChromaSDK::FillColorRGB);
	ClassDB::bind_method(D_METHOD("FillColorRGBName", "path", "frameId", "red", "green", "blue"), &NodeChromaSDK::FillColorRGBName);
	ClassDB::bind_method(D_METHOD("FillColorRGBNameD", "path", "frameId", "red", "green", "blue"), &NodeChromaSDK::FillColorRGBNameD);
	ClassDB::bind_method(D_METHOD("FillNonZeroColor", "animationId", "frameId", "color"), &NodeChromaSDK::FillNonZeroColor);
	ClassDB::bind_method(D_METHOD("FillNonZeroColorAllFrames", "animationId", "color"), &NodeChromaSDK::FillNonZeroColorAllFrames);
	ClassDB::bind_method(D_METHOD("FillNonZeroColorAllFramesName", "path", "color"), &NodeChromaSDK::FillNonZeroColorAllFramesName);
	ClassDB::bind_method(D_METHOD("FillNonZeroColorAllFramesNameD", "path", "color"), &NodeChromaSDK::FillNonZeroColorAllFramesNameD);
	ClassDB::bind_method(D_METHOD("FillNonZeroColorAllFramesRGB", "animationId", "red", "green", "blue"), &NodeChromaSDK::FillNonZeroColorAllFramesRGB);
	ClassDB::bind_method(D_METHOD("FillNonZeroColorAllFramesRGBName", "path", "red", "green", "blue"), &NodeChromaSDK::FillNonZeroColorAllFramesRGBName);
	ClassDB::bind_method(D_METHOD("FillNonZeroColorAllFramesRGBNameD", "path", "red", "green", "blue"), &NodeChromaSDK::FillNonZeroColorAllFramesRGBNameD);
	ClassDB::bind_method(D_METHOD("FillNonZeroColorName", "path", "frameId", "color"), &NodeChromaSDK::FillNonZeroColorName);
	ClassDB::bind_method(D_METHOD("FillNonZeroColorNameD", "path", "frameId", "color"), &NodeChromaSDK::FillNonZeroColorNameD);
	ClassDB::bind_method(D_METHOD("FillNonZeroColorRGB", "animationId", "frameId", "red", "green", "blue"), &NodeChromaSDK::FillNonZeroColorRGB);
	ClassDB::bind_method(D_METHOD("FillNonZeroColorRGBName", "path", "frameId", "red", "green", "blue"), &NodeChromaSDK::FillNonZeroColorRGBName);
	ClassDB::bind_method(D_METHOD("FillNonZeroColorRGBNameD", "path", "frameId", "red", "green", "blue"), &NodeChromaSDK::FillNonZeroColorRGBNameD);
	ClassDB::bind_method(D_METHOD("FillRandomColors", "animationId", "frameId"), &NodeChromaSDK::FillRandomColors);
	ClassDB::bind_method(D_METHOD("FillRandomColorsAllFrames", "animationId"), &NodeChromaSDK::FillRandomColorsAllFrames);
	ClassDB::bind_method(D_METHOD("FillRandomColorsAllFramesName", "path"), &NodeChromaSDK::FillRandomColorsAllFramesName);
	ClassDB::bind_method(D_METHOD("FillRandomColorsAllFramesNameD", "path"), &NodeChromaSDK::FillRandomColorsAllFramesNameD);
	ClassDB::bind_method(D_METHOD("FillRandomColorsBlackAndWhite", "animationId", "frameId"), &NodeChromaSDK::FillRandomColorsBlackAndWhite);
	ClassDB::bind_method(D_METHOD("FillRandomColorsBlackAndWhiteAllFrames", "animationId"), &NodeChromaSDK::FillRandomColorsBlackAndWhiteAllFrames);
	ClassDB::bind_method(D_METHOD("FillRandomColorsBlackAndWhiteAllFramesName", "path"), &NodeChromaSDK::FillRandomColorsBlackAndWhiteAllFramesName);
	ClassDB::bind_method(D_METHOD("FillRandomColorsBlackAndWhiteAllFramesNameD", "path"), &NodeChromaSDK::FillRandomColorsBlackAndWhiteAllFramesNameD);
	ClassDB::bind_method(D_METHOD("FillRandomColorsBlackAndWhiteName", "path", "frameId"), &NodeChromaSDK::FillRandomColorsBlackAndWhiteName);
	ClassDB::bind_method(D_METHOD("FillRandomColorsBlackAndWhiteNameD", "path", "frameId"), &NodeChromaSDK::FillRandomColorsBlackAndWhiteNameD);
	ClassDB::bind_method(D_METHOD("FillRandomColorsName", "path", "frameId"), &NodeChromaSDK::FillRandomColorsName);
	ClassDB::bind_method(D_METHOD("FillRandomColorsNameD", "path", "frameId"), &NodeChromaSDK::FillRandomColorsNameD);
	ClassDB::bind_method(D_METHOD("FillThresholdColors", "animationId", "frameId", "threshold", "color"), &NodeChromaSDK::FillThresholdColors);
	ClassDB::bind_method(D_METHOD("FillThresholdColorsAllFrames", "animationId", "threshold", "color"), &NodeChromaSDK::FillThresholdColorsAllFrames);
	ClassDB::bind_method(D_METHOD("FillThresholdColorsAllFramesName", "path", "threshold", "color"), &NodeChromaSDK::FillThresholdColorsAllFramesName);
	ClassDB::bind_method(D_METHOD("FillThresholdColorsAllFramesNameD", "path", "threshold", "color"), &NodeChromaSDK::FillThresholdColorsAllFramesNameD);
	ClassDB::bind_method(D_METHOD("FillThresholdColorsAllFramesRGB", "animationId", "threshold", "red", "green", "blue"), &NodeChromaSDK::FillThresholdColorsAllFramesRGB);
	ClassDB::bind_method(D_METHOD("FillThresholdColorsAllFramesRGBName", "path", "threshold", "red", "green", "blue"), &NodeChromaSDK::FillThresholdColorsAllFramesRGBName);
	ClassDB::bind_method(D_METHOD("FillThresholdColorsAllFramesRGBNameD", "path", "threshold", "red", "green", "blue"), &NodeChromaSDK::FillThresholdColorsAllFramesRGBNameD);
	ClassDB::bind_method(D_METHOD("FillThresholdColorsMinMaxAllFramesRGB", "animationId", "minThreshold", "minRed", "minGreen", "minBlue", "maxThreshold", "maxRed", "maxGreen", "maxBlue"), &NodeChromaSDK::FillThresholdColorsMinMaxAllFramesRGB);
	ClassDB::bind_method(D_METHOD("FillThresholdColorsMinMaxAllFramesRGBName", "path", "minThreshold", "minRed", "minGreen", "minBlue", "maxThreshold", "maxRed", "maxGreen", "maxBlue"), &NodeChromaSDK::FillThresholdColorsMinMaxAllFramesRGBName);
	ClassDB::bind_method(D_METHOD("FillThresholdColorsMinMaxAllFramesRGBNameD", "path", "minThreshold", "minRed", "minGreen", "minBlue", "maxThreshold", "maxRed", "maxGreen", "maxBlue"), &NodeChromaSDK::FillThresholdColorsMinMaxAllFramesRGBNameD);
	ClassDB::bind_method(D_METHOD("FillThresholdColorsMinMaxRGB", "animationId", "frameId", "minThreshold", "minRed", "minGreen", "minBlue", "maxThreshold", "maxRed", "maxGreen", "maxBlue"), &NodeChromaSDK::FillThresholdColorsMinMaxRGB);
	ClassDB::bind_method(D_METHOD("FillThresholdColorsMinMaxRGBName", "path", "frameId", "minThreshold", "minRed", "minGreen", "minBlue", "maxThreshold", "maxRed", "maxGreen", "maxBlue"), &NodeChromaSDK::FillThresholdColorsMinMaxRGBName);
	ClassDB::bind_method(D_METHOD("FillThresholdColorsMinMaxRGBNameD", "path", "frameId", "minThreshold", "minRed", "minGreen", "minBlue", "maxThreshold", "maxRed", "maxGreen", "maxBlue"), &NodeChromaSDK::FillThresholdColorsMinMaxRGBNameD);
	ClassDB::bind_method(D_METHOD("FillThresholdColorsName", "path", "frameId", "threshold", "color"), &NodeChromaSDK::FillThresholdColorsName);
	ClassDB::bind_method(D_METHOD("FillThresholdColorsNameD", "path", "frameId", "threshold", "color"), &NodeChromaSDK::FillThresholdColorsNameD);
	ClassDB::bind_method(D_METHOD("FillThresholdColorsRGB", "animationId", "frameId", "threshold", "red", "green", "blue"), &NodeChromaSDK::FillThresholdColorsRGB);
	ClassDB::bind_method(D_METHOD("FillThresholdColorsRGBName", "path", "frameId", "threshold", "red", "green", "blue"), &NodeChromaSDK::FillThresholdColorsRGBName);
	ClassDB::bind_method(D_METHOD("FillThresholdColorsRGBNameD", "path", "frameId", "threshold", "red", "green", "blue"), &NodeChromaSDK::FillThresholdColorsRGBNameD);
	ClassDB::bind_method(D_METHOD("FillThresholdRGBColorsAllFramesRGB", "animationId", "redThreshold", "greenThreshold", "blueThreshold", "red", "green", "blue"), &NodeChromaSDK::FillThresholdRGBColorsAllFramesRGB);
	ClassDB::bind_method(D_METHOD("FillThresholdRGBColorsAllFramesRGBName", "path", "redThreshold", "greenThreshold", "blueThreshold", "red", "green", "blue"), &NodeChromaSDK::FillThresholdRGBColorsAllFramesRGBName);
	ClassDB::bind_method(D_METHOD("FillThresholdRGBColorsAllFramesRGBNameD", "path", "redThreshold", "greenThreshold", "blueThreshold", "red", "green", "blue"), &NodeChromaSDK::FillThresholdRGBColorsAllFramesRGBNameD);
	ClassDB::bind_method(D_METHOD("FillThresholdRGBColorsRGB", "animationId", "frameId", "redThreshold", "greenThreshold", "blueThreshold", "red", "green", "blue"), &NodeChromaSDK::FillThresholdRGBColorsRGB);
	ClassDB::bind_method(D_METHOD("FillThresholdRGBColorsRGBName", "path", "frameId", "redThreshold", "greenThreshold", "blueThreshold", "red", "green", "blue"), &NodeChromaSDK::FillThresholdRGBColorsRGBName);
	ClassDB::bind_method(D_METHOD("FillThresholdRGBColorsRGBNameD", "path", "frameId", "redThreshold", "greenThreshold", "blueThreshold", "red", "green", "blue"), &NodeChromaSDK::FillThresholdRGBColorsRGBNameD);
	ClassDB::bind_method(D_METHOD("FillZeroColor", "animationId", "frameId", "color"), &NodeChromaSDK::FillZeroColor);
	ClassDB::bind_method(D_METHOD("FillZeroColorAllFrames", "animationId", "color"), &NodeChromaSDK::FillZeroColorAllFrames);
	ClassDB::bind_method(D_METHOD("FillZeroColorAllFramesName", "path", "color"), &NodeChromaSDK::FillZeroColorAllFramesName);
	ClassDB::bind_method(D_METHOD("FillZeroColorAllFramesNameD", "path", "color"), &NodeChromaSDK::FillZeroColorAllFramesNameD);
	ClassDB::bind_method(D_METHOD("FillZeroColorAllFramesRGB", "animationId", "red", "green", "blue"), &NodeChromaSDK::FillZeroColorAllFramesRGB);
	ClassDB::bind_method(D_METHOD("FillZeroColorAllFramesRGBName", "path", "red", "green", "blue"), &NodeChromaSDK::FillZeroColorAllFramesRGBName);
	ClassDB::bind_method(D_METHOD("FillZeroColorAllFramesRGBNameD", "path", "red", "green", "blue"), &NodeChromaSDK::FillZeroColorAllFramesRGBNameD);
	ClassDB::bind_method(D_METHOD("FillZeroColorName", "path", "frameId", "color"), &NodeChromaSDK::FillZeroColorName);
	ClassDB::bind_method(D_METHOD("FillZeroColorNameD", "path", "frameId", "color"), &NodeChromaSDK::FillZeroColorNameD);
	ClassDB::bind_method(D_METHOD("FillZeroColorRGB", "animationId", "frameId", "red", "green", "blue"), &NodeChromaSDK::FillZeroColorRGB);
	ClassDB::bind_method(D_METHOD("FillZeroColorRGBName", "path", "frameId", "red", "green", "blue"), &NodeChromaSDK::FillZeroColorRGBName);
	ClassDB::bind_method(D_METHOD("FillZeroColorRGBNameD", "path", "frameId", "red", "green", "blue"), &NodeChromaSDK::FillZeroColorRGBNameD);
	ClassDB::bind_method(D_METHOD("Get1DColor", "animationId", "frameId", "led"), &NodeChromaSDK::Get1DColor);
	ClassDB::bind_method(D_METHOD("Get1DColorName", "path", "frameId", "led"), &NodeChromaSDK::Get1DColorName);
	ClassDB::bind_method(D_METHOD("Get1DColorNameD", "path", "frameId", "led"), &NodeChromaSDK::Get1DColorNameD);
	ClassDB::bind_method(D_METHOD("Get2DColor", "animationId", "frameId", "row", "column"), &NodeChromaSDK::Get2DColor);
	ClassDB::bind_method(D_METHOD("Get2DColorName", "path", "frameId", "row", "column"), &NodeChromaSDK::Get2DColorName);
	ClassDB::bind_method(D_METHOD("Get2DColorNameD", "path", "frameId", "row", "column"), &NodeChromaSDK::Get2DColorNameD);
	ClassDB::bind_method(D_METHOD("GetAnimation", "name"), &NodeChromaSDK::GetAnimation);
	ClassDB::bind_method(D_METHOD("GetAnimationCount"), &NodeChromaSDK::GetAnimationCount);
	ClassDB::bind_method(D_METHOD("GetAnimationD", "name"), &NodeChromaSDK::GetAnimationD);
	ClassDB::bind_method(D_METHOD("GetAnimationId", "index"), &NodeChromaSDK::GetAnimationId);
	ClassDB::bind_method(D_METHOD("GetAnimationName", "animationId"), &NodeChromaSDK::GetAnimationName);
	ClassDB::bind_method(D_METHOD("GetCurrentFrame", "animationId"), &NodeChromaSDK::GetCurrentFrame);
	ClassDB::bind_method(D_METHOD("GetCurrentFrameName", "path"), &NodeChromaSDK::GetCurrentFrameName);
	ClassDB::bind_method(D_METHOD("GetCurrentFrameNameD", "path"), &NodeChromaSDK::GetCurrentFrameNameD);
	ClassDB::bind_method(D_METHOD("GetDevice", "animationId"), &NodeChromaSDK::GetDevice);
	ClassDB::bind_method(D_METHOD("GetDeviceName", "path"), &NodeChromaSDK::GetDeviceName);
	ClassDB::bind_method(D_METHOD("GetDeviceNameD", "path"), &NodeChromaSDK::GetDeviceNameD);
	ClassDB::bind_method(D_METHOD("GetDeviceType", "animationId"), &NodeChromaSDK::GetDeviceType);
	ClassDB::bind_method(D_METHOD("GetDeviceTypeName", "path"), &NodeChromaSDK::GetDeviceTypeName);
	ClassDB::bind_method(D_METHOD("GetDeviceTypeNameD", "path"), &NodeChromaSDK::GetDeviceTypeNameD);
	//ClassDB::bind_method(D_METHOD("GetFrame", "animationId", "frameIndex", "duration", "colors", "length", "keys", "keysLength"), &NodeChromaSDK::GetFrame);
	ClassDB::bind_method(D_METHOD("GetFrameCount", "animationId"), &NodeChromaSDK::GetFrameCount);
	ClassDB::bind_method(D_METHOD("GetFrameCountName", "path"), &NodeChromaSDK::GetFrameCountName);
	ClassDB::bind_method(D_METHOD("GetFrameCountNameD", "path"), &NodeChromaSDK::GetFrameCountNameD);
	//ClassDB::bind_method(D_METHOD("GetFrameName", "path", "frameIndex", "duration", "colors", "length", "keys", "keysLength"), &NodeChromaSDK::GetFrameName);
	ClassDB::bind_method(D_METHOD("GetKeyColor", "animationId", "frameId", "rzkey"), &NodeChromaSDK::GetKeyColor);
	ClassDB::bind_method(D_METHOD("GetKeyColorD", "path", "frameId", "rzkey"), &NodeChromaSDK::GetKeyColorD);
	ClassDB::bind_method(D_METHOD("GetKeyColorName", "path", "frameId", "rzkey"), &NodeChromaSDK::GetKeyColorName);
	ClassDB::bind_method(D_METHOD("GetLibraryLoadedState"), &NodeChromaSDK::GetLibraryLoadedState);
	ClassDB::bind_method(D_METHOD("GetLibraryLoadedStateD"), &NodeChromaSDK::GetLibraryLoadedStateD);
	ClassDB::bind_method(D_METHOD("GetMaxColumn", "device"), &NodeChromaSDK::GetMaxColumn);
	ClassDB::bind_method(D_METHOD("GetMaxColumnD", "device"), &NodeChromaSDK::GetMaxColumnD);
	ClassDB::bind_method(D_METHOD("GetMaxLeds", "device"), &NodeChromaSDK::GetMaxLeds);
	ClassDB::bind_method(D_METHOD("GetMaxLedsD", "device"), &NodeChromaSDK::GetMaxLedsD);
	ClassDB::bind_method(D_METHOD("GetMaxRow", "device"), &NodeChromaSDK::GetMaxRow);
	ClassDB::bind_method(D_METHOD("GetMaxRowD", "device"), &NodeChromaSDK::GetMaxRowD);
	ClassDB::bind_method(D_METHOD("GetPlayingAnimationCount"), &NodeChromaSDK::GetPlayingAnimationCount);
	ClassDB::bind_method(D_METHOD("GetPlayingAnimationId", "index"), &NodeChromaSDK::GetPlayingAnimationId);
	ClassDB::bind_method(D_METHOD("GetRGB", "red", "green", "blue"), &NodeChromaSDK::GetRGB);
	ClassDB::bind_method(D_METHOD("GetRGBD", "red", "green", "blue"), &NodeChromaSDK::GetRGBD);
	ClassDB::bind_method(D_METHOD("HasAnimationLoop", "animationId"), &NodeChromaSDK::HasAnimationLoop);
	ClassDB::bind_method(D_METHOD("HasAnimationLoopName", "path"), &NodeChromaSDK::HasAnimationLoopName);
	ClassDB::bind_method(D_METHOD("HasAnimationLoopNameD", "path"), &NodeChromaSDK::HasAnimationLoopNameD);
	ClassDB::bind_method(D_METHOD("Init"), &NodeChromaSDK::Init);
	ClassDB::bind_method(D_METHOD("InitD"), &NodeChromaSDK::InitD);
	//ClassDB::bind_method(D_METHOD("InitSDK", "AppInfo"), &NodeChromaSDK::InitSDK);
	ClassDB::bind_method(D_METHOD("InsertDelay", "animationId", "frameId", "delay"), &NodeChromaSDK::InsertDelay);
	ClassDB::bind_method(D_METHOD("InsertDelayName", "path", "frameId", "delay"), &NodeChromaSDK::InsertDelayName);
	ClassDB::bind_method(D_METHOD("InsertDelayNameD", "path", "frameId", "delay"), &NodeChromaSDK::InsertDelayNameD);
	ClassDB::bind_method(D_METHOD("InsertFrame", "animationId", "sourceFrame", "targetFrame"), &NodeChromaSDK::InsertFrame);
	ClassDB::bind_method(D_METHOD("InsertFrameName", "path", "sourceFrame", "targetFrame"), &NodeChromaSDK::InsertFrameName);
	ClassDB::bind_method(D_METHOD("InsertFrameNameD", "path", "sourceFrame", "targetFrame"), &NodeChromaSDK::InsertFrameNameD);
	ClassDB::bind_method(D_METHOD("InvertColors", "animationId", "frameId"), &NodeChromaSDK::InvertColors);
	ClassDB::bind_method(D_METHOD("InvertColorsAllFrames", "animationId"), &NodeChromaSDK::InvertColorsAllFrames);
	ClassDB::bind_method(D_METHOD("InvertColorsAllFramesName", "path"), &NodeChromaSDK::InvertColorsAllFramesName);
	ClassDB::bind_method(D_METHOD("InvertColorsAllFramesNameD", "path"), &NodeChromaSDK::InvertColorsAllFramesNameD);
	ClassDB::bind_method(D_METHOD("InvertColorsName", "path", "frameId"), &NodeChromaSDK::InvertColorsName);
	ClassDB::bind_method(D_METHOD("InvertColorsNameD", "path", "frameId"), &NodeChromaSDK::InvertColorsNameD);
	ClassDB::bind_method(D_METHOD("IsAnimationPaused", "animationId"), &NodeChromaSDK::IsAnimationPaused);
	ClassDB::bind_method(D_METHOD("IsAnimationPausedName", "path"), &NodeChromaSDK::IsAnimationPausedName);
	ClassDB::bind_method(D_METHOD("IsAnimationPausedNameD", "path"), &NodeChromaSDK::IsAnimationPausedNameD);
	ClassDB::bind_method(D_METHOD("IsDialogOpen"), &NodeChromaSDK::IsDialogOpen);
	ClassDB::bind_method(D_METHOD("IsDialogOpenD"), &NodeChromaSDK::IsDialogOpenD);
	ClassDB::bind_method(D_METHOD("IsInitialized"), &NodeChromaSDK::IsInitialized);
	ClassDB::bind_method(D_METHOD("IsInitializedD"), &NodeChromaSDK::IsInitializedD);
	ClassDB::bind_method(D_METHOD("IsPlatformSupported"), &NodeChromaSDK::IsPlatformSupported);
	ClassDB::bind_method(D_METHOD("IsPlatformSupportedD"), &NodeChromaSDK::IsPlatformSupportedD);
	ClassDB::bind_method(D_METHOD("IsPlaying", "animationId"), &NodeChromaSDK::IsPlaying);
	ClassDB::bind_method(D_METHOD("IsPlayingD", "animationId"), &NodeChromaSDK::IsPlayingD);
	ClassDB::bind_method(D_METHOD("IsPlayingName", "path"), &NodeChromaSDK::IsPlayingName);
	ClassDB::bind_method(D_METHOD("IsPlayingNameD", "path"), &NodeChromaSDK::IsPlayingNameD);
	ClassDB::bind_method(D_METHOD("IsPlayingType", "deviceType", "device"), &NodeChromaSDK::IsPlayingType);
	ClassDB::bind_method(D_METHOD("IsPlayingTypeD", "deviceType", "device"), &NodeChromaSDK::IsPlayingTypeD);
	ClassDB::bind_method(D_METHOD("Lerp", "start", "end", "amt"), &NodeChromaSDK::Lerp);
	ClassDB::bind_method(D_METHOD("LerpColor", "from", "to", "t"), &NodeChromaSDK::LerpColor);
	ClassDB::bind_method(D_METHOD("LoadAnimation", "animationId"), &NodeChromaSDK::LoadAnimation);
	ClassDB::bind_method(D_METHOD("LoadAnimationD", "animationId"), &NodeChromaSDK::LoadAnimationD);
	ClassDB::bind_method(D_METHOD("LoadAnimationName", "path"), &NodeChromaSDK::LoadAnimationName);
	ClassDB::bind_method(D_METHOD("LoadComposite", "name"), &NodeChromaSDK::LoadComposite);
	ClassDB::bind_method(D_METHOD("MakeBlankFrames", "animationId", "frameCount", "duration", "color"), &NodeChromaSDK::MakeBlankFrames);
	ClassDB::bind_method(D_METHOD("MakeBlankFramesName", "path", "frameCount", "duration", "color"), &NodeChromaSDK::MakeBlankFramesName);
	ClassDB::bind_method(D_METHOD("MakeBlankFramesNameD", "path", "frameCount", "duration", "color"), &NodeChromaSDK::MakeBlankFramesNameD);
	ClassDB::bind_method(D_METHOD("MakeBlankFramesRandom", "animationId", "frameCount", "duration"), &NodeChromaSDK::MakeBlankFramesRandom);
	ClassDB::bind_method(D_METHOD("MakeBlankFramesRandomBlackAndWhite", "animationId", "frameCount", "duration"), &NodeChromaSDK::MakeBlankFramesRandomBlackAndWhite);
	ClassDB::bind_method(D_METHOD("MakeBlankFramesRandomBlackAndWhiteName", "path", "frameCount", "duration"), &NodeChromaSDK::MakeBlankFramesRandomBlackAndWhiteName);
	ClassDB::bind_method(D_METHOD("MakeBlankFramesRandomBlackAndWhiteNameD", "path", "frameCount", "duration"), &NodeChromaSDK::MakeBlankFramesRandomBlackAndWhiteNameD);
	ClassDB::bind_method(D_METHOD("MakeBlankFramesRandomName", "path", "frameCount", "duration"), &NodeChromaSDK::MakeBlankFramesRandomName);
	ClassDB::bind_method(D_METHOD("MakeBlankFramesRandomNameD", "path", "frameCount", "duration"), &NodeChromaSDK::MakeBlankFramesRandomNameD);
	ClassDB::bind_method(D_METHOD("MakeBlankFramesRGB", "animationId", "frameCount", "duration", "red", "green", "blue"), &NodeChromaSDK::MakeBlankFramesRGB);
	ClassDB::bind_method(D_METHOD("MakeBlankFramesRGBName", "path", "frameCount", "duration", "red", "green", "blue"), &NodeChromaSDK::MakeBlankFramesRGBName);
	ClassDB::bind_method(D_METHOD("MakeBlankFramesRGBNameD", "path", "frameCount", "duration", "red", "green", "blue"), &NodeChromaSDK::MakeBlankFramesRGBNameD);
	ClassDB::bind_method(D_METHOD("MirrorHorizontally", "animationId"), &NodeChromaSDK::MirrorHorizontally);
	ClassDB::bind_method(D_METHOD("MirrorVertically", "animationId"), &NodeChromaSDK::MirrorVertically);
	ClassDB::bind_method(D_METHOD("MultiplyColorLerpAllFrames", "animationId", "color1", "color2"), &NodeChromaSDK::MultiplyColorLerpAllFrames);
	ClassDB::bind_method(D_METHOD("MultiplyColorLerpAllFramesName", "path", "color1", "color2"), &NodeChromaSDK::MultiplyColorLerpAllFramesName);
	ClassDB::bind_method(D_METHOD("MultiplyColorLerpAllFramesNameD", "path", "color1", "color2"), &NodeChromaSDK::MultiplyColorLerpAllFramesNameD);
	ClassDB::bind_method(D_METHOD("MultiplyIntensity", "animationId", "frameId", "intensity"), &NodeChromaSDK::MultiplyIntensity);
	ClassDB::bind_method(D_METHOD("MultiplyIntensityAllFrames", "animationId", "intensity"), &NodeChromaSDK::MultiplyIntensityAllFrames);
	ClassDB::bind_method(D_METHOD("MultiplyIntensityAllFramesName", "path", "intensity"), &NodeChromaSDK::MultiplyIntensityAllFramesName);
	ClassDB::bind_method(D_METHOD("MultiplyIntensityAllFramesNameD", "path", "intensity"), &NodeChromaSDK::MultiplyIntensityAllFramesNameD);
	ClassDB::bind_method(D_METHOD("MultiplyIntensityAllFramesRGB", "animationId", "red", "green", "blue"), &NodeChromaSDK::MultiplyIntensityAllFramesRGB);
	ClassDB::bind_method(D_METHOD("MultiplyIntensityAllFramesRGBName", "path", "red", "green", "blue"), &NodeChromaSDK::MultiplyIntensityAllFramesRGBName);
	ClassDB::bind_method(D_METHOD("MultiplyIntensityAllFramesRGBNameD", "path", "red", "green", "blue"), &NodeChromaSDK::MultiplyIntensityAllFramesRGBNameD);
	ClassDB::bind_method(D_METHOD("MultiplyIntensityColor", "animationId", "frameId", "color"), &NodeChromaSDK::MultiplyIntensityColor);
	ClassDB::bind_method(D_METHOD("MultiplyIntensityColorAllFrames", "animationId", "color"), &NodeChromaSDK::MultiplyIntensityColorAllFrames);
	ClassDB::bind_method(D_METHOD("MultiplyIntensityColorAllFramesName", "path", "color"), &NodeChromaSDK::MultiplyIntensityColorAllFramesName);
	ClassDB::bind_method(D_METHOD("MultiplyIntensityColorAllFramesNameD", "path", "color"), &NodeChromaSDK::MultiplyIntensityColorAllFramesNameD);
	ClassDB::bind_method(D_METHOD("MultiplyIntensityColorName", "path", "frameId", "color"), &NodeChromaSDK::MultiplyIntensityColorName);
	ClassDB::bind_method(D_METHOD("MultiplyIntensityColorNameD", "path", "frameId", "color"), &NodeChromaSDK::MultiplyIntensityColorNameD);
	ClassDB::bind_method(D_METHOD("MultiplyIntensityName", "path", "frameId", "intensity"), &NodeChromaSDK::MultiplyIntensityName);
	ClassDB::bind_method(D_METHOD("MultiplyIntensityNameD", "path", "frameId", "intensity"), &NodeChromaSDK::MultiplyIntensityNameD);
	ClassDB::bind_method(D_METHOD("MultiplyIntensityRGB", "animationId", "frameId", "red", "green", "blue"), &NodeChromaSDK::MultiplyIntensityRGB);
	ClassDB::bind_method(D_METHOD("MultiplyIntensityRGBName", "path", "frameId", "red", "green", "blue"), &NodeChromaSDK::MultiplyIntensityRGBName);
	ClassDB::bind_method(D_METHOD("MultiplyIntensityRGBNameD", "path", "frameId", "red", "green", "blue"), &NodeChromaSDK::MultiplyIntensityRGBNameD);
	ClassDB::bind_method(D_METHOD("MultiplyNonZeroTargetColorLerp", "animationId", "frameId", "color1", "color2"), &NodeChromaSDK::MultiplyNonZeroTargetColorLerp);
	ClassDB::bind_method(D_METHOD("MultiplyNonZeroTargetColorLerpAllFrames", "animationId", "color1", "color2"), &NodeChromaSDK::MultiplyNonZeroTargetColorLerpAllFrames);
	ClassDB::bind_method(D_METHOD("MultiplyNonZeroTargetColorLerpAllFramesName", "path", "color1", "color2"), &NodeChromaSDK::MultiplyNonZeroTargetColorLerpAllFramesName);
	ClassDB::bind_method(D_METHOD("MultiplyNonZeroTargetColorLerpAllFramesNameD", "path", "color1", "color2"), &NodeChromaSDK::MultiplyNonZeroTargetColorLerpAllFramesNameD);
	ClassDB::bind_method(D_METHOD("MultiplyNonZeroTargetColorLerpAllFramesRGB", "animationId", "red1", "green1", "blue1", "red2", "green2", "blue2"), &NodeChromaSDK::MultiplyNonZeroTargetColorLerpAllFramesRGB);
	ClassDB::bind_method(D_METHOD("MultiplyNonZeroTargetColorLerpAllFramesRGBName", "path", "red1", "green1", "blue1", "red2", "green2", "blue2"), &NodeChromaSDK::MultiplyNonZeroTargetColorLerpAllFramesRGBName);
	ClassDB::bind_method(D_METHOD("MultiplyNonZeroTargetColorLerpAllFramesRGBNameD", "path", "red1", "green1", "blue1", "red2", "green2", "blue2"), &NodeChromaSDK::MultiplyNonZeroTargetColorLerpAllFramesRGBNameD);
	ClassDB::bind_method(D_METHOD("MultiplyTargetColorLerp", "animationId", "frameId", "color1", "color2"), &NodeChromaSDK::MultiplyTargetColorLerp);
	ClassDB::bind_method(D_METHOD("MultiplyTargetColorLerpAllFrames", "animationId", "color1", "color2"), &NodeChromaSDK::MultiplyTargetColorLerpAllFrames);
	ClassDB::bind_method(D_METHOD("MultiplyTargetColorLerpAllFramesName", "path", "color1", "color2"), &NodeChromaSDK::MultiplyTargetColorLerpAllFramesName);
	ClassDB::bind_method(D_METHOD("MultiplyTargetColorLerpAllFramesNameD", "path", "color1", "color2"), &NodeChromaSDK::MultiplyTargetColorLerpAllFramesNameD);
	ClassDB::bind_method(D_METHOD("MultiplyTargetColorLerpAllFramesRGB", "animationId", "red1", "green1", "blue1", "red2", "green2", "blue2"), &NodeChromaSDK::MultiplyTargetColorLerpAllFramesRGB);
	ClassDB::bind_method(D_METHOD("MultiplyTargetColorLerpAllFramesRGBName", "path", "red1", "green1", "blue1", "red2", "green2", "blue2"), &NodeChromaSDK::MultiplyTargetColorLerpAllFramesRGBName);
	ClassDB::bind_method(D_METHOD("MultiplyTargetColorLerpAllFramesRGBNameD", "path", "red1", "green1", "blue1", "red2", "green2", "blue2"), &NodeChromaSDK::MultiplyTargetColorLerpAllFramesRGBNameD);
	ClassDB::bind_method(D_METHOD("MultiplyTargetColorLerpName", "path", "frameId", "color1", "color2"), &NodeChromaSDK::MultiplyTargetColorLerpName);
	ClassDB::bind_method(D_METHOD("OffsetColors", "animationId", "frameId", "red", "green", "blue"), &NodeChromaSDK::OffsetColors);
	ClassDB::bind_method(D_METHOD("OffsetColorsAllFrames", "animationId", "red", "green", "blue"), &NodeChromaSDK::OffsetColorsAllFrames);
	ClassDB::bind_method(D_METHOD("OffsetColorsAllFramesName", "path", "red", "green", "blue"), &NodeChromaSDK::OffsetColorsAllFramesName);
	ClassDB::bind_method(D_METHOD("OffsetColorsAllFramesNameD", "path", "red", "green", "blue"), &NodeChromaSDK::OffsetColorsAllFramesNameD);
	ClassDB::bind_method(D_METHOD("OffsetColorsName", "path", "frameId", "red", "green", "blue"), &NodeChromaSDK::OffsetColorsName);
	ClassDB::bind_method(D_METHOD("OffsetColorsNameD", "path", "frameId", "red", "green", "blue"), &NodeChromaSDK::OffsetColorsNameD);
	ClassDB::bind_method(D_METHOD("OffsetNonZeroColors", "animationId", "frameId", "red", "green", "blue"), &NodeChromaSDK::OffsetNonZeroColors);
	ClassDB::bind_method(D_METHOD("OffsetNonZeroColorsAllFrames", "animationId", "red", "green", "blue"), &NodeChromaSDK::OffsetNonZeroColorsAllFrames);
	ClassDB::bind_method(D_METHOD("OffsetNonZeroColorsAllFramesName", "path", "red", "green", "blue"), &NodeChromaSDK::OffsetNonZeroColorsAllFramesName);
	ClassDB::bind_method(D_METHOD("OffsetNonZeroColorsAllFramesNameD", "path", "red", "green", "blue"), &NodeChromaSDK::OffsetNonZeroColorsAllFramesNameD);
	ClassDB::bind_method(D_METHOD("OffsetNonZeroColorsName", "path", "frameId", "red", "green", "blue"), &NodeChromaSDK::OffsetNonZeroColorsName);
	ClassDB::bind_method(D_METHOD("OffsetNonZeroColorsNameD", "path", "frameId", "red", "green", "blue"), &NodeChromaSDK::OffsetNonZeroColorsNameD);
	ClassDB::bind_method(D_METHOD("OpenAnimation", "path"), &NodeChromaSDK::OpenAnimation);
	ClassDB::bind_method(D_METHOD("OpenAnimationD", "path"), &NodeChromaSDK::OpenAnimationD);
	//ClassDB::bind_method(D_METHOD("OpenAnimationFromMemory", "data", "name"), &NodeChromaSDK::OpenAnimationFromMemory);
	ClassDB::bind_method(D_METHOD("OpenEditorDialog", "path"), &NodeChromaSDK::OpenEditorDialog);
	ClassDB::bind_method(D_METHOD("OpenEditorDialogAndPlay", "path"), &NodeChromaSDK::OpenEditorDialogAndPlay);
	ClassDB::bind_method(D_METHOD("OpenEditorDialogAndPlayD", "path"), &NodeChromaSDK::OpenEditorDialogAndPlayD);
	ClassDB::bind_method(D_METHOD("OpenEditorDialogD", "path"), &NodeChromaSDK::OpenEditorDialogD);
	ClassDB::bind_method(D_METHOD("OverrideFrameDuration", "animationId", "duration"), &NodeChromaSDK::OverrideFrameDuration);
	ClassDB::bind_method(D_METHOD("OverrideFrameDurationD", "animationId", "duration"), &NodeChromaSDK::OverrideFrameDurationD);
	ClassDB::bind_method(D_METHOD("OverrideFrameDurationName", "path", "duration"), &NodeChromaSDK::OverrideFrameDurationName);
	ClassDB::bind_method(D_METHOD("PauseAnimation", "animationId"), &NodeChromaSDK::PauseAnimation);
	ClassDB::bind_method(D_METHOD("PauseAnimationName", "path"), &NodeChromaSDK::PauseAnimationName);
	ClassDB::bind_method(D_METHOD("PauseAnimationNameD", "path"), &NodeChromaSDK::PauseAnimationNameD);
	ClassDB::bind_method(D_METHOD("PlayAnimation", "animationId"), &NodeChromaSDK::PlayAnimation);
	ClassDB::bind_method(D_METHOD("PlayAnimationD", "animationId"), &NodeChromaSDK::PlayAnimationD);
	ClassDB::bind_method(D_METHOD("PlayAnimationFrame", "animationId", "frameId", "loop"), &NodeChromaSDK::PlayAnimationFrame);
	ClassDB::bind_method(D_METHOD("PlayAnimationFrameName", "path", "frameId", "loop"), &NodeChromaSDK::PlayAnimationFrameName);
	ClassDB::bind_method(D_METHOD("PlayAnimationFrameNameD", "path", "frameId", "loop"), &NodeChromaSDK::PlayAnimationFrameNameD);
	ClassDB::bind_method(D_METHOD("PlayAnimationLoop", "animationId", "loop"), &NodeChromaSDK::PlayAnimationLoop);
	ClassDB::bind_method(D_METHOD("PlayAnimationName", "path", "loop"), &NodeChromaSDK::PlayAnimationName);
	ClassDB::bind_method(D_METHOD("PlayAnimationNameD", "path", "loop"), &NodeChromaSDK::PlayAnimationNameD);
	ClassDB::bind_method(D_METHOD("PlayComposite", "name", "loop"), &NodeChromaSDK::PlayComposite);
	ClassDB::bind_method(D_METHOD("PlayCompositeD", "name", "loop"), &NodeChromaSDK::PlayCompositeD);
	ClassDB::bind_method(D_METHOD("PreviewFrame", "animationId", "frameIndex"), &NodeChromaSDK::PreviewFrame);
	ClassDB::bind_method(D_METHOD("PreviewFrameD", "animationId", "frameIndex"), &NodeChromaSDK::PreviewFrameD);
	ClassDB::bind_method(D_METHOD("PreviewFrameName", "path", "frameIndex"), &NodeChromaSDK::PreviewFrameName);
	ClassDB::bind_method(D_METHOD("ReduceFrames", "animationId", "n"), &NodeChromaSDK::ReduceFrames);
	ClassDB::bind_method(D_METHOD("ReduceFramesName", "path", "n"), &NodeChromaSDK::ReduceFramesName);
	ClassDB::bind_method(D_METHOD("ReduceFramesNameD", "path", "n"), &NodeChromaSDK::ReduceFramesNameD);
	ClassDB::bind_method(D_METHOD("ResetAnimation", "animationId"), &NodeChromaSDK::ResetAnimation);
	ClassDB::bind_method(D_METHOD("ResumeAnimation", "animationId", "loop"), &NodeChromaSDK::ResumeAnimation);
	ClassDB::bind_method(D_METHOD("ResumeAnimationName", "path", "loop"), &NodeChromaSDK::ResumeAnimationName);
	ClassDB::bind_method(D_METHOD("ResumeAnimationNameD", "path", "loop"), &NodeChromaSDK::ResumeAnimationNameD);
	ClassDB::bind_method(D_METHOD("Reverse", "animationId"), &NodeChromaSDK::Reverse);
	ClassDB::bind_method(D_METHOD("ReverseAllFrames", "animationId"), &NodeChromaSDK::ReverseAllFrames);
	ClassDB::bind_method(D_METHOD("ReverseAllFramesName", "path"), &NodeChromaSDK::ReverseAllFramesName);
	ClassDB::bind_method(D_METHOD("ReverseAllFramesNameD", "path"), &NodeChromaSDK::ReverseAllFramesNameD);
	ClassDB::bind_method(D_METHOD("SaveAnimation", "animationId", "path"), &NodeChromaSDK::SaveAnimation);
	ClassDB::bind_method(D_METHOD("SaveAnimationName", "sourceAnimation", "targetAnimation"), &NodeChromaSDK::SaveAnimationName);
	ClassDB::bind_method(D_METHOD("Set1DColor", "animationId", "frameId", "led", "color"), &NodeChromaSDK::Set1DColor);
	ClassDB::bind_method(D_METHOD("Set1DColorName", "path", "frameId", "led", "color"), &NodeChromaSDK::Set1DColorName);
	ClassDB::bind_method(D_METHOD("Set1DColorNameD", "path", "frameId", "led", "color"), &NodeChromaSDK::Set1DColorNameD);
	ClassDB::bind_method(D_METHOD("Set2DColor", "animationId", "frameId", "row", "column", "color"), &NodeChromaSDK::Set2DColor);
	ClassDB::bind_method(D_METHOD("Set2DColorName", "path", "frameId", "row", "column", "color"), &NodeChromaSDK::Set2DColorName);
	ClassDB::bind_method(D_METHOD("Set2DColorNameD", "path", "frameId", "rowColumnIndex", "color"), &NodeChromaSDK::Set2DColorNameD);
	ClassDB::bind_method(D_METHOD("SetChromaCustomColorAllFrames", "animationId"), &NodeChromaSDK::SetChromaCustomColorAllFrames);
	ClassDB::bind_method(D_METHOD("SetChromaCustomColorAllFramesName", "path"), &NodeChromaSDK::SetChromaCustomColorAllFramesName);
	ClassDB::bind_method(D_METHOD("SetChromaCustomColorAllFramesNameD", "path"), &NodeChromaSDK::SetChromaCustomColorAllFramesNameD);
	ClassDB::bind_method(D_METHOD("SetChromaCustomFlag", "animationId", "flag"), &NodeChromaSDK::SetChromaCustomFlag);
	ClassDB::bind_method(D_METHOD("SetChromaCustomFlagName", "path", "flag"), &NodeChromaSDK::SetChromaCustomFlagName);
	ClassDB::bind_method(D_METHOD("SetChromaCustomFlagNameD", "path", "flag"), &NodeChromaSDK::SetChromaCustomFlagNameD);
	ClassDB::bind_method(D_METHOD("SetCurrentFrame", "animationId", "frameId"), &NodeChromaSDK::SetCurrentFrame);
	ClassDB::bind_method(D_METHOD("SetCurrentFrameName", "path", "frameId"), &NodeChromaSDK::SetCurrentFrameName);
	ClassDB::bind_method(D_METHOD("SetCurrentFrameNameD", "path", "frameId"), &NodeChromaSDK::SetCurrentFrameNameD);
	//ClassDB::bind_method(D_METHOD("SetCustomColorFlag2D", "device", "colors"), &NodeChromaSDK::SetCustomColorFlag2D);
	ClassDB::bind_method(D_METHOD("SetDevice", "animationId", "deviceType", "device"), &NodeChromaSDK::SetDevice);
	//ClassDB::bind_method(D_METHOD("SetEffect", "effectId"), &NodeChromaSDK::SetEffect);
	ClassDB::bind_method(D_METHOD("SetEffectCustom1D", "device", "colors"), &NodeChromaSDK::SetEffectCustom1D);
	ClassDB::bind_method(D_METHOD("SetEffectCustom2D", "device", "colors"), &NodeChromaSDK::SetEffectCustom2D);
	ClassDB::bind_method(D_METHOD("SetEffectKeyboardCustom2D", "device", "colors", "keys"), &NodeChromaSDK::SetEffectKeyboardCustom2D);
	ClassDB::bind_method(D_METHOD("SetIdleAnimation", "animationId"), &NodeChromaSDK::SetIdleAnimation);
	ClassDB::bind_method(D_METHOD("SetIdleAnimationName", "path"), &NodeChromaSDK::SetIdleAnimationName);
	ClassDB::bind_method(D_METHOD("SetKeyColor", "animationId", "frameId", "rzkey", "color"), &NodeChromaSDK::SetKeyColor);
	ClassDB::bind_method(D_METHOD("SetKeyColorAllFrames", "animationId", "rzkey", "color"), &NodeChromaSDK::SetKeyColorAllFrames);
	ClassDB::bind_method(D_METHOD("SetKeyColorAllFramesName", "path", "rzkey", "color"), &NodeChromaSDK::SetKeyColorAllFramesName);
	ClassDB::bind_method(D_METHOD("SetKeyColorAllFramesNameD", "path", "rzkey", "color"), &NodeChromaSDK::SetKeyColorAllFramesNameD);
	ClassDB::bind_method(D_METHOD("SetKeyColorAllFramesRGB", "animationId", "rzkey", "red", "green", "blue"), &NodeChromaSDK::SetKeyColorAllFramesRGB);
	ClassDB::bind_method(D_METHOD("SetKeyColorAllFramesRGBName", "path", "rzkey", "red", "green", "blue"), &NodeChromaSDK::SetKeyColorAllFramesRGBName);
	ClassDB::bind_method(D_METHOD("SetKeyColorAllFramesRGBNameD", "path", "rzkey", "red", "green", "blue"), &NodeChromaSDK::SetKeyColorAllFramesRGBNameD);
	ClassDB::bind_method(D_METHOD("SetKeyColorName", "path", "frameId", "rzkey", "color"), &NodeChromaSDK::SetKeyColorName);
	ClassDB::bind_method(D_METHOD("SetKeyColorNameD", "path", "frameId", "rzkey", "color"), &NodeChromaSDK::SetKeyColorNameD);
	ClassDB::bind_method(D_METHOD("SetKeyColorRGB", "animationId", "frameId", "rzkey", "red", "green", "blue"), &NodeChromaSDK::SetKeyColorRGB);
	ClassDB::bind_method(D_METHOD("SetKeyColorRGBName", "path", "frameId", "rzkey", "red", "green", "blue"), &NodeChromaSDK::SetKeyColorRGBName);
	ClassDB::bind_method(D_METHOD("SetKeyColorRGBNameD", "path", "frameId", "rzkey", "red", "green", "blue"), &NodeChromaSDK::SetKeyColorRGBNameD);
	ClassDB::bind_method(D_METHOD("SetKeyNonZeroColor", "animationId", "frameId", "rzkey", "color"), &NodeChromaSDK::SetKeyNonZeroColor);
	ClassDB::bind_method(D_METHOD("SetKeyNonZeroColorName", "path", "frameId", "rzkey", "color"), &NodeChromaSDK::SetKeyNonZeroColorName);
	ClassDB::bind_method(D_METHOD("SetKeyNonZeroColorNameD", "path", "frameId", "rzkey", "color"), &NodeChromaSDK::SetKeyNonZeroColorNameD);
	ClassDB::bind_method(D_METHOD("SetKeyNonZeroColorRGB", "animationId", "frameId", "rzkey", "red", "green", "blue"), &NodeChromaSDK::SetKeyNonZeroColorRGB);
	ClassDB::bind_method(D_METHOD("SetKeyNonZeroColorRGBName", "path", "frameId", "rzkey", "red", "green", "blue"), &NodeChromaSDK::SetKeyNonZeroColorRGBName);
	ClassDB::bind_method(D_METHOD("SetKeyNonZeroColorRGBNameD", "path", "frameId", "rzkey", "red", "green", "blue"), &NodeChromaSDK::SetKeyNonZeroColorRGBNameD);
	ClassDB::bind_method(D_METHOD("SetKeyRowColumnColorName", "path", "frameId", "row", "column", "color"), &NodeChromaSDK::SetKeyRowColumnColorName);
	ClassDB::bind_method(D_METHOD("SetKeysColor", "animationId", "frameId", "rzkeys", "keyCount", "color"), &NodeChromaSDK::SetKeysColor);
	ClassDB::bind_method(D_METHOD("SetKeysColorAllFrames", "animationId", "rzkeys", "keyCount", "color"), &NodeChromaSDK::SetKeysColorAllFrames);
	ClassDB::bind_method(D_METHOD("SetKeysColorAllFramesName", "path", "rzkeys", "keyCount", "color"), &NodeChromaSDK::SetKeysColorAllFramesName);
	ClassDB::bind_method(D_METHOD("SetKeysColorAllFramesRGB", "animationId", "rzkeys", "keyCount", "red", "green", "blue"), &NodeChromaSDK::SetKeysColorAllFramesRGB);
	ClassDB::bind_method(D_METHOD("SetKeysColorAllFramesRGBName", "path", "rzkeys", "keyCount", "red", "green", "blue"), &NodeChromaSDK::SetKeysColorAllFramesRGBName);
	ClassDB::bind_method(D_METHOD("SetKeysColorName", "path", "frameId", "rzkeys", "keyCount", "color"), &NodeChromaSDK::SetKeysColorName);
	ClassDB::bind_method(D_METHOD("SetKeysColorRGB", "animationId", "frameId", "rzkeys", "keyCount", "red", "green", "blue"), &NodeChromaSDK::SetKeysColorRGB);
	ClassDB::bind_method(D_METHOD("SetKeysColorRGBName", "path", "frameId", "rzkeys", "keyCount", "red", "green", "blue"), &NodeChromaSDK::SetKeysColorRGBName);
	ClassDB::bind_method(D_METHOD("SetKeysNonZeroColor", "animationId", "frameId", "rzkeys", "keyCount", "color"), &NodeChromaSDK::SetKeysNonZeroColor);
	ClassDB::bind_method(D_METHOD("SetKeysNonZeroColorAllFrames", "animationId", "rzkeys", "keyCount", "color"), &NodeChromaSDK::SetKeysNonZeroColorAllFrames);
	ClassDB::bind_method(D_METHOD("SetKeysNonZeroColorAllFramesName", "path", "rzkeys", "keyCount", "color"), &NodeChromaSDK::SetKeysNonZeroColorAllFramesName);
	ClassDB::bind_method(D_METHOD("SetKeysNonZeroColorName", "path", "frameId", "rzkeys", "keyCount", "color"), &NodeChromaSDK::SetKeysNonZeroColorName);
	ClassDB::bind_method(D_METHOD("SetKeysNonZeroColorRGB", "animationId", "frameId", "rzkeys", "keyCount", "red", "green", "blue"), &NodeChromaSDK::SetKeysNonZeroColorRGB);
	ClassDB::bind_method(D_METHOD("SetKeysNonZeroColorRGBName", "path", "frameId", "rzkeys", "keyCount", "red", "green", "blue"), &NodeChromaSDK::SetKeysNonZeroColorRGBName);
	ClassDB::bind_method(D_METHOD("SetKeysZeroColor", "animationId", "frameId", "rzkeys", "keyCount", "color"), &NodeChromaSDK::SetKeysZeroColor);
	ClassDB::bind_method(D_METHOD("SetKeysZeroColorAllFrames", "animationId", "rzkeys", "keyCount", "color"), &NodeChromaSDK::SetKeysZeroColorAllFrames);
	ClassDB::bind_method(D_METHOD("SetKeysZeroColorAllFramesName", "path", "rzkeys", "keyCount", "color"), &NodeChromaSDK::SetKeysZeroColorAllFramesName);
	ClassDB::bind_method(D_METHOD("SetKeysZeroColorAllFramesRGB", "animationId", "rzkeys", "keyCount", "red", "green", "blue"), &NodeChromaSDK::SetKeysZeroColorAllFramesRGB);
	ClassDB::bind_method(D_METHOD("SetKeysZeroColorAllFramesRGBName", "path", "rzkeys", "keyCount", "red", "green", "blue"), &NodeChromaSDK::SetKeysZeroColorAllFramesRGBName);
	ClassDB::bind_method(D_METHOD("SetKeysZeroColorName", "path", "frameId", "rzkeys", "keyCount", "color"), &NodeChromaSDK::SetKeysZeroColorName);
	ClassDB::bind_method(D_METHOD("SetKeysZeroColorRGB", "animationId", "frameId", "rzkeys", "keyCount", "red", "green", "blue"), &NodeChromaSDK::SetKeysZeroColorRGB);
	ClassDB::bind_method(D_METHOD("SetKeysZeroColorRGBName", "path", "frameId", "rzkeys", "keyCount", "red", "green", "blue"), &NodeChromaSDK::SetKeysZeroColorRGBName);
	ClassDB::bind_method(D_METHOD("SetKeyZeroColor", "animationId", "frameId", "rzkey", "color"), &NodeChromaSDK::SetKeyZeroColor);
	ClassDB::bind_method(D_METHOD("SetKeyZeroColorName", "path", "frameId", "rzkey", "color"), &NodeChromaSDK::SetKeyZeroColorName);
	ClassDB::bind_method(D_METHOD("SetKeyZeroColorNameD", "path", "frameId", "rzkey", "color"), &NodeChromaSDK::SetKeyZeroColorNameD);
	ClassDB::bind_method(D_METHOD("SetKeyZeroColorRGB", "animationId", "frameId", "rzkey", "red", "green", "blue"), &NodeChromaSDK::SetKeyZeroColorRGB);
	ClassDB::bind_method(D_METHOD("SetKeyZeroColorRGBName", "path", "frameId", "rzkey", "red", "green", "blue"), &NodeChromaSDK::SetKeyZeroColorRGBName);
	ClassDB::bind_method(D_METHOD("SetKeyZeroColorRGBNameD", "path", "frameId", "rzkey", "red", "green", "blue"), &NodeChromaSDK::SetKeyZeroColorRGBNameD);
	//ClassDB::bind_method(D_METHOD("SetLogDelegate", "fp"), &NodeChromaSDK::SetLogDelegate);
	ClassDB::bind_method(D_METHOD("SetStaticColor", "deviceType", "device", "color"), &NodeChromaSDK::SetStaticColor);
	ClassDB::bind_method(D_METHOD("SetStaticColorAll", "color"), &NodeChromaSDK::SetStaticColorAll);
	ClassDB::bind_method(D_METHOD("StaticColor", "deviceType", "device", "color"), &NodeChromaSDK::StaticColor);
	ClassDB::bind_method(D_METHOD("StaticColorAll", "color"), &NodeChromaSDK::StaticColorAll);
	ClassDB::bind_method(D_METHOD("StaticColorD", "deviceType", "device", "color"), &NodeChromaSDK::StaticColorD);
	ClassDB::bind_method(D_METHOD("StopAll"), &NodeChromaSDK::StopAll);
	ClassDB::bind_method(D_METHOD("StopAnimation", "animationId"), &NodeChromaSDK::StopAnimation);
	ClassDB::bind_method(D_METHOD("StopAnimationD", "animationId"), &NodeChromaSDK::StopAnimationD);
	ClassDB::bind_method(D_METHOD("StopAnimationName", "path"), &NodeChromaSDK::StopAnimationName);
	ClassDB::bind_method(D_METHOD("StopAnimationNameD", "path"), &NodeChromaSDK::StopAnimationNameD);
	ClassDB::bind_method(D_METHOD("StopAnimationType", "deviceType", "device"), &NodeChromaSDK::StopAnimationType);
	ClassDB::bind_method(D_METHOD("StopAnimationTypeD", "deviceType", "device"), &NodeChromaSDK::StopAnimationTypeD);
	ClassDB::bind_method(D_METHOD("StopComposite", "name"), &NodeChromaSDK::StopComposite);
	ClassDB::bind_method(D_METHOD("StopCompositeD", "name"), &NodeChromaSDK::StopCompositeD);
	ClassDB::bind_method(D_METHOD("SubtractColor", "color1", "color2"), &NodeChromaSDK::SubtractColor);
	ClassDB::bind_method(D_METHOD("SubtractNonZeroAllKeys", "sourceAnimationId", "targetAnimationId", "frameId"), &NodeChromaSDK::SubtractNonZeroAllKeys);
	ClassDB::bind_method(D_METHOD("SubtractNonZeroAllKeysAllFrames", "sourceAnimationId", "targetAnimationId"), &NodeChromaSDK::SubtractNonZeroAllKeysAllFrames);
	ClassDB::bind_method(D_METHOD("SubtractNonZeroAllKeysAllFramesName", "sourceAnimation", "targetAnimation"), &NodeChromaSDK::SubtractNonZeroAllKeysAllFramesName);
	ClassDB::bind_method(D_METHOD("SubtractNonZeroAllKeysAllFramesNameD", "sourceAnimation", "targetAnimation"), &NodeChromaSDK::SubtractNonZeroAllKeysAllFramesNameD);
	ClassDB::bind_method(D_METHOD("SubtractNonZeroAllKeysAllFramesOffset", "sourceAnimationId", "targetAnimationId", "offset"), &NodeChromaSDK::SubtractNonZeroAllKeysAllFramesOffset);
	ClassDB::bind_method(D_METHOD("SubtractNonZeroAllKeysAllFramesOffsetName", "sourceAnimation", "targetAnimation", "offset"), &NodeChromaSDK::SubtractNonZeroAllKeysAllFramesOffsetName);
	ClassDB::bind_method(D_METHOD("SubtractNonZeroAllKeysAllFramesOffsetNameD", "sourceAnimation", "targetAnimation", "offset"), &NodeChromaSDK::SubtractNonZeroAllKeysAllFramesOffsetNameD);
	ClassDB::bind_method(D_METHOD("SubtractNonZeroAllKeysName", "sourceAnimation", "targetAnimation", "frameId"), &NodeChromaSDK::SubtractNonZeroAllKeysName);
	ClassDB::bind_method(D_METHOD("SubtractNonZeroAllKeysOffset", "sourceAnimationId", "targetAnimationId", "frameId", "offset"), &NodeChromaSDK::SubtractNonZeroAllKeysOffset);
	ClassDB::bind_method(D_METHOD("SubtractNonZeroAllKeysOffsetName", "sourceAnimation", "targetAnimation", "frameId", "offset"), &NodeChromaSDK::SubtractNonZeroAllKeysOffsetName);
	ClassDB::bind_method(D_METHOD("SubtractNonZeroAllKeysOffsetNameD", "sourceAnimation", "targetAnimation", "frameId", "offset"), &NodeChromaSDK::SubtractNonZeroAllKeysOffsetNameD);
	ClassDB::bind_method(D_METHOD("SubtractNonZeroTargetAllKeysAllFrames", "sourceAnimationId", "targetAnimationId"), &NodeChromaSDK::SubtractNonZeroTargetAllKeysAllFrames);
	ClassDB::bind_method(D_METHOD("SubtractNonZeroTargetAllKeysAllFramesName", "sourceAnimation", "targetAnimation"), &NodeChromaSDK::SubtractNonZeroTargetAllKeysAllFramesName);
	ClassDB::bind_method(D_METHOD("SubtractNonZeroTargetAllKeysAllFramesNameD", "sourceAnimation", "targetAnimation"), &NodeChromaSDK::SubtractNonZeroTargetAllKeysAllFramesNameD);
	ClassDB::bind_method(D_METHOD("SubtractNonZeroTargetAllKeysAllFramesOffset", "sourceAnimationId", "targetAnimationId", "offset"), &NodeChromaSDK::SubtractNonZeroTargetAllKeysAllFramesOffset);
	ClassDB::bind_method(D_METHOD("SubtractNonZeroTargetAllKeysAllFramesOffsetName", "sourceAnimation", "targetAnimation", "offset"), &NodeChromaSDK::SubtractNonZeroTargetAllKeysAllFramesOffsetName);
	ClassDB::bind_method(D_METHOD("SubtractNonZeroTargetAllKeysAllFramesOffsetNameD", "sourceAnimation", "targetAnimation", "offset"), &NodeChromaSDK::SubtractNonZeroTargetAllKeysAllFramesOffsetNameD);
	ClassDB::bind_method(D_METHOD("SubtractNonZeroTargetAllKeysOffset", "sourceAnimationId", "targetAnimationId", "frameId", "offset"), &NodeChromaSDK::SubtractNonZeroTargetAllKeysOffset);
	ClassDB::bind_method(D_METHOD("SubtractNonZeroTargetAllKeysOffsetName", "sourceAnimation", "targetAnimation", "frameId", "offset"), &NodeChromaSDK::SubtractNonZeroTargetAllKeysOffsetName);
	ClassDB::bind_method(D_METHOD("SubtractNonZeroTargetAllKeysOffsetNameD", "sourceAnimation", "targetAnimation", "frameId", "offset"), &NodeChromaSDK::SubtractNonZeroTargetAllKeysOffsetNameD);
	ClassDB::bind_method(D_METHOD("SubtractThresholdColorsMinMaxAllFramesRGB", "animationId", "minThreshold", "minRed", "minGreen", "minBlue", "maxThreshold", "maxRed", "maxGreen", "maxBlue"), &NodeChromaSDK::SubtractThresholdColorsMinMaxAllFramesRGB);
	ClassDB::bind_method(D_METHOD("SubtractThresholdColorsMinMaxAllFramesRGBName", "path", "minThreshold", "minRed", "minGreen", "minBlue", "maxThreshold", "maxRed", "maxGreen", "maxBlue"), &NodeChromaSDK::SubtractThresholdColorsMinMaxAllFramesRGBName);
	ClassDB::bind_method(D_METHOD("SubtractThresholdColorsMinMaxAllFramesRGBNameD", "path", "minThreshold", "minRed", "minGreen", "minBlue", "maxThreshold", "maxRed", "maxGreen", "maxBlue"), &NodeChromaSDK::SubtractThresholdColorsMinMaxAllFramesRGBNameD);
	ClassDB::bind_method(D_METHOD("SubtractThresholdColorsMinMaxRGB", "animationId", "frameId", "minThreshold", "minRed", "minGreen", "minBlue", "maxThreshold", "maxRed", "maxGreen", "maxBlue"), &NodeChromaSDK::SubtractThresholdColorsMinMaxRGB);
	ClassDB::bind_method(D_METHOD("SubtractThresholdColorsMinMaxRGBName", "path", "frameId", "minThreshold", "minRed", "minGreen", "minBlue", "maxThreshold", "maxRed", "maxGreen", "maxBlue"), &NodeChromaSDK::SubtractThresholdColorsMinMaxRGBName);
	ClassDB::bind_method(D_METHOD("SubtractThresholdColorsMinMaxRGBNameD", "path", "frameId", "minThreshold", "minRed", "minGreen", "minBlue", "maxThreshold", "maxRed", "maxGreen", "maxBlue"), &NodeChromaSDK::SubtractThresholdColorsMinMaxRGBNameD);
	ClassDB::bind_method(D_METHOD("TrimEndFrames", "animationId", "lastFrameId"), &NodeChromaSDK::TrimEndFrames);
	ClassDB::bind_method(D_METHOD("TrimEndFramesName", "path", "lastFrameId"), &NodeChromaSDK::TrimEndFramesName);
	ClassDB::bind_method(D_METHOD("TrimEndFramesNameD", "path", "lastFrameId"), &NodeChromaSDK::TrimEndFramesNameD);
	ClassDB::bind_method(D_METHOD("TrimFrame", "animationId", "frameId"), &NodeChromaSDK::TrimFrame);
	ClassDB::bind_method(D_METHOD("TrimFrameName", "path", "frameId"), &NodeChromaSDK::TrimFrameName);
	ClassDB::bind_method(D_METHOD("TrimFrameNameD", "path", "frameId"), &NodeChromaSDK::TrimFrameNameD);
	ClassDB::bind_method(D_METHOD("TrimStartFrames", "animationId", "numberOfFrames"), &NodeChromaSDK::TrimStartFrames);
	ClassDB::bind_method(D_METHOD("TrimStartFramesName", "path", "numberOfFrames"), &NodeChromaSDK::TrimStartFramesName);
	ClassDB::bind_method(D_METHOD("TrimStartFramesNameD", "path", "numberOfFrames"), &NodeChromaSDK::TrimStartFramesNameD);
	ClassDB::bind_method(D_METHOD("Uninit"), &NodeChromaSDK::Uninit);
	ClassDB::bind_method(D_METHOD("UninitD"), &NodeChromaSDK::UninitD);
	ClassDB::bind_method(D_METHOD("UnloadAnimation", "animationId"), &NodeChromaSDK::UnloadAnimation);
	ClassDB::bind_method(D_METHOD("UnloadAnimationD", "animationId"), &NodeChromaSDK::UnloadAnimationD);
	ClassDB::bind_method(D_METHOD("UnloadAnimationName", "path"), &NodeChromaSDK::UnloadAnimationName);
	ClassDB::bind_method(D_METHOD("UnloadComposite", "name"), &NodeChromaSDK::UnloadComposite);
	ClassDB::bind_method(D_METHOD("UnloadLibrarySDK"), &NodeChromaSDK::UnloadLibrarySDK);
	ClassDB::bind_method(D_METHOD("UnloadLibraryStreamingPlugin"), &NodeChromaSDK::UnloadLibraryStreamingPlugin);
	//ClassDB::bind_method(D_METHOD("UpdateFrame", "animationId", "frameIndex", "duration", "colors", "length", "keys", "keysLength"), &NodeChromaSDK::UpdateFrame);
	//ClassDB::bind_method(D_METHOD("UpdateFrameName", "path", "frameIndex", "duration", "colors", "length", "keys", "keysLength"), &NodeChromaSDK::UpdateFrameName);
	ClassDB::bind_method(D_METHOD("UseIdleAnimation", "device", "flag"), &NodeChromaSDK::UseIdleAnimation);
	ClassDB::bind_method(D_METHOD("UseIdleAnimations", "flag"), &NodeChromaSDK::UseIdleAnimations);
	ClassDB::bind_method(D_METHOD("UsePreloading", "animationId", "flag"), &NodeChromaSDK::UsePreloading);
	ClassDB::bind_method(D_METHOD("UsePreloadingName", "path", "flag"), &NodeChromaSDK::UsePreloadingName);
#pragma endregion
}

#pragma region autogenerated
/*
	Return the sum of colors
*/
int godot::NodeChromaSDK::AddColor(const int color1, const int color2)
{
	return ChromaAnimationAPI::AddColor(color1, color2);
}

/*
	Adds a frame to the `Chroma` animation and sets the `duration` (in seconds).
	The `color` is expected to be an array of the dimensions for the `deviceType/device`.
	The `length` parameter is the size of the `color` array. For `EChromaSDKDevice1DEnum`
	the array size should be `MAX LEDS`. For `EChromaSDKDevice2DEnum` the array
	size should be `MAX ROW` times `MAX COLUMN`. Returns the animation id upon
	success. Returns negative one upon failure.
*/
int godot::NodeChromaSDK::AddFrame(int animationId, float duration, int* colors, int length)
{
	return ChromaAnimationAPI::AddFrame(animationId, duration, colors, length);
}

/*
	Add source color to target where color is not black for frame id, reference
	source and target by id.
*/
void godot::NodeChromaSDK::AddNonZeroAllKeys(int sourceAnimationId, int targetAnimationId, int frameId)
{
	ChromaAnimationAPI::AddNonZeroAllKeys(sourceAnimationId, targetAnimationId, frameId);
}

/*
	Add source color to target where color is not black for all frames, reference
	source and target by id.
*/
void godot::NodeChromaSDK::AddNonZeroAllKeysAllFrames(int sourceAnimationId, int targetAnimationId)
{
	ChromaAnimationAPI::AddNonZeroAllKeysAllFrames(sourceAnimationId, targetAnimationId);
}

/*
	Add source color to target where color is not black for all frames, reference
	source and target by name.
*/
void godot::NodeChromaSDK::AddNonZeroAllKeysAllFramesName(String sourceAnimation, String targetAnimation)
{
	ChromaAnimationAPI::AddNonZeroAllKeysAllFramesName(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data());
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::AddNonZeroAllKeysAllFramesNameD(String sourceAnimation, String targetAnimation)
{
	return ChromaAnimationAPI::AddNonZeroAllKeysAllFramesNameD(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data());
}

/*
	Add source color to target where color is not black for all frames starting
	at offset for the length of the source, reference source and target by
	id.
*/
void godot::NodeChromaSDK::AddNonZeroAllKeysAllFramesOffset(int sourceAnimationId, int targetAnimationId, int offset)
{
	ChromaAnimationAPI::AddNonZeroAllKeysAllFramesOffset(sourceAnimationId, targetAnimationId, offset);
}

/*
	Add source color to target where color is not black for all frames starting
	at offset for the length of the source, reference source and target by
	name.
*/
void godot::NodeChromaSDK::AddNonZeroAllKeysAllFramesOffsetName(String sourceAnimation, String targetAnimation, int offset)
{
	ChromaAnimationAPI::AddNonZeroAllKeysAllFramesOffsetName(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data(), offset);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::AddNonZeroAllKeysAllFramesOffsetNameD(String sourceAnimation, String targetAnimation, double offset)
{
	return ChromaAnimationAPI::AddNonZeroAllKeysAllFramesOffsetNameD(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data(), offset);
}

/*
	Add source color to target where color is not black for frame id, reference
	source and target by name.
*/
void godot::NodeChromaSDK::AddNonZeroAllKeysName(String sourceAnimation, String targetAnimation, int frameId)
{
	ChromaAnimationAPI::AddNonZeroAllKeysName(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data(), frameId);
}

/*
	Add source color to target where color is not black for the source frame
	and target offset frame, reference source and target by id.
*/
void godot::NodeChromaSDK::AddNonZeroAllKeysOffset(int sourceAnimationId, int targetAnimationId, int frameId, int offset)
{
	ChromaAnimationAPI::AddNonZeroAllKeysOffset(sourceAnimationId, targetAnimationId, frameId, offset);
}

/*
	Add source color to target where color is not black for the source frame
	and target offset frame, reference source and target by name.
*/
void godot::NodeChromaSDK::AddNonZeroAllKeysOffsetName(String sourceAnimation, String targetAnimation, int frameId, int offset)
{
	ChromaAnimationAPI::AddNonZeroAllKeysOffsetName(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data(), frameId, offset);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::AddNonZeroAllKeysOffsetNameD(String sourceAnimation, String targetAnimation, double frameId, double offset)
{
	return ChromaAnimationAPI::AddNonZeroAllKeysOffsetNameD(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data(), frameId, offset);
}

/*
	Add source color to target where the target color is not black for all frames,
	reference source and target by id.
*/
void godot::NodeChromaSDK::AddNonZeroTargetAllKeysAllFrames(int sourceAnimationId, int targetAnimationId)
{
	ChromaAnimationAPI::AddNonZeroTargetAllKeysAllFrames(sourceAnimationId, targetAnimationId);
}

/*
	Add source color to target where the target color is not black for all frames,
	reference source and target by name.
*/
void godot::NodeChromaSDK::AddNonZeroTargetAllKeysAllFramesName(String sourceAnimation, String targetAnimation)
{
	ChromaAnimationAPI::AddNonZeroTargetAllKeysAllFramesName(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data());
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::AddNonZeroTargetAllKeysAllFramesNameD(String sourceAnimation, String targetAnimation)
{
	return ChromaAnimationAPI::AddNonZeroTargetAllKeysAllFramesNameD(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data());
}

/*
	Add source color to target where the target color is not black for all frames
	starting at offset for the length of the source, reference source and target
	by id.
*/
void godot::NodeChromaSDK::AddNonZeroTargetAllKeysAllFramesOffset(int sourceAnimationId, int targetAnimationId, int offset)
{
	ChromaAnimationAPI::AddNonZeroTargetAllKeysAllFramesOffset(sourceAnimationId, targetAnimationId, offset);
}

/*
	Add source color to target where the target color is not black for all frames
	starting at offset for the length of the source, reference source and target
	by name.
*/
void godot::NodeChromaSDK::AddNonZeroTargetAllKeysAllFramesOffsetName(String sourceAnimation, String targetAnimation, int offset)
{
	ChromaAnimationAPI::AddNonZeroTargetAllKeysAllFramesOffsetName(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data(), offset);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::AddNonZeroTargetAllKeysAllFramesOffsetNameD(String sourceAnimation, String targetAnimation, double offset)
{
	return ChromaAnimationAPI::AddNonZeroTargetAllKeysAllFramesOffsetNameD(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data(), offset);
}

/*
	Add source color to target where target color is not blank from the source
	frame to the target offset frame, reference source and target by id.
*/
void godot::NodeChromaSDK::AddNonZeroTargetAllKeysOffset(int sourceAnimationId, int targetAnimationId, int frameId, int offset)
{
	ChromaAnimationAPI::AddNonZeroTargetAllKeysOffset(sourceAnimationId, targetAnimationId, frameId, offset);
}

/*
	Add source color to target where target color is not blank from the source
	frame to the target offset frame, reference source and target by name.
*/
void godot::NodeChromaSDK::AddNonZeroTargetAllKeysOffsetName(String sourceAnimation, String targetAnimation, int frameId, int offset)
{
	ChromaAnimationAPI::AddNonZeroTargetAllKeysOffsetName(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data(), frameId, offset);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::AddNonZeroTargetAllKeysOffsetNameD(String sourceAnimation, String targetAnimation, double frameId, double offset)
{
	return ChromaAnimationAPI::AddNonZeroTargetAllKeysOffsetNameD(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data(), frameId, offset);
}

/*
	Append all source frames to the target animation, reference source and target
	by id.
*/
void godot::NodeChromaSDK::AppendAllFrames(int sourceAnimationId, int targetAnimationId)
{
	ChromaAnimationAPI::AppendAllFrames(sourceAnimationId, targetAnimationId);
}

/*
	Append all source frames to the target animation, reference source and target
	by name.
*/
void godot::NodeChromaSDK::AppendAllFramesName(String sourceAnimation, String targetAnimation)
{
	ChromaAnimationAPI::AppendAllFramesName(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data());
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::AppendAllFramesNameD(String sourceAnimation, String targetAnimation)
{
	return ChromaAnimationAPI::AppendAllFramesNameD(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data());
}

/*
	`PluginClearAll` will issue a `CLEAR` effect for all devices.
*/
void godot::NodeChromaSDK::ClearAll()
{
	ChromaAnimationAPI::ClearAll();
}

/*
	`PluginClearAnimationType` will issue a `CLEAR` effect for the given device.
*/
void godot::NodeChromaSDK::ClearAnimationType(int deviceType, int device)
{
	ChromaAnimationAPI::ClearAnimationType(deviceType, device);
}

/*
	`PluginCloseAll` closes all open animations so they can be reloaded from
	disk. The set of animations will be stopped if playing.
*/
void godot::NodeChromaSDK::CloseAll()
{
	ChromaAnimationAPI::CloseAll();
}

/*
	Closes the `Chroma` animation to free up resources referenced by id. Returns
	the animation id upon success. Returns negative one upon failure. This
	might be used while authoring effects if there was a change necessitating
	re-opening the animation. The animation id can no longer be used once closed.
*/
int godot::NodeChromaSDK::CloseAnimation(int animationId)
{
	return ChromaAnimationAPI::CloseAnimation(animationId);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::CloseAnimationD(double animationId)
{
	return ChromaAnimationAPI::CloseAnimationD(animationId);
}

/*
	Closes the `Chroma` animation referenced by name so that the animation can
	be reloaded from disk.
*/
void godot::NodeChromaSDK::CloseAnimationName(String path)
{
	ChromaAnimationAPI::CloseAnimationName(path.utf8().get_data());
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::CloseAnimationNameD(String path)
{
	return ChromaAnimationAPI::CloseAnimationNameD(path.utf8().get_data());
}

/*
	`PluginCloseComposite` closes a set of animations so they can be reloaded
	from disk. The set of animations will be stopped if playing.
*/
void godot::NodeChromaSDK::CloseComposite(String name)
{
	ChromaAnimationAPI::CloseComposite(name.utf8().get_data());
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::CloseCompositeD(String name)
{
	return ChromaAnimationAPI::CloseCompositeD(name.utf8().get_data());
}

/*
	Copy source animation to target animation for the given frame. Source and
	target are referenced by id.
*/
void godot::NodeChromaSDK::CopyAllKeys(int sourceAnimationId, int targetAnimationId, int frameId)
{
	ChromaAnimationAPI::CopyAllKeys(sourceAnimationId, targetAnimationId, frameId);
}

/*
	Copy source animation to target animation for the given frame. Source and
	target are referenced by id.
*/
void godot::NodeChromaSDK::CopyAllKeysName(String sourceAnimation, String targetAnimation, int frameId)
{
	ChromaAnimationAPI::CopyAllKeysName(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data(), frameId);
}

/*
	Copy animation to named target animation in memory. If target animation
	exists, close first. Source is referenced by id.
*/
int godot::NodeChromaSDK::CopyAnimation(int sourceAnimationId, String targetAnimation)
{
	return ChromaAnimationAPI::CopyAnimation(sourceAnimationId, targetAnimation.utf8().get_data());
}

/*
	Copy animation to named target animation in memory. If target animation
	exists, close first. Source is referenced by name.
*/
void godot::NodeChromaSDK::CopyAnimationName(String sourceAnimation, String targetAnimation)
{
	ChromaAnimationAPI::CopyAnimationName(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data());
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::CopyAnimationNameD(String sourceAnimation, String targetAnimation)
{
	return ChromaAnimationAPI::CopyAnimationNameD(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data());
}

/*
	Copy blue channel to other channels for all frames. Intensity range is 0.0
	to 1.0. Reference the animation by id.
*/
void godot::NodeChromaSDK::CopyBlueChannelAllFrames(int animationId, float redIntensity, float greenIntensity)
{
	ChromaAnimationAPI::CopyBlueChannelAllFrames(animationId, redIntensity, greenIntensity);
}

/*
	Copy blue channel to other channels for all frames. Intensity range is 0.0
	to 1.0. Reference the animation by name.
*/
void godot::NodeChromaSDK::CopyBlueChannelAllFramesName(String path, float redIntensity, float greenIntensity)
{
	ChromaAnimationAPI::CopyBlueChannelAllFramesName(path.utf8().get_data(), redIntensity, greenIntensity);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::CopyBlueChannelAllFramesNameD(String path, double redIntensity, double greenIntensity)
{
	return ChromaAnimationAPI::CopyBlueChannelAllFramesNameD(path.utf8().get_data(), redIntensity, greenIntensity);
}

/*
	Copy green channel to other channels for all frames. Intensity range is
	0.0 to 1.0. Reference the animation by id.
*/
void godot::NodeChromaSDK::CopyGreenChannelAllFrames(int animationId, float redIntensity, float blueIntensity)
{
	ChromaAnimationAPI::CopyGreenChannelAllFrames(animationId, redIntensity, blueIntensity);
}

/*
	Copy green channel to other channels for all frames. Intensity range is
	0.0 to 1.0. Reference the animation by name.
*/
void godot::NodeChromaSDK::CopyGreenChannelAllFramesName(String path, float redIntensity, float blueIntensity)
{
	ChromaAnimationAPI::CopyGreenChannelAllFramesName(path.utf8().get_data(), redIntensity, blueIntensity);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::CopyGreenChannelAllFramesNameD(String path, double redIntensity, double blueIntensity)
{
	return ChromaAnimationAPI::CopyGreenChannelAllFramesNameD(path.utf8().get_data(), redIntensity, blueIntensity);
}

/*
	Copy animation key color from the source animation to the target animation
	for the given frame. Reference the source and target by id.
*/
void godot::NodeChromaSDK::CopyKeyColor(int sourceAnimationId, int targetAnimationId, int frameId, int rzkey)
{
	ChromaAnimationAPI::CopyKeyColor(sourceAnimationId, targetAnimationId, frameId, rzkey);
}

/*
	Copy animation key color from the source animation to the target animation
	for all frames. Reference the source and target by id.
*/
void godot::NodeChromaSDK::CopyKeyColorAllFrames(int sourceAnimationId, int targetAnimationId, int rzkey)
{
	ChromaAnimationAPI::CopyKeyColorAllFrames(sourceAnimationId, targetAnimationId, rzkey);
}

/*
	Copy animation key color from the source animation to the target animation
	for all frames. Reference the source and target by name.
*/
void godot::NodeChromaSDK::CopyKeyColorAllFramesName(String sourceAnimation, String targetAnimation, int rzkey)
{
	ChromaAnimationAPI::CopyKeyColorAllFramesName(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data(), rzkey);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::CopyKeyColorAllFramesNameD(String sourceAnimation, String targetAnimation, double rzkey)
{
	return ChromaAnimationAPI::CopyKeyColorAllFramesNameD(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data(), rzkey);
}

/*
	Copy animation key color from the source animation to the target animation
	for all frames, starting at the offset for the length of the source animation.
	Source and target are referenced by id.
*/
void godot::NodeChromaSDK::CopyKeyColorAllFramesOffset(int sourceAnimationId, int targetAnimationId, int rzkey, int offset)
{
	ChromaAnimationAPI::CopyKeyColorAllFramesOffset(sourceAnimationId, targetAnimationId, rzkey, offset);
}

/*
	Copy animation key color from the source animation to the target animation
	for all frames, starting at the offset for the length of the source animation.
	Source and target are referenced by name.
*/
void godot::NodeChromaSDK::CopyKeyColorAllFramesOffsetName(String sourceAnimation, String targetAnimation, int rzkey, int offset)
{
	ChromaAnimationAPI::CopyKeyColorAllFramesOffsetName(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data(), rzkey, offset);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::CopyKeyColorAllFramesOffsetNameD(String sourceAnimation, String targetAnimation, double rzkey, double offset)
{
	return ChromaAnimationAPI::CopyKeyColorAllFramesOffsetNameD(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data(), rzkey, offset);
}

/*
	Copy animation key color from the source animation to the target animation
	for the given frame.
*/
void godot::NodeChromaSDK::CopyKeyColorName(String sourceAnimation, String targetAnimation, int frameId, int rzkey)
{
	ChromaAnimationAPI::CopyKeyColorName(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data(), frameId, rzkey);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::CopyKeyColorNameD(String sourceAnimation, String targetAnimation, double frameId, double rzkey)
{
	return ChromaAnimationAPI::CopyKeyColorNameD(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data(), frameId, rzkey);
}

/*
	Copy animation color for a set of keys from the source animation to the
	target animation for the given frame. Reference the source and target by
	id.
*/
void godot::NodeChromaSDK::CopyKeysColor(int sourceAnimationId, int targetAnimationId, int frameId, Array keys, int size)
{
	if (keys.size())
	{
		int* ptrKeys = new int[keys.size()];
		for (int i = 0; i < keys.size(); ++i)
		{
			ptrKeys[i] = (int)keys[i];
		}
		ChromaAnimationAPI::CopyKeysColor(sourceAnimationId, targetAnimationId, frameId, ptrKeys, size);
		delete[] ptrKeys;
	}
}

/*
	Copy animation color for a set of keys from the source animation to the
	target animation for all frames. Reference the source and target by id.
*/
void godot::NodeChromaSDK::CopyKeysColorAllFrames(int sourceAnimationId, int targetAnimationId, Array keys, int size)
{
	if (keys.size())
	{
		int* ptrKeys = new int[keys.size()];
		for (int i = 0; i < keys.size(); ++i)
		{
			ptrKeys[i] = (int)keys[i];
		}
		ChromaAnimationAPI::CopyKeysColorAllFrames(sourceAnimationId, targetAnimationId, ptrKeys, size);
		delete[] ptrKeys;
	}
}

/*
	Copy animation color for a set of keys from the source animation to the
	target animation for all frames. Reference the source and target by name.
*/
void godot::NodeChromaSDK::CopyKeysColorAllFramesName(String sourceAnimation, String targetAnimation, Array keys, int size)
{
	if (keys.size())
	{
		int* ptrKeys = new int[keys.size()];
		for (int i = 0; i < keys.size(); ++i)
		{
			ptrKeys[i] = (int)keys[i];
		}
		ChromaAnimationAPI::CopyKeysColorAllFramesName(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data(), ptrKeys, size);
		delete[] ptrKeys;
	}
}

/*
	Copy animation color for a set of keys from the source animation to the
	target animation for the given frame. Reference the source and target by
	name.
*/
void godot::NodeChromaSDK::CopyKeysColorName(String sourceAnimation, String targetAnimation, int frameId, Array keys, int size)
{
	if (keys.size())
	{
		int* ptrKeys = new int[keys.size()];
		for (int i = 0; i < keys.size(); ++i)
		{
			ptrKeys[i] = (int)keys[i];
		}
		ChromaAnimationAPI::CopyKeysColorName(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data(), frameId, ptrKeys, size);
		delete[] ptrKeys;
	}
}

/*
	Copy animation color for a set of keys from the source animation to the
	target animation from the source frame to the target frame. Reference the
	source and target by id.
*/
void godot::NodeChromaSDK::CopyKeysColorOffset(int sourceAnimationId, int targetAnimationId, int sourceFrameId, int targetFrameId, Array keys, int size)
{
	if (keys.size())
	{
		int* ptrKeys = new int[keys.size()];
		for (int i = 0; i < keys.size(); ++i)
		{
			ptrKeys[i] = (int)keys[i];
		}
		ChromaAnimationAPI::CopyKeysColorOffset(sourceAnimationId, targetAnimationId, sourceFrameId, targetFrameId, ptrKeys, size);
		delete[] ptrKeys;
	}
}

/*
	Copy animation color for a set of keys from the source animation to the
	target animation from the source frame to the target frame. Reference the
	source and target by name.
*/
void godot::NodeChromaSDK::CopyKeysColorOffsetName(String sourceAnimation, String targetAnimation, int sourceFrameId, int targetFrameId, Array keys, int size)
{
	if (keys.size())
	{
		int* ptrKeys = new int[keys.size()];
		for (int i = 0; i < keys.size(); ++i)
		{
			ptrKeys[i] = (int)keys[i];
		}
		ChromaAnimationAPI::CopyKeysColorOffsetName(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data(), sourceFrameId, targetFrameId, ptrKeys, size);
		delete[] ptrKeys;
	}
}

/*
	Copy source animation to target animation for the given frame. Source and
	target are referenced by id.
*/
void godot::NodeChromaSDK::CopyNonZeroAllKeys(int sourceAnimationId, int targetAnimationId, int frameId)
{
	ChromaAnimationAPI::CopyNonZeroAllKeys(sourceAnimationId, targetAnimationId, frameId);
}

/*
	Copy nonzero colors from a source animation to a target animation for all
	frames. Reference source and target by id.
*/
void godot::NodeChromaSDK::CopyNonZeroAllKeysAllFrames(int sourceAnimationId, int targetAnimationId)
{
	ChromaAnimationAPI::CopyNonZeroAllKeysAllFrames(sourceAnimationId, targetAnimationId);
}

/*
	Copy nonzero colors from a source animation to a target animation for all
	frames. Reference source and target by name.
*/
void godot::NodeChromaSDK::CopyNonZeroAllKeysAllFramesName(String sourceAnimation, String targetAnimation)
{
	ChromaAnimationAPI::CopyNonZeroAllKeysAllFramesName(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data());
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::CopyNonZeroAllKeysAllFramesNameD(String sourceAnimation, String targetAnimation)
{
	return ChromaAnimationAPI::CopyNonZeroAllKeysAllFramesNameD(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data());
}

/*
	Copy nonzero colors from a source animation to a target animation for all
	frames starting at the offset for the length of the source animation. The
	source and target are referenced by id.
*/
void godot::NodeChromaSDK::CopyNonZeroAllKeysAllFramesOffset(int sourceAnimationId, int targetAnimationId, int offset)
{
	ChromaAnimationAPI::CopyNonZeroAllKeysAllFramesOffset(sourceAnimationId, targetAnimationId, offset);
}

/*
	Copy nonzero colors from a source animation to a target animation for all
	frames starting at the offset for the length of the source animation. The
	source and target are referenced by name.
*/
void godot::NodeChromaSDK::CopyNonZeroAllKeysAllFramesOffsetName(String sourceAnimation, String targetAnimation, int offset)
{
	ChromaAnimationAPI::CopyNonZeroAllKeysAllFramesOffsetName(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data(), offset);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::CopyNonZeroAllKeysAllFramesOffsetNameD(String sourceAnimation, String targetAnimation, double offset)
{
	return ChromaAnimationAPI::CopyNonZeroAllKeysAllFramesOffsetNameD(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data(), offset);
}

/*
	Copy nonzero colors from source animation to target animation for the specified
	frame. Source and target are referenced by id.
*/
void godot::NodeChromaSDK::CopyNonZeroAllKeysName(String sourceAnimation, String targetAnimation, int frameId)
{
	ChromaAnimationAPI::CopyNonZeroAllKeysName(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data(), frameId);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::CopyNonZeroAllKeysNameD(String sourceAnimation, String targetAnimation, double frameId)
{
	return ChromaAnimationAPI::CopyNonZeroAllKeysNameD(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data(), frameId);
}

/*
	Copy nonzero colors from the source animation to the target animation from
	the source frame to the target offset frame. Source and target are referenced
	by id.
*/
void godot::NodeChromaSDK::CopyNonZeroAllKeysOffset(int sourceAnimationId, int targetAnimationId, int frameId, int offset)
{
	ChromaAnimationAPI::CopyNonZeroAllKeysOffset(sourceAnimationId, targetAnimationId, frameId, offset);
}

/*
	Copy nonzero colors from the source animation to the target animation from
	the source frame to the target offset frame. Source and target are referenced
	by name.
*/
void godot::NodeChromaSDK::CopyNonZeroAllKeysOffsetName(String sourceAnimation, String targetAnimation, int frameId, int offset)
{
	ChromaAnimationAPI::CopyNonZeroAllKeysOffsetName(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data(), frameId, offset);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::CopyNonZeroAllKeysOffsetNameD(String sourceAnimation, String targetAnimation, double frameId, double offset)
{
	return ChromaAnimationAPI::CopyNonZeroAllKeysOffsetNameD(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data(), frameId, offset);
}

/*
	Copy animation key color from the source animation to the target animation
	for the given frame where color is not zero.
*/
void godot::NodeChromaSDK::CopyNonZeroKeyColor(int sourceAnimationId, int targetAnimationId, int frameId, int rzkey)
{
	ChromaAnimationAPI::CopyNonZeroKeyColor(sourceAnimationId, targetAnimationId, frameId, rzkey);
}

/*
	Copy animation key color from the source animation to the target animation
	for the given frame where color is not zero.
*/
void godot::NodeChromaSDK::CopyNonZeroKeyColorName(String sourceAnimation, String targetAnimation, int frameId, int rzkey)
{
	ChromaAnimationAPI::CopyNonZeroKeyColorName(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data(), frameId, rzkey);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::CopyNonZeroKeyColorNameD(String sourceAnimation, String targetAnimation, double frameId, double rzkey)
{
	return ChromaAnimationAPI::CopyNonZeroKeyColorNameD(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data(), frameId, rzkey);
}

/*
	Copy nonzero colors from the source animation to the target animation where
	the target color is nonzero for the specified frame. Source and target
	are referenced by id.
*/
void godot::NodeChromaSDK::CopyNonZeroTargetAllKeys(int sourceAnimationId, int targetAnimationId, int frameId)
{
	ChromaAnimationAPI::CopyNonZeroTargetAllKeys(sourceAnimationId, targetAnimationId, frameId);
}

/*
	Copy nonzero colors from the source animation to the target animation where
	the target color is nonzero for all frames. Source and target are referenced
	by id.
*/
void godot::NodeChromaSDK::CopyNonZeroTargetAllKeysAllFrames(int sourceAnimationId, int targetAnimationId)
{
	ChromaAnimationAPI::CopyNonZeroTargetAllKeysAllFrames(sourceAnimationId, targetAnimationId);
}

/*
	Copy nonzero colors from the source animation to the target animation where
	the target color is nonzero for all frames. Source and target are referenced
	by name.
*/
void godot::NodeChromaSDK::CopyNonZeroTargetAllKeysAllFramesName(String sourceAnimation, String targetAnimation)
{
	ChromaAnimationAPI::CopyNonZeroTargetAllKeysAllFramesName(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data());
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::CopyNonZeroTargetAllKeysAllFramesNameD(String sourceAnimation, String targetAnimation)
{
	return ChromaAnimationAPI::CopyNonZeroTargetAllKeysAllFramesNameD(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data());
}

/*
	Copy nonzero colors from the source animation to the target animation where
	the target color is nonzero for all frames. Source and target are referenced
	by name.
*/
void godot::NodeChromaSDK::CopyNonZeroTargetAllKeysAllFramesOffset(int sourceAnimationId, int targetAnimationId, int offset)
{
	ChromaAnimationAPI::CopyNonZeroTargetAllKeysAllFramesOffset(sourceAnimationId, targetAnimationId, offset);
}

/*
	Copy nonzero colors from the source animation to the target animation where
	the target color is nonzero for all frames starting at the target offset
	for the length of the source animation. Source and target animations are
	referenced by name.
*/
void godot::NodeChromaSDK::CopyNonZeroTargetAllKeysAllFramesOffsetName(String sourceAnimation, String targetAnimation, int offset)
{
	ChromaAnimationAPI::CopyNonZeroTargetAllKeysAllFramesOffsetName(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data(), offset);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::CopyNonZeroTargetAllKeysAllFramesOffsetNameD(String sourceAnimation, String targetAnimation, double offset)
{
	return ChromaAnimationAPI::CopyNonZeroTargetAllKeysAllFramesOffsetNameD(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data(), offset);
}

/*
	Copy nonzero colors from the source animation to the target animation where
	the target color is nonzero for the specified frame. The source and target
	are referenced by name.
*/
void godot::NodeChromaSDK::CopyNonZeroTargetAllKeysName(String sourceAnimation, String targetAnimation, int frameId)
{
	ChromaAnimationAPI::CopyNonZeroTargetAllKeysName(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data(), frameId);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::CopyNonZeroTargetAllKeysNameD(String sourceAnimation, String targetAnimation, double frameId)
{
	return ChromaAnimationAPI::CopyNonZeroTargetAllKeysNameD(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data(), frameId);
}

/*
	Copy nonzero colors from the source animation to the target animation where
	the target color is nonzero for the specified source frame and target offset
	frame. The source and target are referenced by id.
*/
void godot::NodeChromaSDK::CopyNonZeroTargetAllKeysOffset(int sourceAnimationId, int targetAnimationId, int frameId, int offset)
{
	ChromaAnimationAPI::CopyNonZeroTargetAllKeysOffset(sourceAnimationId, targetAnimationId, frameId, offset);
}

/*
	Copy nonzero colors from the source animation to the target animation where
	the target color is nonzero for the specified source frame and target offset
	frame. The source and target are referenced by name.
*/
void godot::NodeChromaSDK::CopyNonZeroTargetAllKeysOffsetName(String sourceAnimation, String targetAnimation, int frameId, int offset)
{
	ChromaAnimationAPI::CopyNonZeroTargetAllKeysOffsetName(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data(), frameId, offset);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::CopyNonZeroTargetAllKeysOffsetNameD(String sourceAnimation, String targetAnimation, double frameId, double offset)
{
	return ChromaAnimationAPI::CopyNonZeroTargetAllKeysOffsetNameD(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data(), frameId, offset);
}

/*
	Copy nonzero colors from the source animation to the target animation where
	the target color is zero for all frames. Source and target are referenced
	by id.
*/
void godot::NodeChromaSDK::CopyNonZeroTargetZeroAllKeysAllFrames(int sourceAnimationId, int targetAnimationId)
{
	ChromaAnimationAPI::CopyNonZeroTargetZeroAllKeysAllFrames(sourceAnimationId, targetAnimationId);
}

/*
	Copy nonzero colors from the source animation to the target animation where
	the target color is zero for all frames. Source and target are referenced
	by name.
*/
void godot::NodeChromaSDK::CopyNonZeroTargetZeroAllKeysAllFramesName(String sourceAnimation, String targetAnimation)
{
	ChromaAnimationAPI::CopyNonZeroTargetZeroAllKeysAllFramesName(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data());
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::CopyNonZeroTargetZeroAllKeysAllFramesNameD(String sourceAnimation, String targetAnimation)
{
	return ChromaAnimationAPI::CopyNonZeroTargetZeroAllKeysAllFramesNameD(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data());
}

/*
	Copy red channel to other channels for all frames. Intensity range is 0.0
	to 1.0. Reference the animation by id.
*/
void godot::NodeChromaSDK::CopyRedChannelAllFrames(int animationId, float greenIntensity, float blueIntensity)
{
	ChromaAnimationAPI::CopyRedChannelAllFrames(animationId, greenIntensity, blueIntensity);
}

/*
	Copy green channel to other channels for all frames. Intensity range is
	0.0 to 1.0. Reference the animation by name.
*/
void godot::NodeChromaSDK::CopyRedChannelAllFramesName(String path, float greenIntensity, float blueIntensity)
{
	ChromaAnimationAPI::CopyRedChannelAllFramesName(path.utf8().get_data(), greenIntensity, blueIntensity);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::CopyRedChannelAllFramesNameD(String path, double greenIntensity, double blueIntensity)
{
	return ChromaAnimationAPI::CopyRedChannelAllFramesNameD(path.utf8().get_data(), greenIntensity, blueIntensity);
}

/*
	Copy zero colors from source animation to target animation for the frame.
	Source and target are referenced by id.
*/
void godot::NodeChromaSDK::CopyZeroAllKeys(int sourceAnimationId, int targetAnimationId, int frameId)
{
	ChromaAnimationAPI::CopyZeroAllKeys(sourceAnimationId, targetAnimationId, frameId);
}

/*
	Copy zero colors from source animation to target animation for all frames.
	Source and target are referenced by id.
*/
void godot::NodeChromaSDK::CopyZeroAllKeysAllFrames(int sourceAnimationId, int targetAnimationId)
{
	ChromaAnimationAPI::CopyZeroAllKeysAllFrames(sourceAnimationId, targetAnimationId);
}

/*
	Copy zero colors from source animation to target animation for all frames.
	Source and target are referenced by name.
*/
void godot::NodeChromaSDK::CopyZeroAllKeysAllFramesName(String sourceAnimation, String targetAnimation)
{
	ChromaAnimationAPI::CopyZeroAllKeysAllFramesName(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data());
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::CopyZeroAllKeysAllFramesNameD(String sourceAnimation, String targetAnimation)
{
	return ChromaAnimationAPI::CopyZeroAllKeysAllFramesNameD(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data());
}

/*
	Copy zero colors from source animation to target animation for all frames
	starting at the target offset for the length of the source animation. Source
	and target are referenced by id.
*/
void godot::NodeChromaSDK::CopyZeroAllKeysAllFramesOffset(int sourceAnimationId, int targetAnimationId, int offset)
{
	ChromaAnimationAPI::CopyZeroAllKeysAllFramesOffset(sourceAnimationId, targetAnimationId, offset);
}

/*
	Copy zero colors from source animation to target animation for all frames
	starting at the target offset for the length of the source animation. Source
	and target are referenced by name.
*/
void godot::NodeChromaSDK::CopyZeroAllKeysAllFramesOffsetName(String sourceAnimation, String targetAnimation, int offset)
{
	ChromaAnimationAPI::CopyZeroAllKeysAllFramesOffsetName(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data(), offset);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::CopyZeroAllKeysAllFramesOffsetNameD(String sourceAnimation, String targetAnimation, double offset)
{
	return ChromaAnimationAPI::CopyZeroAllKeysAllFramesOffsetNameD(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data(), offset);
}

/*
	Copy zero colors from source animation to target animation for the frame.
	Source and target are referenced by name.
*/
void godot::NodeChromaSDK::CopyZeroAllKeysName(String sourceAnimation, String targetAnimation, int frameId)
{
	ChromaAnimationAPI::CopyZeroAllKeysName(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data(), frameId);
}

/*
	Copy zero colors from source animation to target animation for the frame
	id starting at the target offset for the length of the source animation.
	Source and target are referenced by id.
*/
void godot::NodeChromaSDK::CopyZeroAllKeysOffset(int sourceAnimationId, int targetAnimationId, int frameId, int offset)
{
	ChromaAnimationAPI::CopyZeroAllKeysOffset(sourceAnimationId, targetAnimationId, frameId, offset);
}

/*
	Copy zero colors from source animation to target animation for the frame
	id starting at the target offset for the length of the source animation.
	Source and target are referenced by name.
*/
void godot::NodeChromaSDK::CopyZeroAllKeysOffsetName(String sourceAnimation, String targetAnimation, int frameId, int offset)
{
	ChromaAnimationAPI::CopyZeroAllKeysOffsetName(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data(), frameId, offset);
}

/*
	Copy zero key color from source animation to target animation for the specified
	frame. Source and target are referenced by id.
*/
void godot::NodeChromaSDK::CopyZeroKeyColor(int sourceAnimationId, int targetAnimationId, int frameId, int rzkey)
{
	ChromaAnimationAPI::CopyZeroKeyColor(sourceAnimationId, targetAnimationId, frameId, rzkey);
}

/*
	Copy zero key color from source animation to target animation for the specified
	frame. Source and target are referenced by name.
*/
void godot::NodeChromaSDK::CopyZeroKeyColorName(String sourceAnimation, String targetAnimation, int frameId, int rzkey)
{
	ChromaAnimationAPI::CopyZeroKeyColorName(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data(), frameId, rzkey);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::CopyZeroKeyColorNameD(String sourceAnimation, String targetAnimation, double frameId, double rzkey)
{
	return ChromaAnimationAPI::CopyZeroKeyColorNameD(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data(), frameId, rzkey);
}

/*
	Copy nonzero color from source animation to target animation where target
	is zero for the frame. Source and target are referenced by id.
*/
void godot::NodeChromaSDK::CopyZeroTargetAllKeys(int sourceAnimationId, int targetAnimationId, int frameId)
{
	ChromaAnimationAPI::CopyZeroTargetAllKeys(sourceAnimationId, targetAnimationId, frameId);
}

/*
	Copy nonzero color from source animation to target animation where target
	is zero for all frames. Source and target are referenced by id.
*/
void godot::NodeChromaSDK::CopyZeroTargetAllKeysAllFrames(int sourceAnimationId, int targetAnimationId)
{
	ChromaAnimationAPI::CopyZeroTargetAllKeysAllFrames(sourceAnimationId, targetAnimationId);
}

/*
	Copy nonzero color from source animation to target animation where target
	is zero for all frames. Source and target are referenced by name.
*/
void godot::NodeChromaSDK::CopyZeroTargetAllKeysAllFramesName(String sourceAnimation, String targetAnimation)
{
	ChromaAnimationAPI::CopyZeroTargetAllKeysAllFramesName(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data());
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::CopyZeroTargetAllKeysAllFramesNameD(String sourceAnimation, String targetAnimation)
{
	return ChromaAnimationAPI::CopyZeroTargetAllKeysAllFramesNameD(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data());
}

/*
	Copy nonzero color from source animation to target animation where target
	is zero for the frame. Source and target are referenced by name.
*/
void godot::NodeChromaSDK::CopyZeroTargetAllKeysName(String sourceAnimation, String targetAnimation, int frameId)
{
	ChromaAnimationAPI::CopyZeroTargetAllKeysName(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data(), frameId);
}

/*
	Direct access to low level API.
*/
RZRESULT godot::NodeChromaSDK::CoreCreateChromaLinkEffect(ChromaSDK::ChromaLink::EFFECT_TYPE Effect, PRZPARAM pParam, RZEFFECTID* pEffectId)
{
	return ChromaAnimationAPI::CoreCreateChromaLinkEffect(Effect, pParam, pEffectId);
}

/*
	Direct access to low level API.
*/
RZRESULT godot::NodeChromaSDK::CoreCreateEffect(RZDEVICEID DeviceId, ChromaSDK::EFFECT_TYPE Effect, PRZPARAM pParam, RZEFFECTID* pEffectId)
{
	return ChromaAnimationAPI::CoreCreateEffect(DeviceId, Effect, pParam, pEffectId);
}

/*
	Direct access to low level API.
*/
RZRESULT godot::NodeChromaSDK::CoreCreateHeadsetEffect(ChromaSDK::Headset::EFFECT_TYPE Effect, PRZPARAM pParam, RZEFFECTID* pEffectId)
{
	return ChromaAnimationAPI::CoreCreateHeadsetEffect(Effect, pParam, pEffectId);
}

/*
	Direct access to low level API.
*/
RZRESULT godot::NodeChromaSDK::CoreCreateKeyboardEffect(ChromaSDK::Keyboard::EFFECT_TYPE Effect, PRZPARAM pParam, RZEFFECTID* pEffectId)
{
	return ChromaAnimationAPI::CoreCreateKeyboardEffect(Effect, pParam, pEffectId);
}

/*
	Direct access to low level API.
*/
RZRESULT godot::NodeChromaSDK::CoreCreateKeypadEffect(ChromaSDK::Keypad::EFFECT_TYPE Effect, PRZPARAM pParam, RZEFFECTID* pEffectId)
{
	return ChromaAnimationAPI::CoreCreateKeypadEffect(Effect, pParam, pEffectId);
}

/*
	Direct access to low level API.
*/
RZRESULT godot::NodeChromaSDK::CoreCreateMouseEffect(ChromaSDK::Mouse::EFFECT_TYPE Effect, PRZPARAM pParam, RZEFFECTID* pEffectId)
{
	return ChromaAnimationAPI::CoreCreateMouseEffect(Effect, pParam, pEffectId);
}

/*
	Direct access to low level API.
*/
RZRESULT godot::NodeChromaSDK::CoreCreateMousepadEffect(ChromaSDK::Mousepad::EFFECT_TYPE Effect, PRZPARAM pParam, RZEFFECTID* pEffectId)
{
	return ChromaAnimationAPI::CoreCreateMousepadEffect(Effect, pParam, pEffectId);
}

/*
	Direct access to low level API.
*/
RZRESULT godot::NodeChromaSDK::CoreDeleteEffect(RZEFFECTID EffectId)
{
	return ChromaAnimationAPI::CoreDeleteEffect(EffectId);
}

/*
	Direct access to low level API.
*/
RZRESULT godot::NodeChromaSDK::CoreInit()
{
	return ChromaAnimationAPI::CoreInit();
}

/*
	Direct access to low level API.
*/
RZRESULT godot::NodeChromaSDK::CoreInitSDK(ChromaSDK::APPINFOTYPE* AppInfo)
{
	return ChromaAnimationAPI::CoreInitSDK(AppInfo);
}

/*
	Direct access to low level API.
*/
RZRESULT godot::NodeChromaSDK::CoreQueryDevice(RZDEVICEID DeviceId, ChromaSDK::DEVICE_INFO_TYPE& DeviceInfo)
{
	return ChromaAnimationAPI::CoreQueryDevice(DeviceId, DeviceInfo);
}

/*
	Direct access to low level API.
*/
RZRESULT godot::NodeChromaSDK::CoreSetEffect(RZEFFECTID EffectId)
{
	return ChromaAnimationAPI::CoreSetEffect(EffectId);
}

/*
	Begin broadcasting Chroma RGB data using the stored stream key as the endpoint.
	Intended for Cloud Gaming Platforms, restore the streaming key when the
	game instance is launched to continue streaming. streamId is a null terminated
	string streamKey is a null terminated string StreamGetStatus() should return
	the READY status to use this method.
*/
bool godot::NodeChromaSDK::CoreStreamBroadcast(String streamId, String streamKey)
{
	return ChromaAnimationAPI::CoreStreamBroadcast(streamId.utf8().get_data(), streamKey.utf8().get_data());
}

/*
	End broadcasting Chroma RGB data. StreamGetStatus() should return the BROADCASTING
	status to use this method.
*/
bool godot::NodeChromaSDK::CoreStreamBroadcastEnd()
{
	return ChromaAnimationAPI::CoreStreamBroadcastEnd();
}

/*
	shortcode: Pass the address of a preallocated character buffer to get the
	streaming auth code. The buffer should have a minimum length of 6. length:
	Length will return as zero if the streaming auth code could not be obtained.
	If length is greater than zero, it will be the length of the returned streaming
	auth code. Once you have the shortcode, it should be shown to the user
	so they can associate the stream with their Razer ID StreamGetStatus()
	should return the READY status before invoking this method. platform: is
	the null terminated string that identifies the source of the stream: {
	GEFORCE_NOW, LUNA, STADIA, GAME_PASS } title: is the null terminated string
	that identifies the application or game.
*/
void godot::NodeChromaSDK::CoreStreamGetAuthShortcode(char* shortcode, unsigned char* length, const wchar_t* platform, const wchar_t* title)
{
	ChromaAnimationAPI::CoreStreamGetAuthShortcode(shortcode, length, platform, title);
}

/*
	focus: Pass the address of a preallocated character buffer to get the stream
	focus. The buffer should have a length of 48 length: Length will return
	as zero if the stream focus could not be obtained. If length is greater
	than zero, it will be the length of the returned stream focus.
*/
bool godot::NodeChromaSDK::CoreStreamGetFocus(char* focus, unsigned char* length)
{
	return ChromaAnimationAPI::CoreStreamGetFocus(focus, length);
}

/*
	Intended for Cloud Gaming Platforms, store the stream id to persist in user
	preferences to continue streaming if the game is suspended or closed. shortcode:
	The shortcode is a null terminated string. Use the shortcode that authorized
	the stream to obtain the stream id. streamId should be a preallocated buffer
	to get the stream key. The buffer should have a length of 48. length: Length
	will return zero if the key could not be obtained. If the length is greater
	than zero, it will be the length of the returned streaming id. Retrieve
	the stream id after authorizing the shortcode. The authorization window
	will expire in 5 minutes. Be sure to save the stream key before the window
	expires. StreamGetStatus() should return the READY status to use this method.
*/
void godot::NodeChromaSDK::CoreStreamGetId(String shortcode, char* streamId, unsigned char* length)
{
	ChromaAnimationAPI::CoreStreamGetId(shortcode.utf8().get_data(), streamId, length);
}

/*
	Intended for Cloud Gaming Platforms, store the streaming key to persist
	in user preferences to continue streaming if the game is suspended or closed.
	shortcode: The shortcode is a null terminated string. Use the shortcode
	that authorized the stream to obtain the stream key. If the status is in
	the BROADCASTING or WATCHING state, passing a NULL shortcode will return
	the active streamId. streamKey should be a preallocated buffer to get the
	stream key. The buffer should have a length of 48. length: Length will
	return zero if the key could not be obtained. If the length is greater
	than zero, it will be the length of the returned streaming key. Retrieve
	the stream key after authorizing the shortcode. The authorization window
	will expire in 5 minutes. Be sure to save the stream key before the window
	expires. StreamGetStatus() should return the READY status to use this method.
*/
void godot::NodeChromaSDK::CoreStreamGetKey(String shortcode, char* streamKey, unsigned char* length)
{
	ChromaAnimationAPI::CoreStreamGetKey(shortcode.utf8().get_data(), streamKey, length);
}

/*
	Returns StreamStatus, the current status of the service
*/
int godot::NodeChromaSDK::CoreStreamGetStatus()
{
	return static_cast<int>(ChromaAnimationAPI::CoreStreamGetStatus());
}

/*
	Convert StreamStatusType to a printable string
*/
String godot::NodeChromaSDK::CoreStreamGetStatusString(int status)
{
	return ChromaAnimationAPI::CoreStreamGetStatusString(static_cast<ChromaSDK::Stream::StreamStatusType>(status));
}

/*
	This prevents the stream id and stream key from being obtained through the
	shortcode. This closes the auth window. shortcode is a null terminated
	string. StreamGetStatus() should return the READY status to use this method.
	returns success when shortcode has been released
*/
bool godot::NodeChromaSDK::CoreStreamReleaseShortcode(String shortcode)
{
	return ChromaAnimationAPI::CoreStreamReleaseShortcode(shortcode.utf8().get_data());
}

/*
	The focus is a null terminated string. Set the focus identifer for the application
	designated to automatically change the streaming state. Returns true on
	success.
*/
bool godot::NodeChromaSDK::CoreStreamSetFocus(String focus)
{
	return ChromaAnimationAPI::CoreStreamSetFocus(focus.utf8().get_data());
}

/*
	Returns true if the Chroma streaming is supported. If false is returned,
	avoid calling stream methods.
*/
bool godot::NodeChromaSDK::CoreStreamSupportsStreaming()
{
	return ChromaAnimationAPI::CoreStreamSupportsStreaming();
}

/*
	Begin watching the Chroma RGB data using streamID parameter. streamId is
	a null terminated string. StreamGetStatus() should return the READY status
	to use this method.
*/
bool godot::NodeChromaSDK::CoreStreamWatch(String streamId, unsigned long long timestamp)
{
	return ChromaAnimationAPI::CoreStreamWatch(streamId.utf8().get_data(), timestamp);
}

/*
	End watching Chroma RGB data stream. StreamGetStatus() should return the
	WATCHING status to use this method.
*/
bool godot::NodeChromaSDK::CoreStreamWatchEnd()
{
	return ChromaAnimationAPI::CoreStreamWatchEnd();
}

/*
	Direct access to low level API.
*/
RZRESULT godot::NodeChromaSDK::CoreUnInit()
{
	return ChromaAnimationAPI::CoreUnInit();
}

/*
	Creates a `Chroma` animation at the given path. The `deviceType` parameter
	uses `EChromaSDKDeviceTypeEnum` as an integer. The `device` parameter uses
	`EChromaSDKDevice1DEnum` or `EChromaSDKDevice2DEnum` as an integer, respective
	to the `deviceType`. Returns the animation id upon success. Returns negative
	one upon failure. Saves a `Chroma` animation file with the `.chroma` extension
	at the given path. Returns the animation id upon success. Returns negative
	one upon failure.
*/
int godot::NodeChromaSDK::CreateAnimation(String path, int deviceType, int device)
{
	return ChromaAnimationAPI::CreateAnimation(path.utf8().get_data(), deviceType, device);
}

/*
	Creates a `Chroma` animation in memory without creating a file. The `deviceType`
	parameter uses `EChromaSDKDeviceTypeEnum` as an integer. The `device` parameter
	uses `EChromaSDKDevice1DEnum` or `EChromaSDKDevice2DEnum` as an integer,
	respective to the `deviceType`. Returns the animation id upon success.
	Returns negative one upon failure. Returns the animation id upon success.
	Returns negative one upon failure.
*/
int godot::NodeChromaSDK::CreateAnimationInMemory(int deviceType, int device)
{
	return ChromaAnimationAPI::CreateAnimationInMemory(deviceType, device);
}

/*
	Create a device specific effect.
*/
RZRESULT godot::NodeChromaSDK::CreateEffect(RZDEVICEID deviceId, ChromaSDK::EFFECT_TYPE effect, int* colors, int size, ChromaSDK::FChromaSDKGuid* effectId)
{
	return ChromaAnimationAPI::CreateEffect(deviceId, effect, colors, size, effectId);
}

/*
	Delete an effect given the effect id.
*/
RZRESULT godot::NodeChromaSDK::DeleteEffect(const ChromaSDK::FChromaSDKGuid& effectId)
{
	return ChromaAnimationAPI::DeleteEffect(effectId);
}

/*
	Duplicate the first animation frame so that the animation length matches
	the frame count. Animation is referenced by id.
*/
void godot::NodeChromaSDK::DuplicateFirstFrame(int animationId, int frameCount)
{
	ChromaAnimationAPI::DuplicateFirstFrame(animationId, frameCount);
}

/*
	Duplicate the first animation frame so that the animation length matches
	the frame count. Animation is referenced by name.
*/
void godot::NodeChromaSDK::DuplicateFirstFrameName(String path, int frameCount)
{
	ChromaAnimationAPI::DuplicateFirstFrameName(path.utf8().get_data(), frameCount);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::DuplicateFirstFrameNameD(String path, double frameCount)
{
	return ChromaAnimationAPI::DuplicateFirstFrameNameD(path.utf8().get_data(), frameCount);
}

/*
	Duplicate all the frames of the animation to double the animation length.
	Frame 1 becomes frame 1 and 2. Frame 2 becomes frame 3 and 4. And so on.
	The animation is referenced by id.
*/
void godot::NodeChromaSDK::DuplicateFrames(int animationId)
{
	ChromaAnimationAPI::DuplicateFrames(animationId);
}

/*
	Duplicate all the frames of the animation to double the animation length.
	Frame 1 becomes frame 1 and 2. Frame 2 becomes frame 3 and 4. And so on.
	The animation is referenced by name.
*/
void godot::NodeChromaSDK::DuplicateFramesName(String path)
{
	ChromaAnimationAPI::DuplicateFramesName(path.utf8().get_data());
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::DuplicateFramesNameD(String path)
{
	return ChromaAnimationAPI::DuplicateFramesNameD(path.utf8().get_data());
}

/*
	Duplicate all the animation frames in reverse so that the animation plays
	forwards and backwards. Animation is referenced by id.
*/
void godot::NodeChromaSDK::DuplicateMirrorFrames(int animationId)
{
	ChromaAnimationAPI::DuplicateMirrorFrames(animationId);
}

/*
	Duplicate all the animation frames in reverse so that the animation plays
	forwards and backwards. Animation is referenced by name.
*/
void godot::NodeChromaSDK::DuplicateMirrorFramesName(String path)
{
	ChromaAnimationAPI::DuplicateMirrorFramesName(path.utf8().get_data());
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::DuplicateMirrorFramesNameD(String path)
{
	return ChromaAnimationAPI::DuplicateMirrorFramesNameD(path.utf8().get_data());
}

/*
	Fade the animation to black starting at the fade frame index to the end
	of the animation. Animation is referenced by id.
*/
void godot::NodeChromaSDK::FadeEndFrames(int animationId, int fade)
{
	ChromaAnimationAPI::FadeEndFrames(animationId, fade);
}

/*
	Fade the animation to black starting at the fade frame index to the end
	of the animation. Animation is referenced by name.
*/
void godot::NodeChromaSDK::FadeEndFramesName(String path, int fade)
{
	ChromaAnimationAPI::FadeEndFramesName(path.utf8().get_data(), fade);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::FadeEndFramesNameD(String path, double fade)
{
	return ChromaAnimationAPI::FadeEndFramesNameD(path.utf8().get_data(), fade);
}

/*
	Fade the animation from black to full color starting at 0 to the fade frame
	index. Animation is referenced by id.
*/
void godot::NodeChromaSDK::FadeStartFrames(int animationId, int fade)
{
	ChromaAnimationAPI::FadeStartFrames(animationId, fade);
}

/*
	Fade the animation from black to full color starting at 0 to the fade frame
	index. Animation is referenced by name.
*/
void godot::NodeChromaSDK::FadeStartFramesName(String path, int fade)
{
	ChromaAnimationAPI::FadeStartFramesName(path.utf8().get_data(), fade);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::FadeStartFramesNameD(String path, double fade)
{
	return ChromaAnimationAPI::FadeStartFramesNameD(path.utf8().get_data(), fade);
}

/*
	Set the RGB value for all colors in the specified frame. Animation is referenced
	by id.
*/
void godot::NodeChromaSDK::FillColor(int animationId, int frameId, int color)
{
	ChromaAnimationAPI::FillColor(animationId, frameId, color);
}

/*
	Set the RGB value for all colors for all frames. Animation is referenced
	by id.
*/
void godot::NodeChromaSDK::FillColorAllFrames(int animationId, int color)
{
	ChromaAnimationAPI::FillColorAllFrames(animationId, color);
}

/*
	Set the RGB value for all colors for all frames. Animation is referenced
	by name.
*/
void godot::NodeChromaSDK::FillColorAllFramesName(String path, int color)
{
	ChromaAnimationAPI::FillColorAllFramesName(path.utf8().get_data(), color);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::FillColorAllFramesNameD(String path, double color)
{
	return ChromaAnimationAPI::FillColorAllFramesNameD(path.utf8().get_data(), color);
}

/*
	Set the RGB value for all colors for all frames. Use the range of 0 to 255
	for red, green, and blue parameters. Animation is referenced by id.
*/
void godot::NodeChromaSDK::FillColorAllFramesRGB(int animationId, int red, int green, int blue)
{
	ChromaAnimationAPI::FillColorAllFramesRGB(animationId, red, green, blue);
}

/*
	Set the RGB value for all colors for all frames. Use the range of 0 to 255
	for red, green, and blue parameters. Animation is referenced by name.
*/
void godot::NodeChromaSDK::FillColorAllFramesRGBName(String path, int red, int green, int blue)
{
	ChromaAnimationAPI::FillColorAllFramesRGBName(path.utf8().get_data(), red, green, blue);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::FillColorAllFramesRGBNameD(String path, double red, double green, double blue)
{
	return ChromaAnimationAPI::FillColorAllFramesRGBNameD(path.utf8().get_data(), red, green, blue);
}

/*
	Set the RGB value for all colors in the specified frame. Animation is referenced
	by name.
*/
void godot::NodeChromaSDK::FillColorName(String path, int frameId, int color)
{
	ChromaAnimationAPI::FillColorName(path.utf8().get_data(), frameId, color);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::FillColorNameD(String path, double frameId, double color)
{
	return ChromaAnimationAPI::FillColorNameD(path.utf8().get_data(), frameId, color);
}

/*
	Set the RGB value for all colors in the specified frame. Animation is referenced
	by id.
*/
void godot::NodeChromaSDK::FillColorRGB(int animationId, int frameId, int red, int green, int blue)
{
	ChromaAnimationAPI::FillColorRGB(animationId, frameId, red, green, blue);
}

/*
	Set the RGB value for all colors in the specified frame. Animation is referenced
	by name.
*/
void godot::NodeChromaSDK::FillColorRGBName(String path, int frameId, int red, int green, int blue)
{
	ChromaAnimationAPI::FillColorRGBName(path.utf8().get_data(), frameId, red, green, blue);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::FillColorRGBNameD(String path, double frameId, double red, double green, double blue)
{
	return ChromaAnimationAPI::FillColorRGBNameD(path.utf8().get_data(), frameId, red, green, blue);
}

/*
	This method will only update colors in the animation that are not already
	set to black. Set the RGB value for a subset of colors in the specified
	frame. Animation is referenced by id.
*/
void godot::NodeChromaSDK::FillNonZeroColor(int animationId, int frameId, int color)
{
	ChromaAnimationAPI::FillNonZeroColor(animationId, frameId, color);
}

/*
	This method will only update colors in the animation that are not already
	set to black. Set the RGB value for a subset of colors for all frames.
	Animation is referenced by id.
*/
void godot::NodeChromaSDK::FillNonZeroColorAllFrames(int animationId, int color)
{
	ChromaAnimationAPI::FillNonZeroColorAllFrames(animationId, color);
}

/*
	This method will only update colors in the animation that are not already
	set to black. Set the RGB value for a subset of colors for all frames.
	Animation is referenced by name.
*/
void godot::NodeChromaSDK::FillNonZeroColorAllFramesName(String path, int color)
{
	ChromaAnimationAPI::FillNonZeroColorAllFramesName(path.utf8().get_data(), color);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::FillNonZeroColorAllFramesNameD(String path, double color)
{
	return ChromaAnimationAPI::FillNonZeroColorAllFramesNameD(path.utf8().get_data(), color);
}

/*
	This method will only update colors in the animation that are not already
	set to black. Set the RGB value for a subset of colors for all frames.
	Use the range of 0 to 255 for red, green, and blue parameters. Animation
	is referenced by id.
*/
void godot::NodeChromaSDK::FillNonZeroColorAllFramesRGB(int animationId, int red, int green, int blue)
{
	ChromaAnimationAPI::FillNonZeroColorAllFramesRGB(animationId, red, green, blue);
}

/*
	This method will only update colors in the animation that are not already
	set to black. Set the RGB value for a subset of colors for all frames.
	Use the range of 0 to 255 for red, green, and blue parameters. Animation
	is referenced by name.
*/
void godot::NodeChromaSDK::FillNonZeroColorAllFramesRGBName(String path, int red, int green, int blue)
{
	ChromaAnimationAPI::FillNonZeroColorAllFramesRGBName(path.utf8().get_data(), red, green, blue);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::FillNonZeroColorAllFramesRGBNameD(String path, double red, double green, double blue)
{
	return ChromaAnimationAPI::FillNonZeroColorAllFramesRGBNameD(path.utf8().get_data(), red, green, blue);
}

/*
	This method will only update colors in the animation that are not already
	set to black. Set the RGB value for a subset of colors in the specified
	frame. Animation is referenced by name.
*/
void godot::NodeChromaSDK::FillNonZeroColorName(String path, int frameId, int color)
{
	ChromaAnimationAPI::FillNonZeroColorName(path.utf8().get_data(), frameId, color);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::FillNonZeroColorNameD(String path, double frameId, double color)
{
	return ChromaAnimationAPI::FillNonZeroColorNameD(path.utf8().get_data(), frameId, color);
}

/*
	This method will only update colors in the animation that are not already
	set to black. Set the RGB value for a subset of colors in the specified
	frame. Use the range of 0 to 255 for red, green, and blue parameters. Animation
	is referenced by id.
*/
void godot::NodeChromaSDK::FillNonZeroColorRGB(int animationId, int frameId, int red, int green, int blue)
{
	ChromaAnimationAPI::FillNonZeroColorRGB(animationId, frameId, red, green, blue);
}

/*
	This method will only update colors in the animation that are not already
	set to black. Set the RGB value for a subset of colors in the specified
	frame. Use the range of 0 to 255 for red, green, and blue parameters. Animation
	is referenced by name.
*/
void godot::NodeChromaSDK::FillNonZeroColorRGBName(String path, int frameId, int red, int green, int blue)
{
	ChromaAnimationAPI::FillNonZeroColorRGBName(path.utf8().get_data(), frameId, red, green, blue);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::FillNonZeroColorRGBNameD(String path, double frameId, double red, double green, double blue)
{
	return ChromaAnimationAPI::FillNonZeroColorRGBNameD(path.utf8().get_data(), frameId, red, green, blue);
}

/*
	Fill the frame with random RGB values for the given frame. Animation is
	referenced by id.
*/
void godot::NodeChromaSDK::FillRandomColors(int animationId, int frameId)
{
	ChromaAnimationAPI::FillRandomColors(animationId, frameId);
}

/*
	Fill the frame with random RGB values for all frames. Animation is referenced
	by id.
*/
void godot::NodeChromaSDK::FillRandomColorsAllFrames(int animationId)
{
	ChromaAnimationAPI::FillRandomColorsAllFrames(animationId);
}

/*
	Fill the frame with random RGB values for all frames. Animation is referenced
	by name.
*/
void godot::NodeChromaSDK::FillRandomColorsAllFramesName(String path)
{
	ChromaAnimationAPI::FillRandomColorsAllFramesName(path.utf8().get_data());
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::FillRandomColorsAllFramesNameD(String path)
{
	return ChromaAnimationAPI::FillRandomColorsAllFramesNameD(path.utf8().get_data());
}

/*
	Fill the frame with random black and white values for the specified frame.
	Animation is referenced by id.
*/
void godot::NodeChromaSDK::FillRandomColorsBlackAndWhite(int animationId, int frameId)
{
	ChromaAnimationAPI::FillRandomColorsBlackAndWhite(animationId, frameId);
}

/*
	Fill the frame with random black and white values for all frames. Animation
	is referenced by id.
*/
void godot::NodeChromaSDK::FillRandomColorsBlackAndWhiteAllFrames(int animationId)
{
	ChromaAnimationAPI::FillRandomColorsBlackAndWhiteAllFrames(animationId);
}

/*
	Fill the frame with random black and white values for all frames. Animation
	is referenced by name.
*/
void godot::NodeChromaSDK::FillRandomColorsBlackAndWhiteAllFramesName(String path)
{
	ChromaAnimationAPI::FillRandomColorsBlackAndWhiteAllFramesName(path.utf8().get_data());
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::FillRandomColorsBlackAndWhiteAllFramesNameD(String path)
{
	return ChromaAnimationAPI::FillRandomColorsBlackAndWhiteAllFramesNameD(path.utf8().get_data());
}

/*
	Fill the frame with random black and white values for the specified frame.
	Animation is referenced by name.
*/
void godot::NodeChromaSDK::FillRandomColorsBlackAndWhiteName(String path, int frameId)
{
	ChromaAnimationAPI::FillRandomColorsBlackAndWhiteName(path.utf8().get_data(), frameId);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::FillRandomColorsBlackAndWhiteNameD(String path, double frameId)
{
	return ChromaAnimationAPI::FillRandomColorsBlackAndWhiteNameD(path.utf8().get_data(), frameId);
}

/*
	Fill the frame with random RGB values for the given frame. Animation is
	referenced by name.
*/
void godot::NodeChromaSDK::FillRandomColorsName(String path, int frameId)
{
	ChromaAnimationAPI::FillRandomColorsName(path.utf8().get_data(), frameId);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::FillRandomColorsNameD(String path, double frameId)
{
	return ChromaAnimationAPI::FillRandomColorsNameD(path.utf8().get_data(), frameId);
}

/*
	Fill the specified frame with RGB color where the animation color is less
	than the RGB threshold. Animation is referenced by id.
*/
void godot::NodeChromaSDK::FillThresholdColors(int animationId, int frameId, int threshold, int color)
{
	ChromaAnimationAPI::FillThresholdColors(animationId, frameId, threshold, color);
}

/*
	Fill all frames with RGB color where the animation color is less than the
	RGB threshold. Animation is referenced by id.
*/
void godot::NodeChromaSDK::FillThresholdColorsAllFrames(int animationId, int threshold, int color)
{
	ChromaAnimationAPI::FillThresholdColorsAllFrames(animationId, threshold, color);
}

/*
	Fill all frames with RGB color where the animation color is less than the
	RGB threshold. Animation is referenced by name.
*/
void godot::NodeChromaSDK::FillThresholdColorsAllFramesName(String path, int threshold, int color)
{
	ChromaAnimationAPI::FillThresholdColorsAllFramesName(path.utf8().get_data(), threshold, color);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::FillThresholdColorsAllFramesNameD(String path, double threshold, double color)
{
	return ChromaAnimationAPI::FillThresholdColorsAllFramesNameD(path.utf8().get_data(), threshold, color);
}

/*
	Fill all frames with RGB color where the animation color is less than the
	threshold. Animation is referenced by id.
*/
void godot::NodeChromaSDK::FillThresholdColorsAllFramesRGB(int animationId, int threshold, int red, int green, int blue)
{
	ChromaAnimationAPI::FillThresholdColorsAllFramesRGB(animationId, threshold, red, green, blue);
}

/*
	Fill all frames with RGB color where the animation color is less than the
	threshold. Animation is referenced by name.
*/
void godot::NodeChromaSDK::FillThresholdColorsAllFramesRGBName(String path, int threshold, int red, int green, int blue)
{
	ChromaAnimationAPI::FillThresholdColorsAllFramesRGBName(path.utf8().get_data(), threshold, red, green, blue);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::FillThresholdColorsAllFramesRGBNameD(String path, double threshold, double red, double green, double blue)
{
	return ChromaAnimationAPI::FillThresholdColorsAllFramesRGBNameD(path.utf8().get_data(), threshold, red, green, blue);
}

/*
	Fill all frames with the min RGB color where the animation color is less
	than the min threshold AND with the max RGB color where the animation is
	more than the max threshold. Animation is referenced by id.
*/
void godot::NodeChromaSDK::FillThresholdColorsMinMaxAllFramesRGB(int animationId, int minThreshold, int minRed, int minGreen, int minBlue, int maxThreshold, int maxRed, int maxGreen, int maxBlue)
{
	ChromaAnimationAPI::FillThresholdColorsMinMaxAllFramesRGB(animationId, minThreshold, minRed, minGreen, minBlue, maxThreshold, maxRed, maxGreen, maxBlue);
}

/*
	Fill all frames with the min RGB color where the animation color is less
	than the min threshold AND with the max RGB color where the animation is
	more than the max threshold. Animation is referenced by name.
*/
void godot::NodeChromaSDK::FillThresholdColorsMinMaxAllFramesRGBName(String path, int minThreshold, int minRed, int minGreen, int minBlue, int maxThreshold, int maxRed, int maxGreen, int maxBlue)
{
	ChromaAnimationAPI::FillThresholdColorsMinMaxAllFramesRGBName(path.utf8().get_data(), minThreshold, minRed, minGreen, minBlue, maxThreshold, maxRed, maxGreen, maxBlue);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::FillThresholdColorsMinMaxAllFramesRGBNameD(String path, double minThreshold, double minRed, double minGreen, double minBlue, double maxThreshold, double maxRed, double maxGreen, double maxBlue)
{
	return ChromaAnimationAPI::FillThresholdColorsMinMaxAllFramesRGBNameD(path.utf8().get_data(), minThreshold, minRed, minGreen, minBlue, maxThreshold, maxRed, maxGreen, maxBlue);
}

/*
	Fill the specified frame with the min RGB color where the animation color
	is less than the min threshold AND with the max RGB color where the animation
	is more than the max threshold. Animation is referenced by id.
*/
void godot::NodeChromaSDK::FillThresholdColorsMinMaxRGB(int animationId, int frameId, int minThreshold, int minRed, int minGreen, int minBlue, int maxThreshold, int maxRed, int maxGreen, int maxBlue)
{
	ChromaAnimationAPI::FillThresholdColorsMinMaxRGB(animationId, frameId, minThreshold, minRed, minGreen, minBlue, maxThreshold, maxRed, maxGreen, maxBlue);
}

/*
	Fill the specified frame with the min RGB color where the animation color
	is less than the min threshold AND with the max RGB color where the animation
	is more than the max threshold. Animation is referenced by name.
*/
void godot::NodeChromaSDK::FillThresholdColorsMinMaxRGBName(String path, int frameId, int minThreshold, int minRed, int minGreen, int minBlue, int maxThreshold, int maxRed, int maxGreen, int maxBlue)
{
	ChromaAnimationAPI::FillThresholdColorsMinMaxRGBName(path.utf8().get_data(), frameId, minThreshold, minRed, minGreen, minBlue, maxThreshold, maxRed, maxGreen, maxBlue);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::FillThresholdColorsMinMaxRGBNameD(String path, double frameId, double minThreshold, double minRed, double minGreen, double minBlue, double maxThreshold, double maxRed, double maxGreen, double maxBlue)
{
	return ChromaAnimationAPI::FillThresholdColorsMinMaxRGBNameD(path.utf8().get_data(), frameId, minThreshold, minRed, minGreen, minBlue, maxThreshold, maxRed, maxGreen, maxBlue);
}

/*
	Fill the specified frame with RGB color where the animation color is less
	than the RGB threshold. Animation is referenced by name.
*/
void godot::NodeChromaSDK::FillThresholdColorsName(String path, int frameId, int threshold, int color)
{
	ChromaAnimationAPI::FillThresholdColorsName(path.utf8().get_data(), frameId, threshold, color);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::FillThresholdColorsNameD(String path, double frameId, double threshold, double color)
{
	return ChromaAnimationAPI::FillThresholdColorsNameD(path.utf8().get_data(), frameId, threshold, color);
}

/*
	Fill the specified frame with RGB color where the animation color is less
	than the RGB threshold. Animation is referenced by id.
*/
void godot::NodeChromaSDK::FillThresholdColorsRGB(int animationId, int frameId, int threshold, int red, int green, int blue)
{
	ChromaAnimationAPI::FillThresholdColorsRGB(animationId, frameId, threshold, red, green, blue);
}

/*
	Fill the specified frame with RGB color where the animation color is less
	than the RGB threshold. Animation is referenced by name.
*/
void godot::NodeChromaSDK::FillThresholdColorsRGBName(String path, int frameId, int threshold, int red, int green, int blue)
{
	ChromaAnimationAPI::FillThresholdColorsRGBName(path.utf8().get_data(), frameId, threshold, red, green, blue);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::FillThresholdColorsRGBNameD(String path, double frameId, double threshold, double red, double green, double blue)
{
	return ChromaAnimationAPI::FillThresholdColorsRGBNameD(path.utf8().get_data(), frameId, threshold, red, green, blue);
}

/*
	Fill all frames with RGB color where the animation color is less than the
	RGB threshold. Animation is referenced by id.
*/
void godot::NodeChromaSDK::FillThresholdRGBColorsAllFramesRGB(int animationId, int redThreshold, int greenThreshold, int blueThreshold, int red, int green, int blue)
{
	ChromaAnimationAPI::FillThresholdRGBColorsAllFramesRGB(animationId, redThreshold, greenThreshold, blueThreshold, red, green, blue);
}

/*
	Fill all frames with RGB color where the animation color is less than the
	RGB threshold. Animation is referenced by name.
*/
void godot::NodeChromaSDK::FillThresholdRGBColorsAllFramesRGBName(String path, int redThreshold, int greenThreshold, int blueThreshold, int red, int green, int blue)
{
	ChromaAnimationAPI::FillThresholdRGBColorsAllFramesRGBName(path.utf8().get_data(), redThreshold, greenThreshold, blueThreshold, red, green, blue);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::FillThresholdRGBColorsAllFramesRGBNameD(String path, double redThreshold, double greenThreshold, double blueThreshold, double red, double green, double blue)
{
	return ChromaAnimationAPI::FillThresholdRGBColorsAllFramesRGBNameD(path.utf8().get_data(), redThreshold, greenThreshold, blueThreshold, red, green, blue);
}

/*
	Fill the specified frame with RGB color where the animation color is less
	than the RGB threshold. Animation is referenced by id.
*/
void godot::NodeChromaSDK::FillThresholdRGBColorsRGB(int animationId, int frameId, int redThreshold, int greenThreshold, int blueThreshold, int red, int green, int blue)
{
	ChromaAnimationAPI::FillThresholdRGBColorsRGB(animationId, frameId, redThreshold, greenThreshold, blueThreshold, red, green, blue);
}

/*
	Fill the specified frame with RGB color where the animation color is less
	than the RGB threshold. Animation is referenced by name.
*/
void godot::NodeChromaSDK::FillThresholdRGBColorsRGBName(String path, int frameId, int redThreshold, int greenThreshold, int blueThreshold, int red, int green, int blue)
{
	ChromaAnimationAPI::FillThresholdRGBColorsRGBName(path.utf8().get_data(), frameId, redThreshold, greenThreshold, blueThreshold, red, green, blue);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::FillThresholdRGBColorsRGBNameD(String path, double frameId, double redThreshold, double greenThreshold, double blueThreshold, double red, double green, double blue)
{
	return ChromaAnimationAPI::FillThresholdRGBColorsRGBNameD(path.utf8().get_data(), frameId, redThreshold, greenThreshold, blueThreshold, red, green, blue);
}

/*
	Fill the specified frame with RGB color where the animation color is zero.
	Animation is referenced by id.
*/
void godot::NodeChromaSDK::FillZeroColor(int animationId, int frameId, int color)
{
	ChromaAnimationAPI::FillZeroColor(animationId, frameId, color);
}

/*
	Fill all frames with RGB color where the animation color is zero. Animation
	is referenced by id.
*/
void godot::NodeChromaSDK::FillZeroColorAllFrames(int animationId, int color)
{
	ChromaAnimationAPI::FillZeroColorAllFrames(animationId, color);
}

/*
	Fill all frames with RGB color where the animation color is zero. Animation
	is referenced by name.
*/
void godot::NodeChromaSDK::FillZeroColorAllFramesName(String path, int color)
{
	ChromaAnimationAPI::FillZeroColorAllFramesName(path.utf8().get_data(), color);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::FillZeroColorAllFramesNameD(String path, double color)
{
	return ChromaAnimationAPI::FillZeroColorAllFramesNameD(path.utf8().get_data(), color);
}

/*
	Fill all frames with RGB color where the animation color is zero. Animation
	is referenced by id.
*/
void godot::NodeChromaSDK::FillZeroColorAllFramesRGB(int animationId, int red, int green, int blue)
{
	ChromaAnimationAPI::FillZeroColorAllFramesRGB(animationId, red, green, blue);
}

/*
	Fill all frames with RGB color where the animation color is zero. Animation
	is referenced by name.
*/
void godot::NodeChromaSDK::FillZeroColorAllFramesRGBName(String path, int red, int green, int blue)
{
	ChromaAnimationAPI::FillZeroColorAllFramesRGBName(path.utf8().get_data(), red, green, blue);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::FillZeroColorAllFramesRGBNameD(String path, double red, double green, double blue)
{
	return ChromaAnimationAPI::FillZeroColorAllFramesRGBNameD(path.utf8().get_data(), red, green, blue);
}

/*
	Fill the specified frame with RGB color where the animation color is zero.
	Animation is referenced by name.
*/
void godot::NodeChromaSDK::FillZeroColorName(String path, int frameId, int color)
{
	ChromaAnimationAPI::FillZeroColorName(path.utf8().get_data(), frameId, color);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::FillZeroColorNameD(String path, double frameId, double color)
{
	return ChromaAnimationAPI::FillZeroColorNameD(path.utf8().get_data(), frameId, color);
}

/*
	Fill the specified frame with RGB color where the animation color is zero.
	Animation is referenced by id.
*/
void godot::NodeChromaSDK::FillZeroColorRGB(int animationId, int frameId, int red, int green, int blue)
{
	ChromaAnimationAPI::FillZeroColorRGB(animationId, frameId, red, green, blue);
}

/*
	Fill the specified frame with RGB color where the animation color is zero.
	Animation is referenced by name.
*/
void godot::NodeChromaSDK::FillZeroColorRGBName(String path, int frameId, int red, int green, int blue)
{
	ChromaAnimationAPI::FillZeroColorRGBName(path.utf8().get_data(), frameId, red, green, blue);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::FillZeroColorRGBNameD(String path, double frameId, double red, double green, double blue)
{
	return ChromaAnimationAPI::FillZeroColorRGBNameD(path.utf8().get_data(), frameId, red, green, blue);
}

/*
	Get the animation color for a frame given the `1D` `led`. The `led` should
	be greater than or equal to 0 and less than the `MaxLeds`. Animation is
	referenced by id.
*/
int godot::NodeChromaSDK::Get1DColor(int animationId, int frameId, int led)
{
	return ChromaAnimationAPI::Get1DColor(animationId, frameId, led);
}

/*
	Get the animation color for a frame given the `1D` `led`. The `led` should
	be greater than or equal to 0 and less than the `MaxLeds`. Animation is
	referenced by name.
*/
int godot::NodeChromaSDK::Get1DColorName(String path, int frameId, int led)
{
	return ChromaAnimationAPI::Get1DColorName(path.utf8().get_data(), frameId, led);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::Get1DColorNameD(String path, double frameId, double led)
{
	return ChromaAnimationAPI::Get1DColorNameD(path.utf8().get_data(), frameId, led);
}

/*
	Get the animation color for a frame given the `2D` `row` and `column`. The
	`row` should be greater than or equal to 0 and less than the `MaxRow`.
	The `column` should be greater than or equal to 0 and less than the `MaxColumn`.
	Animation is referenced by id.
*/
int godot::NodeChromaSDK::Get2DColor(int animationId, int frameId, int row, int column)
{
	return ChromaAnimationAPI::Get2DColor(animationId, frameId, row, column);
}

/*
	Get the animation color for a frame given the `2D` `row` and `column`. The
	`row` should be greater than or equal to 0 and less than the `MaxRow`.
	The `column` should be greater than or equal to 0 and less than the `MaxColumn`.
	Animation is referenced by name.
*/
int godot::NodeChromaSDK::Get2DColorName(String path, int frameId, int row, int column)
{
	return ChromaAnimationAPI::Get2DColorName(path.utf8().get_data(), frameId, row, column);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::Get2DColorNameD(String path, double frameId, double row, double column)
{
	return ChromaAnimationAPI::Get2DColorNameD(path.utf8().get_data(), frameId, row, column);
}

/*
	Get the animation id for the named animation.
*/
int godot::NodeChromaSDK::GetAnimation(String name)
{
	return ChromaAnimationAPI::GetAnimation(name.utf8().get_data());
}

/*
	`PluginGetAnimationCount` will return the number of loaded animations.
*/
int godot::NodeChromaSDK::GetAnimationCount()
{
	return ChromaAnimationAPI::GetAnimationCount();
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::GetAnimationD(String name)
{
	return ChromaAnimationAPI::GetAnimationD(name.utf8().get_data());
}

/*
	`PluginGetAnimationId` will return the `animationId` given the `index` of
	the loaded animation. The `index` is zero-based and less than the number
	returned by `PluginGetAnimationCount`. Use `PluginGetAnimationName` to
	get the name of the animation.
*/
int godot::NodeChromaSDK::GetAnimationId(int index)
{
	return ChromaAnimationAPI::GetAnimationId(index);
}

/*
	`PluginGetAnimationName` takes an `animationId` and returns the name of
	the animation of the `.chroma` animation file. If a name is not available
	then an empty string will be returned.
*/
String godot::NodeChromaSDK::GetAnimationName(int animationId)
{
	return ChromaAnimationAPI::GetAnimationName(animationId);
}

/*
	Get the current frame of the animation referenced by id.
*/
int godot::NodeChromaSDK::GetCurrentFrame(int animationId)
{
	return ChromaAnimationAPI::GetCurrentFrame(animationId);
}

/*
	Get the current frame of the animation referenced by name.
*/
int godot::NodeChromaSDK::GetCurrentFrameName(String path)
{
	return ChromaAnimationAPI::GetCurrentFrameName(path.utf8().get_data());
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::GetCurrentFrameNameD(String path)
{
	return ChromaAnimationAPI::GetCurrentFrameNameD(path.utf8().get_data());
}

/*
	Returns the `EChromaSDKDevice1DEnum` or `EChromaSDKDevice2DEnum` of a `Chroma`
	animation respective to the `deviceType`, as an integer upon success. Returns
	negative one upon failure.
*/
int godot::NodeChromaSDK::GetDevice(int animationId)
{
	return ChromaAnimationAPI::GetDevice(animationId);
}

/*
	Returns the `EChromaSDKDevice1DEnum` or `EChromaSDKDevice2DEnum` of a `Chroma`
	animation respective to the `deviceType`, as an integer upon success. Returns
	negative one upon failure.
*/
int godot::NodeChromaSDK::GetDeviceName(String path)
{
	return ChromaAnimationAPI::GetDeviceName(path.utf8().get_data());
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::GetDeviceNameD(String path)
{
	return ChromaAnimationAPI::GetDeviceNameD(path.utf8().get_data());
}

/*
	Returns the `EChromaSDKDeviceTypeEnum` of a `Chroma` animation as an integer
	upon success. Returns negative one upon failure.
*/
int godot::NodeChromaSDK::GetDeviceType(int animationId)
{
	return ChromaAnimationAPI::GetDeviceType(animationId);
}

/*
	Returns the `EChromaSDKDeviceTypeEnum` of a `Chroma` animation as an integer
	upon success. Returns negative one upon failure.
*/
int godot::NodeChromaSDK::GetDeviceTypeName(String path)
{
	return ChromaAnimationAPI::GetDeviceTypeName(path.utf8().get_data());
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::GetDeviceTypeNameD(String path)
{
	return ChromaAnimationAPI::GetDeviceTypeNameD(path.utf8().get_data());
}

/*
	Get the frame colors and duration (in seconds) for a `Chroma` animation
	referenced by id. The `color` is expected to be an array of the expected
	dimensions for the `deviceType/device`. The `length` parameter is the size
	of the `color` array. For `EChromaSDKDevice1DEnum` the array size should
	be `MAX LEDS`. For `EChromaSDKDevice2DEnum` the array size should be `MAX
	ROW` times `MAX COLUMN`. Keys are populated only for EChromaSDKDevice2DEnum::DE_Keyboard
	and EChromaSDKDevice2DEnum::DE_KeyboardExtended. Keys will only use the
	EChromaSDKDevice2DEnum::DE_Keyboard `MAX_ROW` times `MAX_COLUMN` keysLength.
	Returns the animation id upon success. Returns negative one upon failure.
*/
int godot::NodeChromaSDK::GetFrame(int animationId, int frameIndex, float* duration, int* colors, int length, int* keys, int keysLength)
{
	return ChromaAnimationAPI::GetFrame(animationId, frameIndex, duration, colors, length, keys, keysLength);
}

/*
	Returns the frame count of a `Chroma` animation upon success. Returns negative
	one upon failure.
*/
int godot::NodeChromaSDK::GetFrameCount(int animationId)
{
	return ChromaAnimationAPI::GetFrameCount(animationId);
}

/*
	Returns the frame count of a `Chroma` animation upon success. Returns negative
	one upon failure.
*/
int godot::NodeChromaSDK::GetFrameCountName(String path)
{
	return ChromaAnimationAPI::GetFrameCountName(path.utf8().get_data());
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::GetFrameCountNameD(String path)
{
	return ChromaAnimationAPI::GetFrameCountNameD(path.utf8().get_data());
}

/*
	Get the frame colors and duration (in seconds) for a `Chroma` animation
	referenced by name. The `color` is expected to be an array of the expected
	dimensions for the `deviceType/device`. The `length` parameter is the size
	of the `color` array. For `EChromaSDKDevice1DEnum` the array size should
	be `MAX LEDS`. For `EChromaSDKDevice2DEnum` the array size should be `MAX
	ROW` times `MAX COLUMN`. Keys are populated only for EChromaSDKDevice2DEnum::DE_Keyboard
	and EChromaSDKDevice2DEnum::DE_KeyboardExtended. Keys will only use the
	EChromaSDKDevice2DEnum::DE_Keyboard `MAX_ROW` times `MAX_COLUMN` keysLength.
	Returns the animation id upon success. Returns negative one upon failure.
*/
int godot::NodeChromaSDK::GetFrameName(String path, int frameIndex, float* duration, int* colors, int length, int* keys, int keysLength)
{
	return ChromaAnimationAPI::GetFrameName(path.utf8().get_data(), frameIndex, duration, colors, length, keys, keysLength);
}

/*
	Get the color of an animation key for the given frame referenced by id.
*/
int godot::NodeChromaSDK::GetKeyColor(int animationId, int frameId, int rzkey)
{
	return ChromaAnimationAPI::GetKeyColor(animationId, frameId, rzkey);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::GetKeyColorD(String path, double frameId, double rzkey)
{
	return ChromaAnimationAPI::GetKeyColorD(path.utf8().get_data(), frameId, rzkey);
}

/*
	Get the color of an animation key for the given frame referenced by name.
*/
int godot::NodeChromaSDK::GetKeyColorName(String path, int frameId, int rzkey)
{
	return ChromaAnimationAPI::GetKeyColorName(path.utf8().get_data(), frameId, rzkey);
}

/*
	Returns `RZRESULT_SUCCESS` if the plugin has been initialized successfully.
	Returns `RZRESULT_DLL_NOT_FOUND` if core Chroma library is not found. Returns
	`RZRESULT_DLL_INVALID_SIGNATURE` if core Chroma library has an invalid
	signature.
*/
RZRESULT godot::NodeChromaSDK::GetLibraryLoadedState()
{
	return ChromaAnimationAPI::GetLibraryLoadedState();
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::GetLibraryLoadedStateD()
{
	return ChromaAnimationAPI::GetLibraryLoadedStateD();
}

/*
	Returns the `MAX COLUMN` given the `EChromaSDKDevice2DEnum` device as an
	integer upon success. Returns negative one upon failure.
*/
int godot::NodeChromaSDK::GetMaxColumn(int device)
{
	return ChromaAnimationAPI::GetMaxColumn(device);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::GetMaxColumnD(double device)
{
	return ChromaAnimationAPI::GetMaxColumnD(device);
}

/*
	Returns the MAX LEDS given the `EChromaSDKDevice1DEnum` device as an integer
	upon success. Returns negative one upon failure.
*/
int godot::NodeChromaSDK::GetMaxLeds(int device)
{
	return ChromaAnimationAPI::GetMaxLeds(device);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::GetMaxLedsD(double device)
{
	return ChromaAnimationAPI::GetMaxLedsD(device);
}

/*
	Returns the `MAX ROW` given the `EChromaSDKDevice2DEnum` device as an integer
	upon success. Returns negative one upon failure.
*/
int godot::NodeChromaSDK::GetMaxRow(int device)
{
	return ChromaAnimationAPI::GetMaxRow(device);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::GetMaxRowD(double device)
{
	return ChromaAnimationAPI::GetMaxRowD(device);
}

/*
	`PluginGetPlayingAnimationCount` will return the number of playing animations.
*/
int godot::NodeChromaSDK::GetPlayingAnimationCount()
{
	return ChromaAnimationAPI::GetPlayingAnimationCount();
}

/*
	`PluginGetPlayingAnimationId` will return the `animationId` given the `index`
	of the playing animation. The `index` is zero-based and less than the number
	returned by `PluginGetPlayingAnimationCount`. Use `PluginGetAnimationName`
	to get the name of the animation.
*/
int godot::NodeChromaSDK::GetPlayingAnimationId(int index)
{
	return ChromaAnimationAPI::GetPlayingAnimationId(index);
}

/*
	Get the RGB color given red, green, and blue.
*/
int godot::NodeChromaSDK::GetRGB(int red, int green, int blue)
{
	return ChromaAnimationAPI::GetRGB(red, green, blue);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::GetRGBD(double red, double green, double blue)
{
	return ChromaAnimationAPI::GetRGBD(red, green, blue);
}

/*
	Check if the animation has loop enabled referenced by id.
*/
bool godot::NodeChromaSDK::HasAnimationLoop(int animationId)
{
	return ChromaAnimationAPI::HasAnimationLoop(animationId);
}

/*
	Check if the animation has loop enabled referenced by name.
*/
bool godot::NodeChromaSDK::HasAnimationLoopName(String path)
{
	return ChromaAnimationAPI::HasAnimationLoopName(path.utf8().get_data());
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::HasAnimationLoopNameD(String path)
{
	return ChromaAnimationAPI::HasAnimationLoopNameD(path.utf8().get_data());
}

/*
	Initialize the ChromaSDK. Zero indicates success, otherwise failure. Many
	API methods auto initialize the ChromaSDK if not already initialized.
*/
RZRESULT godot::NodeChromaSDK::Init()
{
	return ChromaAnimationAPI::Init();
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::InitD()
{
	return ChromaAnimationAPI::InitD();
}

/*
	Initialize the ChromaSDK. AppInfo populates the details in Synapse. Zero
	indicates success, otherwise failure. Many API methods auto initialize
	the ChromaSDK if not already initialized.
*/
RZRESULT godot::NodeChromaSDK::InitSDK(ChromaSDK::APPINFOTYPE* AppInfo)
{
	return ChromaAnimationAPI::InitSDK(AppInfo);
}

/*
	Insert an animation delay by duplicating the frame by the delay number of
	times. Animation is referenced by id.
*/
void godot::NodeChromaSDK::InsertDelay(int animationId, int frameId, int delay)
{
	ChromaAnimationAPI::InsertDelay(animationId, frameId, delay);
}

/*
	Insert an animation delay by duplicating the frame by the delay number of
	times. Animation is referenced by name.
*/
void godot::NodeChromaSDK::InsertDelayName(String path, int frameId, int delay)
{
	ChromaAnimationAPI::InsertDelayName(path.utf8().get_data(), frameId, delay);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::InsertDelayNameD(String path, double frameId, double delay)
{
	return ChromaAnimationAPI::InsertDelayNameD(path.utf8().get_data(), frameId, delay);
}

/*
	Duplicate the source frame index at the target frame index. Animation is
	referenced by id.
*/
void godot::NodeChromaSDK::InsertFrame(int animationId, int sourceFrame, int targetFrame)
{
	ChromaAnimationAPI::InsertFrame(animationId, sourceFrame, targetFrame);
}

/*
	Duplicate the source frame index at the target frame index. Animation is
	referenced by name.
*/
void godot::NodeChromaSDK::InsertFrameName(String path, int sourceFrame, int targetFrame)
{
	ChromaAnimationAPI::InsertFrameName(path.utf8().get_data(), sourceFrame, targetFrame);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::InsertFrameNameD(String path, double sourceFrame, double targetFrame)
{
	return ChromaAnimationAPI::InsertFrameNameD(path.utf8().get_data(), sourceFrame, targetFrame);
}

/*
	Invert all the colors at the specified frame. Animation is referenced by
	id.
*/
void godot::NodeChromaSDK::InvertColors(int animationId, int frameId)
{
	ChromaAnimationAPI::InvertColors(animationId, frameId);
}

/*
	Invert all the colors for all frames. Animation is referenced by id.
*/
void godot::NodeChromaSDK::InvertColorsAllFrames(int animationId)
{
	ChromaAnimationAPI::InvertColorsAllFrames(animationId);
}

/*
	Invert all the colors for all frames. Animation is referenced by name.
*/
void godot::NodeChromaSDK::InvertColorsAllFramesName(String path)
{
	ChromaAnimationAPI::InvertColorsAllFramesName(path.utf8().get_data());
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::InvertColorsAllFramesNameD(String path)
{
	return ChromaAnimationAPI::InvertColorsAllFramesNameD(path.utf8().get_data());
}

/*
	Invert all the colors at the specified frame. Animation is referenced by
	name.
*/
void godot::NodeChromaSDK::InvertColorsName(String path, int frameId)
{
	ChromaAnimationAPI::InvertColorsName(path.utf8().get_data(), frameId);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::InvertColorsNameD(String path, double frameId)
{
	return ChromaAnimationAPI::InvertColorsNameD(path.utf8().get_data(), frameId);
}

/*
	Check if the animation is paused referenced by id.
*/
bool godot::NodeChromaSDK::IsAnimationPaused(int animationId)
{
	return ChromaAnimationAPI::IsAnimationPaused(animationId);
}

/*
	Check if the animation is paused referenced by name.
*/
bool godot::NodeChromaSDK::IsAnimationPausedName(String path)
{
	return ChromaAnimationAPI::IsAnimationPausedName(path.utf8().get_data());
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::IsAnimationPausedNameD(String path)
{
	return ChromaAnimationAPI::IsAnimationPausedNameD(path.utf8().get_data());
}

/*
	The editor dialog is a non-blocking modal window, this method returns true
	if the modal window is open, otherwise false.
*/
bool godot::NodeChromaSDK::IsDialogOpen()
{
	return ChromaAnimationAPI::IsDialogOpen();
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::IsDialogOpenD()
{
	return ChromaAnimationAPI::IsDialogOpenD();
}

/*
	Returns true if the plugin has been initialized. Returns false if the plugin
	is uninitialized.
*/
bool godot::NodeChromaSDK::IsInitialized()
{
	return ChromaAnimationAPI::IsInitialized();
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::IsInitializedD()
{
	return ChromaAnimationAPI::IsInitializedD();
}

/*
	If the method can be invoked the method returns true.
*/
bool godot::NodeChromaSDK::IsPlatformSupported()
{
	return ChromaAnimationAPI::IsPlatformSupported();
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::IsPlatformSupportedD()
{
	return ChromaAnimationAPI::IsPlatformSupportedD();
}

/*
	`PluginIsPlayingName` automatically handles initializing the `ChromaSDK`.
	The named `.chroma` animation file will be automatically opened. The method
	will return whether the animation is playing or not. Animation is referenced
	by id.
*/
bool godot::NodeChromaSDK::IsPlaying(int animationId)
{
	return ChromaAnimationAPI::IsPlaying(animationId);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::IsPlayingD(double animationId)
{
	return ChromaAnimationAPI::IsPlayingD(animationId);
}

/*
	`PluginIsPlayingName` automatically handles initializing the `ChromaSDK`.
	The named `.chroma` animation file will be automatically opened. The method
	will return whether the animation is playing or not. Animation is referenced
	by name.
*/
bool godot::NodeChromaSDK::IsPlayingName(String path)
{
	return ChromaAnimationAPI::IsPlayingName(path.utf8().get_data());
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::IsPlayingNameD(String path)
{
	return ChromaAnimationAPI::IsPlayingNameD(path.utf8().get_data());
}

/*
	`PluginIsPlayingType` automatically handles initializing the `ChromaSDK`.
	If any animation is playing for the `deviceType` and `device` combination,
	the method will return true, otherwise false.
*/
bool godot::NodeChromaSDK::IsPlayingType(int deviceType, int device)
{
	return ChromaAnimationAPI::IsPlayingType(deviceType, device);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::IsPlayingTypeD(double deviceType, double device)
{
	return ChromaAnimationAPI::IsPlayingTypeD(deviceType, device);
}

/*
	Do a lerp math operation on a float.
*/
float godot::NodeChromaSDK::Lerp(float start, float end, float amt)
{
	return ChromaAnimationAPI::Lerp(start, end, amt);
}

/*
	Lerp from one color to another given t in the range 0.0 to 1.0.
*/
int godot::NodeChromaSDK::LerpColor(int from, int to, float t)
{
	return ChromaAnimationAPI::LerpColor(from, to, t);
}

/*
	Loads `Chroma` effects so that the animation can be played immediately.
	Returns the animation id upon success. Returns negative one upon failure.
*/
int godot::NodeChromaSDK::LoadAnimation(int animationId)
{
	return ChromaAnimationAPI::LoadAnimation(animationId);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::LoadAnimationD(double animationId)
{
	return ChromaAnimationAPI::LoadAnimationD(animationId);
}

/*
	Load the named animation.
*/
void godot::NodeChromaSDK::LoadAnimationName(String path)
{
	ChromaAnimationAPI::LoadAnimationName(path.utf8().get_data());
}

/*
	Load a composite set of animations.
*/
void godot::NodeChromaSDK::LoadComposite(String name)
{
	ChromaAnimationAPI::LoadComposite(name.utf8().get_data());
}

/*
	Make a blank animation for the length of the frame count. Frame duration
	defaults to the duration. The frame color defaults to color. Animation
	is referenced by id.
*/
void godot::NodeChromaSDK::MakeBlankFrames(int animationId, int frameCount, float duration, int color)
{
	ChromaAnimationAPI::MakeBlankFrames(animationId, frameCount, duration, color);
}

/*
	Make a blank animation for the length of the frame count. Frame duration
	defaults to the duration. The frame color defaults to color. Animation
	is referenced by name.
*/
void godot::NodeChromaSDK::MakeBlankFramesName(String path, int frameCount, float duration, int color)
{
	ChromaAnimationAPI::MakeBlankFramesName(path.utf8().get_data(), frameCount, duration, color);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::MakeBlankFramesNameD(String path, double frameCount, double duration, double color)
{
	return ChromaAnimationAPI::MakeBlankFramesNameD(path.utf8().get_data(), frameCount, duration, color);
}

/*
	Make a blank animation for the length of the frame count. Frame duration
	defaults to the duration. The frame color is random. Animation is referenced
	by id.
*/
void godot::NodeChromaSDK::MakeBlankFramesRandom(int animationId, int frameCount, float duration)
{
	ChromaAnimationAPI::MakeBlankFramesRandom(animationId, frameCount, duration);
}

/*
	Make a blank animation for the length of the frame count. Frame duration
	defaults to the duration. The frame color is random black and white. Animation
	is referenced by id.
*/
void godot::NodeChromaSDK::MakeBlankFramesRandomBlackAndWhite(int animationId, int frameCount, float duration)
{
	ChromaAnimationAPI::MakeBlankFramesRandomBlackAndWhite(animationId, frameCount, duration);
}

/*
	Make a blank animation for the length of the frame count. Frame duration
	defaults to the duration. The frame color is random black and white. Animation
	is referenced by name.
*/
void godot::NodeChromaSDK::MakeBlankFramesRandomBlackAndWhiteName(String path, int frameCount, float duration)
{
	ChromaAnimationAPI::MakeBlankFramesRandomBlackAndWhiteName(path.utf8().get_data(), frameCount, duration);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::MakeBlankFramesRandomBlackAndWhiteNameD(String path, double frameCount, double duration)
{
	return ChromaAnimationAPI::MakeBlankFramesRandomBlackAndWhiteNameD(path.utf8().get_data(), frameCount, duration);
}

/*
	Make a blank animation for the length of the frame count. Frame duration
	defaults to the duration. The frame color is random. Animation is referenced
	by name.
*/
void godot::NodeChromaSDK::MakeBlankFramesRandomName(String path, int frameCount, float duration)
{
	ChromaAnimationAPI::MakeBlankFramesRandomName(path.utf8().get_data(), frameCount, duration);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::MakeBlankFramesRandomNameD(String path, double frameCount, double duration)
{
	return ChromaAnimationAPI::MakeBlankFramesRandomNameD(path.utf8().get_data(), frameCount, duration);
}

/*
	Make a blank animation for the length of the frame count. Frame duration
	defaults to the duration. The frame color defaults to color. Animation
	is referenced by id.
*/
void godot::NodeChromaSDK::MakeBlankFramesRGB(int animationId, int frameCount, float duration, int red, int green, int blue)
{
	ChromaAnimationAPI::MakeBlankFramesRGB(animationId, frameCount, duration, red, green, blue);
}

/*
	Make a blank animation for the length of the frame count. Frame duration
	defaults to the duration. The frame color defaults to color. Animation
	is referenced by name.
*/
void godot::NodeChromaSDK::MakeBlankFramesRGBName(String path, int frameCount, float duration, int red, int green, int blue)
{
	ChromaAnimationAPI::MakeBlankFramesRGBName(path.utf8().get_data(), frameCount, duration, red, green, blue);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::MakeBlankFramesRGBNameD(String path, double frameCount, double duration, double red, double green, double blue)
{
	return ChromaAnimationAPI::MakeBlankFramesRGBNameD(path.utf8().get_data(), frameCount, duration, red, green, blue);
}

/*
	Flips the color grid horizontally for all `Chroma` animation frames. Returns
	the animation id upon success. Returns negative one upon failure.
*/
int godot::NodeChromaSDK::MirrorHorizontally(int animationId)
{
	return ChromaAnimationAPI::MirrorHorizontally(animationId);
}

/*
	Flips the color grid vertically for all `Chroma` animation frames. This
	method has no effect for `EChromaSDKDevice1DEnum` devices. Returns the
	animation id upon success. Returns negative one upon failure.
*/
int godot::NodeChromaSDK::MirrorVertically(int animationId)
{
	return ChromaAnimationAPI::MirrorVertically(animationId);
}

/*
	Multiply the color intensity with the lerp result from color 1 to color
	2 using the frame index divided by the frame count for the `t` parameter.
	Animation is referenced in id.
*/
void godot::NodeChromaSDK::MultiplyColorLerpAllFrames(int animationId, int color1, int color2)
{
	ChromaAnimationAPI::MultiplyColorLerpAllFrames(animationId, color1, color2);
}

/*
	Multiply the color intensity with the lerp result from color 1 to color
	2 using the frame index divided by the frame count for the `t` parameter.
	Animation is referenced in name.
*/
void godot::NodeChromaSDK::MultiplyColorLerpAllFramesName(String path, int color1, int color2)
{
	ChromaAnimationAPI::MultiplyColorLerpAllFramesName(path.utf8().get_data(), color1, color2);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::MultiplyColorLerpAllFramesNameD(String path, double color1, double color2)
{
	return ChromaAnimationAPI::MultiplyColorLerpAllFramesNameD(path.utf8().get_data(), color1, color2);
}

/*
	Multiply all the colors in the frame by the intensity value. The valid the
	intensity range is from 0.0 to 255.0. RGB components are multiplied equally.
	An intensity of 0.5 would half the color value. Black colors in the frame
	will not be affected by this method.
*/
void godot::NodeChromaSDK::MultiplyIntensity(int animationId, int frameId, float intensity)
{
	ChromaAnimationAPI::MultiplyIntensity(animationId, frameId, intensity);
}

/*
	Multiply all the colors for all frames by the intensity value. The valid
	the intensity range is from 0.0 to 255.0. RGB components are multiplied
	equally. An intensity of 0.5 would half the color value. Black colors in
	the frame will not be affected by this method.
*/
void godot::NodeChromaSDK::MultiplyIntensityAllFrames(int animationId, float intensity)
{
	ChromaAnimationAPI::MultiplyIntensityAllFrames(animationId, intensity);
}

/*
	Multiply all the colors for all frames by the intensity value. The valid
	the intensity range is from 0.0 to 255.0. RGB components are multiplied
	equally. An intensity of 0.5 would half the color value. Black colors in
	the frame will not be affected by this method.
*/
void godot::NodeChromaSDK::MultiplyIntensityAllFramesName(String path, float intensity)
{
	ChromaAnimationAPI::MultiplyIntensityAllFramesName(path.utf8().get_data(), intensity);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::MultiplyIntensityAllFramesNameD(String path, double intensity)
{
	return ChromaAnimationAPI::MultiplyIntensityAllFramesNameD(path.utf8().get_data(), intensity);
}

/*
	Multiply all frames by the RBG color intensity. Animation is referenced
	by id.
*/
void godot::NodeChromaSDK::MultiplyIntensityAllFramesRGB(int animationId, int red, int green, int blue)
{
	ChromaAnimationAPI::MultiplyIntensityAllFramesRGB(animationId, red, green, blue);
}

/*
	Multiply all frames by the RBG color intensity. Animation is referenced
	by name.
*/
void godot::NodeChromaSDK::MultiplyIntensityAllFramesRGBName(String path, int red, int green, int blue)
{
	ChromaAnimationAPI::MultiplyIntensityAllFramesRGBName(path.utf8().get_data(), red, green, blue);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::MultiplyIntensityAllFramesRGBNameD(String path, double red, double green, double blue)
{
	return ChromaAnimationAPI::MultiplyIntensityAllFramesRGBNameD(path.utf8().get_data(), red, green, blue);
}

/*
	Multiply the specific frame by the RBG color intensity. Animation is referenced
	by id.
*/
void godot::NodeChromaSDK::MultiplyIntensityColor(int animationId, int frameId, int color)
{
	ChromaAnimationAPI::MultiplyIntensityColor(animationId, frameId, color);
}

/*
	Multiply all frames by the RBG color intensity. Animation is referenced
	by id.
*/
void godot::NodeChromaSDK::MultiplyIntensityColorAllFrames(int animationId, int color)
{
	ChromaAnimationAPI::MultiplyIntensityColorAllFrames(animationId, color);
}

/*
	Multiply all frames by the RBG color intensity. Animation is referenced
	by name.
*/
void godot::NodeChromaSDK::MultiplyIntensityColorAllFramesName(String path, int color)
{
	ChromaAnimationAPI::MultiplyIntensityColorAllFramesName(path.utf8().get_data(), color);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::MultiplyIntensityColorAllFramesNameD(String path, double color)
{
	return ChromaAnimationAPI::MultiplyIntensityColorAllFramesNameD(path.utf8().get_data(), color);
}

/*
	Multiply the specific frame by the RBG color intensity. Animation is referenced
	by name.
*/
void godot::NodeChromaSDK::MultiplyIntensityColorName(String path, int frameId, int color)
{
	ChromaAnimationAPI::MultiplyIntensityColorName(path.utf8().get_data(), frameId, color);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::MultiplyIntensityColorNameD(String path, double frameId, double color)
{
	return ChromaAnimationAPI::MultiplyIntensityColorNameD(path.utf8().get_data(), frameId, color);
}

/*
	Multiply all the colors in the frame by the intensity value. The valid the
	intensity range is from 0.0 to 255.0. RGB components are multiplied equally.
	An intensity of 0.5 would half the color value. Black colors in the frame
	will not be affected by this method.
*/
void godot::NodeChromaSDK::MultiplyIntensityName(String path, int frameId, float intensity)
{
	ChromaAnimationAPI::MultiplyIntensityName(path.utf8().get_data(), frameId, intensity);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::MultiplyIntensityNameD(String path, double frameId, double intensity)
{
	return ChromaAnimationAPI::MultiplyIntensityNameD(path.utf8().get_data(), frameId, intensity);
}

/*
	Multiply the specific frame by the RBG color intensity. Animation is referenced
	by id.
*/
void godot::NodeChromaSDK::MultiplyIntensityRGB(int animationId, int frameId, int red, int green, int blue)
{
	ChromaAnimationAPI::MultiplyIntensityRGB(animationId, frameId, red, green, blue);
}

/*
	Multiply the specific frame by the RBG color intensity. Animation is referenced
	by name.
*/
void godot::NodeChromaSDK::MultiplyIntensityRGBName(String path, int frameId, int red, int green, int blue)
{
	ChromaAnimationAPI::MultiplyIntensityRGBName(path.utf8().get_data(), frameId, red, green, blue);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::MultiplyIntensityRGBNameD(String path, double frameId, double red, double green, double blue)
{
	return ChromaAnimationAPI::MultiplyIntensityRGBNameD(path.utf8().get_data(), frameId, red, green, blue);
}

/*
	Multiply the specific frame by the color lerp result between color 1 and
	2 using the frame color value as the `t` value. Animation is referenced
	by id.
*/
void godot::NodeChromaSDK::MultiplyNonZeroTargetColorLerp(int animationId, int frameId, int color1, int color2)
{
	ChromaAnimationAPI::MultiplyNonZeroTargetColorLerp(animationId, frameId, color1, color2);
}

/*
	Multiply all frames by the color lerp result between color 1 and 2 using
	the frame color value as the `t` value. Animation is referenced by id.
*/
void godot::NodeChromaSDK::MultiplyNonZeroTargetColorLerpAllFrames(int animationId, int color1, int color2)
{
	ChromaAnimationAPI::MultiplyNonZeroTargetColorLerpAllFrames(animationId, color1, color2);
}

/*
	Multiply all frames by the color lerp result between color 1 and 2 using
	the frame color value as the `t` value. Animation is referenced by name.
*/
void godot::NodeChromaSDK::MultiplyNonZeroTargetColorLerpAllFramesName(String path, int color1, int color2)
{
	ChromaAnimationAPI::MultiplyNonZeroTargetColorLerpAllFramesName(path.utf8().get_data(), color1, color2);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::MultiplyNonZeroTargetColorLerpAllFramesNameD(String path, double color1, double color2)
{
	return ChromaAnimationAPI::MultiplyNonZeroTargetColorLerpAllFramesNameD(path.utf8().get_data(), color1, color2);
}

/*
	Multiply the specific frame by the color lerp result between RGB 1 and 2
	using the frame color value as the `t` value. Animation is referenced by
	id.
*/
void godot::NodeChromaSDK::MultiplyNonZeroTargetColorLerpAllFramesRGB(int animationId, int red1, int green1, int blue1, int red2, int green2, int blue2)
{
	ChromaAnimationAPI::MultiplyNonZeroTargetColorLerpAllFramesRGB(animationId, red1, green1, blue1, red2, green2, blue2);
}

/*
	Multiply the specific frame by the color lerp result between RGB 1 and 2
	using the frame color value as the `t` value. Animation is referenced by
	name.
*/
void godot::NodeChromaSDK::MultiplyNonZeroTargetColorLerpAllFramesRGBName(String path, int red1, int green1, int blue1, int red2, int green2, int blue2)
{
	ChromaAnimationAPI::MultiplyNonZeroTargetColorLerpAllFramesRGBName(path.utf8().get_data(), red1, green1, blue1, red2, green2, blue2);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::MultiplyNonZeroTargetColorLerpAllFramesRGBNameD(String path, double red1, double green1, double blue1, double red2, double green2, double blue2)
{
	return ChromaAnimationAPI::MultiplyNonZeroTargetColorLerpAllFramesRGBNameD(path.utf8().get_data(), red1, green1, blue1, red2, green2, blue2);
}

/*
	Multiply the specific frame by the color lerp result between color 1 and
	2 using the frame color value as the `t` value. Animation is referenced
	by id.
*/
void godot::NodeChromaSDK::MultiplyTargetColorLerp(int animationId, int frameId, int color1, int color2)
{
	ChromaAnimationAPI::MultiplyTargetColorLerp(animationId, frameId, color1, color2);
}

/*
	Multiply all frames by the color lerp result between color 1 and 2 using
	the frame color value as the `t` value. Animation is referenced by id.
*/
void godot::NodeChromaSDK::MultiplyTargetColorLerpAllFrames(int animationId, int color1, int color2)
{
	ChromaAnimationAPI::MultiplyTargetColorLerpAllFrames(animationId, color1, color2);
}

/*
	Multiply all frames by the color lerp result between color 1 and 2 using
	the frame color value as the `t` value. Animation is referenced by name.
*/
void godot::NodeChromaSDK::MultiplyTargetColorLerpAllFramesName(String path, int color1, int color2)
{
	ChromaAnimationAPI::MultiplyTargetColorLerpAllFramesName(path.utf8().get_data(), color1, color2);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::MultiplyTargetColorLerpAllFramesNameD(String path, double color1, double color2)
{
	return ChromaAnimationAPI::MultiplyTargetColorLerpAllFramesNameD(path.utf8().get_data(), color1, color2);
}

/*
	Multiply all frames by the color lerp result between RGB 1 and 2 using the
	frame color value as the `t` value. Animation is referenced by id.
*/
void godot::NodeChromaSDK::MultiplyTargetColorLerpAllFramesRGB(int animationId, int red1, int green1, int blue1, int red2, int green2, int blue2)
{
	ChromaAnimationAPI::MultiplyTargetColorLerpAllFramesRGB(animationId, red1, green1, blue1, red2, green2, blue2);
}

/*
	Multiply all frames by the color lerp result between RGB 1 and 2 using the
	frame color value as the `t` value. Animation is referenced by name.
*/
void godot::NodeChromaSDK::MultiplyTargetColorLerpAllFramesRGBName(String path, int red1, int green1, int blue1, int red2, int green2, int blue2)
{
	ChromaAnimationAPI::MultiplyTargetColorLerpAllFramesRGBName(path.utf8().get_data(), red1, green1, blue1, red2, green2, blue2);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::MultiplyTargetColorLerpAllFramesRGBNameD(String path, double red1, double green1, double blue1, double red2, double green2, double blue2)
{
	return ChromaAnimationAPI::MultiplyTargetColorLerpAllFramesRGBNameD(path.utf8().get_data(), red1, green1, blue1, red2, green2, blue2);
}

/*
	Multiply the specific frame by the color lerp result between color 1 and
	2 using the frame color value as the `t` value. Animation is referenced
	by name.
*/
void godot::NodeChromaSDK::MultiplyTargetColorLerpName(String path, int frameId, int color1, int color2)
{
	ChromaAnimationAPI::MultiplyTargetColorLerpName(path.utf8().get_data(), frameId, color1, color2);
}

/*
	Offset all colors in the frame using the RGB offset. Use the range of -255
	to 255 for red, green, and blue parameters. Negative values remove color.
	Positive values add color.
*/
void godot::NodeChromaSDK::OffsetColors(int animationId, int frameId, int red, int green, int blue)
{
	ChromaAnimationAPI::OffsetColors(animationId, frameId, red, green, blue);
}

/*
	Offset all colors for all frames using the RGB offset. Use the range of
	-255 to 255 for red, green, and blue parameters. Negative values remove
	color. Positive values add color.
*/
void godot::NodeChromaSDK::OffsetColorsAllFrames(int animationId, int red, int green, int blue)
{
	ChromaAnimationAPI::OffsetColorsAllFrames(animationId, red, green, blue);
}

/*
	Offset all colors for all frames using the RGB offset. Use the range of
	-255 to 255 for red, green, and blue parameters. Negative values remove
	color. Positive values add color.
*/
void godot::NodeChromaSDK::OffsetColorsAllFramesName(String path, int red, int green, int blue)
{
	ChromaAnimationAPI::OffsetColorsAllFramesName(path.utf8().get_data(), red, green, blue);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::OffsetColorsAllFramesNameD(String path, double red, double green, double blue)
{
	return ChromaAnimationAPI::OffsetColorsAllFramesNameD(path.utf8().get_data(), red, green, blue);
}

/*
	Offset all colors in the frame using the RGB offset. Use the range of -255
	to 255 for red, green, and blue parameters. Negative values remove color.
	Positive values add color.
*/
void godot::NodeChromaSDK::OffsetColorsName(String path, int frameId, int red, int green, int blue)
{
	ChromaAnimationAPI::OffsetColorsName(path.utf8().get_data(), frameId, red, green, blue);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::OffsetColorsNameD(String path, double frameId, double red, double green, double blue)
{
	return ChromaAnimationAPI::OffsetColorsNameD(path.utf8().get_data(), frameId, red, green, blue);
}

/*
	This method will only update colors in the animation that are not already
	set to black. Offset a subset of colors in the frame using the RGB offset.
	Use the range of -255 to 255 for red, green, and blue parameters. Negative
	values remove color. Positive values add color.
*/
void godot::NodeChromaSDK::OffsetNonZeroColors(int animationId, int frameId, int red, int green, int blue)
{
	ChromaAnimationAPI::OffsetNonZeroColors(animationId, frameId, red, green, blue);
}

/*
	This method will only update colors in the animation that are not already
	set to black. Offset a subset of colors for all frames using the RGB offset.
	Use the range of -255 to 255 for red, green, and blue parameters. Negative
	values remove color. Positive values add color.
*/
void godot::NodeChromaSDK::OffsetNonZeroColorsAllFrames(int animationId, int red, int green, int blue)
{
	ChromaAnimationAPI::OffsetNonZeroColorsAllFrames(animationId, red, green, blue);
}

/*
	This method will only update colors in the animation that are not already
	set to black. Offset a subset of colors for all frames using the RGB offset.
	Use the range of -255 to 255 for red, green, and blue parameters. Negative
	values remove color. Positive values add color.
*/
void godot::NodeChromaSDK::OffsetNonZeroColorsAllFramesName(String path, int red, int green, int blue)
{
	ChromaAnimationAPI::OffsetNonZeroColorsAllFramesName(path.utf8().get_data(), red, green, blue);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::OffsetNonZeroColorsAllFramesNameD(String path, double red, double green, double blue)
{
	return ChromaAnimationAPI::OffsetNonZeroColorsAllFramesNameD(path.utf8().get_data(), red, green, blue);
}

/*
	This method will only update colors in the animation that are not already
	set to black. Offset a subset of colors in the frame using the RGB offset.
	Use the range of -255 to 255 for red, green, and blue parameters. Negative
	values remove color. Positive values add color.
*/
void godot::NodeChromaSDK::OffsetNonZeroColorsName(String path, int frameId, int red, int green, int blue)
{
	ChromaAnimationAPI::OffsetNonZeroColorsName(path.utf8().get_data(), frameId, red, green, blue);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::OffsetNonZeroColorsNameD(String path, double frameId, double red, double green, double blue)
{
	return ChromaAnimationAPI::OffsetNonZeroColorsNameD(path.utf8().get_data(), frameId, red, green, blue);
}

/*
	Opens a `Chroma` animation file so that it can be played. Returns an animation
	id >= 0 upon success. Returns negative one if there was a failure. The
	animation id is used in most of the API methods.
*/
int godot::NodeChromaSDK::OpenAnimation(String path)
{
	return ChromaAnimationAPI::OpenAnimation(path.utf8().get_data());
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::OpenAnimationD(String path)
{
	return ChromaAnimationAPI::OpenAnimationD(path.utf8().get_data());
}

/*
	Opens a `Chroma` animation data from memory so that it can be played. `Data`
	is a pointer to BYTE array of the loaded animation in memory. `Name` will
	be assigned to the animation when loaded. Returns an animation id >= 0
	upon success. Returns negative one if there was a failure. The animation
	id is used in most of the API methods.
*/
int godot::NodeChromaSDK::OpenAnimationFromMemory(const BYTE* data, String name)
{
	return ChromaAnimationAPI::OpenAnimationFromMemory(data, name.utf8().get_data());
}

/*
	Opens a `Chroma` animation file with the `.chroma` extension. Returns zero
	upon success. Returns negative one if there was a failure.
*/
int godot::NodeChromaSDK::OpenEditorDialog(String path)
{
	return ChromaAnimationAPI::OpenEditorDialog(path.utf8().get_data());
}

/*
	Open the named animation in the editor dialog and play the animation at
	start.
*/
int godot::NodeChromaSDK::OpenEditorDialogAndPlay(String path)
{
	return ChromaAnimationAPI::OpenEditorDialogAndPlay(path.utf8().get_data());
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::OpenEditorDialogAndPlayD(String path)
{
	return ChromaAnimationAPI::OpenEditorDialogAndPlayD(path.utf8().get_data());
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::OpenEditorDialogD(String path)
{
	return ChromaAnimationAPI::OpenEditorDialogD(path.utf8().get_data());
}

/*
	Sets the `duration` for all grames in the `Chroma` animation to the `duration`
	parameter. Returns the animation id upon success. Returns negative one
	upon failure.
*/
int godot::NodeChromaSDK::OverrideFrameDuration(int animationId, float duration)
{
	return ChromaAnimationAPI::OverrideFrameDuration(animationId, duration);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::OverrideFrameDurationD(double animationId, double duration)
{
	return ChromaAnimationAPI::OverrideFrameDurationD(animationId, duration);
}

/*
	Override the duration of all frames with the `duration` value. Animation
	is referenced by name.
*/
void godot::NodeChromaSDK::OverrideFrameDurationName(String path, float duration)
{
	ChromaAnimationAPI::OverrideFrameDurationName(path.utf8().get_data(), duration);
}

/*
	Pause the current animation referenced by id.
*/
void godot::NodeChromaSDK::PauseAnimation(int animationId)
{
	ChromaAnimationAPI::PauseAnimation(animationId);
}

/*
	Pause the current animation referenced by name.
*/
void godot::NodeChromaSDK::PauseAnimationName(String path)
{
	ChromaAnimationAPI::PauseAnimationName(path.utf8().get_data());
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::PauseAnimationNameD(String path)
{
	return ChromaAnimationAPI::PauseAnimationNameD(path.utf8().get_data());
}

/*
	Plays the `Chroma` animation. This will load the animation, if not loaded
	previously. Returns the animation id upon success. Returns negative one
	upon failure.
*/
int godot::NodeChromaSDK::PlayAnimation(int animationId)
{
	return ChromaAnimationAPI::PlayAnimation(animationId);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::PlayAnimationD(double animationId)
{
	return ChromaAnimationAPI::PlayAnimationD(animationId);
}

/*
	`PluginPlayAnimationFrame` automatically handles initializing the `ChromaSDK`.
	The method will play the animation given the `animationId` with looping
	`on` or `off` starting at the `frameId`.
*/
void godot::NodeChromaSDK::PlayAnimationFrame(int animationId, int frameId, bool loop)
{
	ChromaAnimationAPI::PlayAnimationFrame(animationId, frameId, loop);
}

/*
	`PluginPlayAnimationFrameName` automatically handles initializing the `ChromaSDK`.
	The named `.chroma` animation file will be automatically opened. The animation
	will play with looping `on` or `off` starting at the `frameId`.
*/
void godot::NodeChromaSDK::PlayAnimationFrameName(String path, int frameId, bool loop)
{
	ChromaAnimationAPI::PlayAnimationFrameName(path.utf8().get_data(), frameId, loop);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::PlayAnimationFrameNameD(String path, double frameId, double loop)
{
	return ChromaAnimationAPI::PlayAnimationFrameNameD(path.utf8().get_data(), frameId, loop);
}

/*
	`PluginPlayAnimationLoop` automatically handles initializing the `ChromaSDK`.
	The method will play the animation given the `animationId` with looping
	`on` or `off`.
*/
void godot::NodeChromaSDK::PlayAnimationLoop(int animationId, bool loop)
{
	ChromaAnimationAPI::PlayAnimationLoop(animationId, loop);
}

/*
	`PluginPlayAnimationName` automatically handles initializing the `ChromaSDK`.
	The named `.chroma` animation file will be automatically opened. The animation
	will play with looping `on` or `off`.
*/
void godot::NodeChromaSDK::PlayAnimationName(String path, bool loop)
{
	ChromaAnimationAPI::PlayAnimationName(path.utf8().get_data(), loop);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::PlayAnimationNameD(String path, double loop)
{
	return ChromaAnimationAPI::PlayAnimationNameD(path.utf8().get_data(), loop);
}

/*
	`PluginPlayComposite` automatically handles initializing the `ChromaSDK`.
	The named animation files for the `.chroma` set will be automatically opened.
	The set of animations will play with looping `on` or `off`.
*/
void godot::NodeChromaSDK::PlayComposite(String name, bool loop)
{
	ChromaAnimationAPI::PlayComposite(name.utf8().get_data(), loop);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::PlayCompositeD(String name, double loop)
{
	return ChromaAnimationAPI::PlayCompositeD(name.utf8().get_data(), loop);
}

/*
	Displays the `Chroma` animation frame on `Chroma` hardware given the `frameIndex`.
	Returns the animation id upon success. Returns negative one upon failure.
*/
int godot::NodeChromaSDK::PreviewFrame(int animationId, int frameIndex)
{
	return ChromaAnimationAPI::PreviewFrame(animationId, frameIndex);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::PreviewFrameD(double animationId, double frameIndex)
{
	return ChromaAnimationAPI::PreviewFrameD(animationId, frameIndex);
}

/*
	Displays the `Chroma` animation frame on `Chroma` hardware given the `frameIndex`.
	Animaton is referenced by name.
*/
void godot::NodeChromaSDK::PreviewFrameName(String path, int frameIndex)
{
	ChromaAnimationAPI::PreviewFrameName(path.utf8().get_data(), frameIndex);
}

/*
	Reduce the frames of the animation by removing every nth element. Animation
	is referenced by id.
*/
void godot::NodeChromaSDK::ReduceFrames(int animationId, int n)
{
	ChromaAnimationAPI::ReduceFrames(animationId, n);
}

/*
	Reduce the frames of the animation by removing every nth element. Animation
	is referenced by name.
*/
void godot::NodeChromaSDK::ReduceFramesName(String path, int n)
{
	ChromaAnimationAPI::ReduceFramesName(path.utf8().get_data(), n);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::ReduceFramesNameD(String path, double n)
{
	return ChromaAnimationAPI::ReduceFramesNameD(path.utf8().get_data(), n);
}

/*
	Resets the `Chroma` animation to 1 blank frame. Returns the animation id
	upon success. Returns negative one upon failure.
*/
int godot::NodeChromaSDK::ResetAnimation(int animationId)
{
	return ChromaAnimationAPI::ResetAnimation(animationId);
}

/*
	Resume the animation with loop `ON` or `OFF` referenced by id.
*/
void godot::NodeChromaSDK::ResumeAnimation(int animationId, bool loop)
{
	ChromaAnimationAPI::ResumeAnimation(animationId, loop);
}

/*
	Resume the animation with loop `ON` or `OFF` referenced by name.
*/
void godot::NodeChromaSDK::ResumeAnimationName(String path, bool loop)
{
	ChromaAnimationAPI::ResumeAnimationName(path.utf8().get_data(), loop);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::ResumeAnimationNameD(String path, double loop)
{
	return ChromaAnimationAPI::ResumeAnimationNameD(path.utf8().get_data(), loop);
}

/*
	Reverse the animation frame order of the `Chroma` animation. Returns the
	animation id upon success. Returns negative one upon failure. Animation
	is referenced by id.
*/
int godot::NodeChromaSDK::Reverse(int animationId)
{
	return ChromaAnimationAPI::Reverse(animationId);
}

/*
	Reverse the animation frame order of the `Chroma` animation. Animation is
	referenced by id.
*/
void godot::NodeChromaSDK::ReverseAllFrames(int animationId)
{
	ChromaAnimationAPI::ReverseAllFrames(animationId);
}

/*
	Reverse the animation frame order of the `Chroma` animation. Animation is
	referenced by name.
*/
void godot::NodeChromaSDK::ReverseAllFramesName(String path)
{
	ChromaAnimationAPI::ReverseAllFramesName(path.utf8().get_data());
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::ReverseAllFramesNameD(String path)
{
	return ChromaAnimationAPI::ReverseAllFramesNameD(path.utf8().get_data());
}

/*
	Save the animation referenced by id to the path specified.
*/
int godot::NodeChromaSDK::SaveAnimation(int animationId, String path)
{
	return ChromaAnimationAPI::SaveAnimation(animationId, path.utf8().get_data());
}

/*
	Save the named animation to the target path specified.
*/
int godot::NodeChromaSDK::SaveAnimationName(String sourceAnimation, String targetAnimation)
{
	return ChromaAnimationAPI::SaveAnimationName(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data());
}

/*
	Set the animation color for a frame given the `1D` `led`. The `led` should
	be greater than or equal to 0 and less than the `MaxLeds`. The animation
	is referenced by id.
*/
void godot::NodeChromaSDK::Set1DColor(int animationId, int frameId, int led, int color)
{
	ChromaAnimationAPI::Set1DColor(animationId, frameId, led, color);
}

/*
	Set the animation color for a frame given the `1D` `led`. The `led` should
	be greater than or equal to 0 and less than the `MaxLeds`. The animation
	is referenced by name.
*/
void godot::NodeChromaSDK::Set1DColorName(String path, int frameId, int led, int color)
{
	ChromaAnimationAPI::Set1DColorName(path.utf8().get_data(), frameId, led, color);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::Set1DColorNameD(String path, double frameId, double led, double color)
{
	return ChromaAnimationAPI::Set1DColorNameD(path.utf8().get_data(), frameId, led, color);
}

/*
	Set the animation color for a frame given the `2D` `row` and `column`. The
	`row` should be greater than or equal to 0 and less than the `MaxRow`.
	The `column` should be greater than or equal to 0 and less than the `MaxColumn`.
	The animation is referenced by id.
*/
void godot::NodeChromaSDK::Set2DColor(int animationId, int frameId, int row, int column, int color)
{
	ChromaAnimationAPI::Set2DColor(animationId, frameId, row, column, color);
}

/*
	Set the animation color for a frame given the `2D` `row` and `column`. The
	`row` should be greater than or equal to 0 and less than the `MaxRow`.
	The `column` should be greater than or equal to 0 and less than the `MaxColumn`.
	The animation is referenced by name.
*/
void godot::NodeChromaSDK::Set2DColorName(String path, int frameId, int row, int column, int color)
{
	ChromaAnimationAPI::Set2DColorName(path.utf8().get_data(), frameId, row, column, color);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::Set2DColorNameD(String path, double frameId, double rowColumnIndex, double color)
{
	return ChromaAnimationAPI::Set2DColorNameD(path.utf8().get_data(), frameId, rowColumnIndex, color);
}

/*
	When custom color is set, the custom key mode will be used. The animation
	is referenced by id.
*/
void godot::NodeChromaSDK::SetChromaCustomColorAllFrames(int animationId)
{
	ChromaAnimationAPI::SetChromaCustomColorAllFrames(animationId);
}

/*
	When custom color is set, the custom key mode will be used. The animation
	is referenced by name.
*/
void godot::NodeChromaSDK::SetChromaCustomColorAllFramesName(String path)
{
	ChromaAnimationAPI::SetChromaCustomColorAllFramesName(path.utf8().get_data());
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::SetChromaCustomColorAllFramesNameD(String path)
{
	return ChromaAnimationAPI::SetChromaCustomColorAllFramesNameD(path.utf8().get_data());
}

/*
	Set the Chroma custom key color flag on all frames. `True` changes the layout
	from grid to key. `True` changes the layout from key to grid. Animation
	is referenced by id.
*/
void godot::NodeChromaSDK::SetChromaCustomFlag(int animationId, bool flag)
{
	ChromaAnimationAPI::SetChromaCustomFlag(animationId, flag);
}

/*
	Set the Chroma custom key color flag on all frames. `True` changes the layout
	from grid to key. `True` changes the layout from key to grid. Animation
	is referenced by name.
*/
void godot::NodeChromaSDK::SetChromaCustomFlagName(String path, bool flag)
{
	ChromaAnimationAPI::SetChromaCustomFlagName(path.utf8().get_data(), flag);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::SetChromaCustomFlagNameD(String path, double flag)
{
	return ChromaAnimationAPI::SetChromaCustomFlagNameD(path.utf8().get_data(), flag);
}

/*
	Set the current frame of the animation referenced by id.
*/
void godot::NodeChromaSDK::SetCurrentFrame(int animationId, int frameId)
{
	ChromaAnimationAPI::SetCurrentFrame(animationId, frameId);
}

/*
	Set the current frame of the animation referenced by name.
*/
void godot::NodeChromaSDK::SetCurrentFrameName(String path, int frameId)
{
	ChromaAnimationAPI::SetCurrentFrameName(path.utf8().get_data(), frameId);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::SetCurrentFrameNameD(String path, double frameId)
{
	return ChromaAnimationAPI::SetCurrentFrameNameD(path.utf8().get_data(), frameId);
}

/*
	Set the custom alpha flag on the color array
*/
RZRESULT godot::NodeChromaSDK::SetCustomColorFlag2D(int device, int* colors)
{
	return ChromaAnimationAPI::SetCustomColorFlag2D(device, colors);
}

/*
	Changes the `deviceType` and `device` of a `Chroma` animation. If the device
	is changed, the `Chroma` animation will be reset with 1 blank frame. Returns
	the animation id upon success. Returns negative one upon failure.
*/
int godot::NodeChromaSDK::SetDevice(int animationId, int deviceType, int device)
{
	return ChromaAnimationAPI::SetDevice(animationId, deviceType, device);
}

/*
	SetEffect will display the referenced effect id.
*/
RZRESULT godot::NodeChromaSDK::SetEffect(const ChromaSDK::FChromaSDKGuid& effectId)
{
	return ChromaAnimationAPI::SetEffect(effectId);
}

/*
	SetEffectCustom1D will display the referenced colors immediately
*/
RZRESULT godot::NodeChromaSDK::SetEffectCustom1D(const int device, Array colors)
{
	RZRESULT result;
	if (colors.size())
	{
		int* ptrColors = new int[colors.size()];
		for (int i = 0; i < colors.size(); ++i)
		{
			ptrColors[i] = (int)colors[i];
		}
		result = ChromaAnimationAPI::SetEffectCustom1D(device, ptrColors);
		delete[] ptrColors;
	}
	return result;
}

/*
	SetEffectCustom2D will display the referenced colors immediately.
*/
RZRESULT godot::NodeChromaSDK::SetEffectCustom2D(const int device, Array colors)
{
	RZRESULT result;
	if (colors.size())
	{
		int* ptrColors = new int[colors.size()];
		for (int i = 0; i < colors.size(); ++i)
		{
			ptrColors[i] = (int)colors[i];
		}
		result = ChromaAnimationAPI::SetEffectCustom2D(device, ptrColors);
		delete[] ptrColors;
	}
	return result;
}

/*
	SetEffectKeyboardCustom2D will display the referenced custom keyboard colors
	immediately. Colors represent a visual grid layout. Keys represent the
	hotkeys for any layout.
*/
RZRESULT godot::NodeChromaSDK::SetEffectKeyboardCustom2D(const int device, Array colors, Array keys)
{
	RZRESULT result;
	if (colors.size())
	{
		int* ptrColors = new int[colors.size()];
		for (int i = 0; i < colors.size(); ++i)
		{
			ptrColors[i] = (int)colors[i];
		}
		if (keys.size())
		{
			int* ptrKeys = new int[keys.size()];
			for (int i1 = 0; i1 < keys.size(); ++i1)
			{
				ptrKeys[i1] = (int)keys[i1];
			}
			result = ChromaAnimationAPI::SetEffectKeyboardCustom2D(device, ptrColors, ptrKeys);
			delete[] ptrKeys;
		}
		delete[] ptrColors;
	}
	return result;
}

/*
	When the idle animation is used, the named animation will play when no other
	animations are playing. Reference the animation by id.
*/
void godot::NodeChromaSDK::SetIdleAnimation(int animationId)
{
	ChromaAnimationAPI::SetIdleAnimation(animationId);
}

/*
	When the idle animation is used, the named animation will play when no other
	animations are playing. Reference the animation by name.
*/
void godot::NodeChromaSDK::SetIdleAnimationName(String path)
{
	ChromaAnimationAPI::SetIdleAnimationName(path.utf8().get_data());
}

/*
	Set animation key to a static color for the given frame.
*/
void godot::NodeChromaSDK::SetKeyColor(int animationId, int frameId, int rzkey, int color)
{
	ChromaAnimationAPI::SetKeyColor(animationId, frameId, rzkey, color);
}

/*
	Set the key to the specified key color for all frames. Animation is referenced
	by id.
*/
void godot::NodeChromaSDK::SetKeyColorAllFrames(int animationId, int rzkey, int color)
{
	ChromaAnimationAPI::SetKeyColorAllFrames(animationId, rzkey, color);
}

/*
	Set the key to the specified key color for all frames. Animation is referenced
	by name.
*/
void godot::NodeChromaSDK::SetKeyColorAllFramesName(String path, int rzkey, int color)
{
	ChromaAnimationAPI::SetKeyColorAllFramesName(path.utf8().get_data(), rzkey, color);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::SetKeyColorAllFramesNameD(String path, double rzkey, double color)
{
	return ChromaAnimationAPI::SetKeyColorAllFramesNameD(path.utf8().get_data(), rzkey, color);
}

/*
	Set the key to the specified key color for all frames. Animation is referenced
	by id.
*/
void godot::NodeChromaSDK::SetKeyColorAllFramesRGB(int animationId, int rzkey, int red, int green, int blue)
{
	ChromaAnimationAPI::SetKeyColorAllFramesRGB(animationId, rzkey, red, green, blue);
}

/*
	Set the key to the specified key color for all frames. Animation is referenced
	by name.
*/
void godot::NodeChromaSDK::SetKeyColorAllFramesRGBName(String path, int rzkey, int red, int green, int blue)
{
	ChromaAnimationAPI::SetKeyColorAllFramesRGBName(path.utf8().get_data(), rzkey, red, green, blue);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::SetKeyColorAllFramesRGBNameD(String path, double rzkey, double red, double green, double blue)
{
	return ChromaAnimationAPI::SetKeyColorAllFramesRGBNameD(path.utf8().get_data(), rzkey, red, green, blue);
}

/*
	Set animation key to a static color for the given frame.
*/
void godot::NodeChromaSDK::SetKeyColorName(String path, int frameId, int rzkey, int color)
{
	ChromaAnimationAPI::SetKeyColorName(path.utf8().get_data(), frameId, rzkey, color);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::SetKeyColorNameD(String path, double frameId, double rzkey, double color)
{
	return ChromaAnimationAPI::SetKeyColorNameD(path.utf8().get_data(), frameId, rzkey, color);
}

/*
	Set the key to the specified key color for the specified frame. Animation
	is referenced by id.
*/
void godot::NodeChromaSDK::SetKeyColorRGB(int animationId, int frameId, int rzkey, int red, int green, int blue)
{
	ChromaAnimationAPI::SetKeyColorRGB(animationId, frameId, rzkey, red, green, blue);
}

/*
	Set the key to the specified key color for the specified frame. Animation
	is referenced by name.
*/
void godot::NodeChromaSDK::SetKeyColorRGBName(String path, int frameId, int rzkey, int red, int green, int blue)
{
	ChromaAnimationAPI::SetKeyColorRGBName(path.utf8().get_data(), frameId, rzkey, red, green, blue);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::SetKeyColorRGBNameD(String path, double frameId, double rzkey, double red, double green, double blue)
{
	return ChromaAnimationAPI::SetKeyColorRGBNameD(path.utf8().get_data(), frameId, rzkey, red, green, blue);
}

/*
	Set animation key to a static color for the given frame if the existing
	color is not already black.
*/
void godot::NodeChromaSDK::SetKeyNonZeroColor(int animationId, int frameId, int rzkey, int color)
{
	ChromaAnimationAPI::SetKeyNonZeroColor(animationId, frameId, rzkey, color);
}

/*
	Set animation key to a static color for the given frame if the existing
	color is not already black.
*/
void godot::NodeChromaSDK::SetKeyNonZeroColorName(String path, int frameId, int rzkey, int color)
{
	ChromaAnimationAPI::SetKeyNonZeroColorName(path.utf8().get_data(), frameId, rzkey, color);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::SetKeyNonZeroColorNameD(String path, double frameId, double rzkey, double color)
{
	return ChromaAnimationAPI::SetKeyNonZeroColorNameD(path.utf8().get_data(), frameId, rzkey, color);
}

/*
	Set the key to the specified key color for the specified frame where color
	is not black. Animation is referenced by id.
*/
void godot::NodeChromaSDK::SetKeyNonZeroColorRGB(int animationId, int frameId, int rzkey, int red, int green, int blue)
{
	ChromaAnimationAPI::SetKeyNonZeroColorRGB(animationId, frameId, rzkey, red, green, blue);
}

/*
	Set the key to the specified key color for the specified frame where color
	is not black. Animation is referenced by name.
*/
void godot::NodeChromaSDK::SetKeyNonZeroColorRGBName(String path, int frameId, int rzkey, int red, int green, int blue)
{
	ChromaAnimationAPI::SetKeyNonZeroColorRGBName(path.utf8().get_data(), frameId, rzkey, red, green, blue);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::SetKeyNonZeroColorRGBNameD(String path, double frameId, double rzkey, double red, double green, double blue)
{
	return ChromaAnimationAPI::SetKeyNonZeroColorRGBNameD(path.utf8().get_data(), frameId, rzkey, red, green, blue);
}

/*
	Set animation key by row and column to a static color for the given frame.
*/
void godot::NodeChromaSDK::SetKeyRowColumnColorName(String path, int frameId, int row, int column, int color)
{
	ChromaAnimationAPI::SetKeyRowColumnColorName(path.utf8().get_data(), frameId, row, column, color);
}

/*
	Set an array of animation keys to a static color for the given frame. Animation
	is referenced by id.
*/
void godot::NodeChromaSDK::SetKeysColor(int animationId, int frameId, Array rzkeys, int keyCount, int color)
{
	if (rzkeys.size())
	{
		int* ptrRzkeys = new int[rzkeys.size()];
		for (int i = 0; i < rzkeys.size(); ++i)
		{
			ptrRzkeys[i] = (int)rzkeys[i];
		}
		ChromaAnimationAPI::SetKeysColor(animationId, frameId, ptrRzkeys, keyCount, color);
		delete[] ptrRzkeys;
	}
}

/*
	Set an array of animation keys to a static color for all frames. Animation
	is referenced by id.
*/
void godot::NodeChromaSDK::SetKeysColorAllFrames(int animationId, Array rzkeys, int keyCount, int color)
{
	if (rzkeys.size())
	{
		int* ptrRzkeys = new int[rzkeys.size()];
		for (int i = 0; i < rzkeys.size(); ++i)
		{
			ptrRzkeys[i] = (int)rzkeys[i];
		}
		ChromaAnimationAPI::SetKeysColorAllFrames(animationId, ptrRzkeys, keyCount, color);
		delete[] ptrRzkeys;
	}
}

/*
	Set an array of animation keys to a static color for all frames. Animation
	is referenced by name.
*/
void godot::NodeChromaSDK::SetKeysColorAllFramesName(String path, Array rzkeys, int keyCount, int color)
{
	if (rzkeys.size())
	{
		int* ptrRzkeys = new int[rzkeys.size()];
		for (int i = 0; i < rzkeys.size(); ++i)
		{
			ptrRzkeys[i] = (int)rzkeys[i];
		}
		ChromaAnimationAPI::SetKeysColorAllFramesName(path.utf8().get_data(), ptrRzkeys, keyCount, color);
		delete[] ptrRzkeys;
	}
}

/*
	Set an array of animation keys to a static color for all frames. Animation
	is referenced by id.
*/
void godot::NodeChromaSDK::SetKeysColorAllFramesRGB(int animationId, Array rzkeys, int keyCount, int red, int green, int blue)
{
	if (rzkeys.size())
	{
		int* ptrRzkeys = new int[rzkeys.size()];
		for (int i = 0; i < rzkeys.size(); ++i)
		{
			ptrRzkeys[i] = (int)rzkeys[i];
		}
		ChromaAnimationAPI::SetKeysColorAllFramesRGB(animationId, ptrRzkeys, keyCount, red, green, blue);
		delete[] ptrRzkeys;
	}
}

/*
	Set an array of animation keys to a static color for all frames. Animation
	is referenced by name.
*/
void godot::NodeChromaSDK::SetKeysColorAllFramesRGBName(String path, Array rzkeys, int keyCount, int red, int green, int blue)
{
	if (rzkeys.size())
	{
		int* ptrRzkeys = new int[rzkeys.size()];
		for (int i = 0; i < rzkeys.size(); ++i)
		{
			ptrRzkeys[i] = (int)rzkeys[i];
		}
		ChromaAnimationAPI::SetKeysColorAllFramesRGBName(path.utf8().get_data(), ptrRzkeys, keyCount, red, green, blue);
		delete[] ptrRzkeys;
	}
}

/*
	Set an array of animation keys to a static color for the given frame.
*/
void godot::NodeChromaSDK::SetKeysColorName(String path, int frameId, Array rzkeys, int keyCount, int color)
{
	if (rzkeys.size())
	{
		int* ptrRzkeys = new int[rzkeys.size()];
		for (int i = 0; i < rzkeys.size(); ++i)
		{
			ptrRzkeys[i] = (int)rzkeys[i];
		}
		ChromaAnimationAPI::SetKeysColorName(path.utf8().get_data(), frameId, ptrRzkeys, keyCount, color);
		delete[] ptrRzkeys;
	}
}

/*
	Set an array of animation keys to a static color for the given frame. Animation
	is referenced by id.
*/
void godot::NodeChromaSDK::SetKeysColorRGB(int animationId, int frameId, Array rzkeys, int keyCount, int red, int green, int blue)
{
	if (rzkeys.size())
	{
		int* ptrRzkeys = new int[rzkeys.size()];
		for (int i = 0; i < rzkeys.size(); ++i)
		{
			ptrRzkeys[i] = (int)rzkeys[i];
		}
		ChromaAnimationAPI::SetKeysColorRGB(animationId, frameId, ptrRzkeys, keyCount, red, green, blue);
		delete[] ptrRzkeys;
	}
}

/*
	Set an array of animation keys to a static color for the given frame. Animation
	is referenced by name.
*/
void godot::NodeChromaSDK::SetKeysColorRGBName(String path, int frameId, Array rzkeys, int keyCount, int red, int green, int blue)
{
	if (rzkeys.size())
	{
		int* ptrRzkeys = new int[rzkeys.size()];
		for (int i = 0; i < rzkeys.size(); ++i)
		{
			ptrRzkeys[i] = (int)rzkeys[i];
		}
		ChromaAnimationAPI::SetKeysColorRGBName(path.utf8().get_data(), frameId, ptrRzkeys, keyCount, red, green, blue);
		delete[] ptrRzkeys;
	}
}

/*
	Set an array of animation keys to a static color for the given frame if
	the existing color is not already black.
*/
void godot::NodeChromaSDK::SetKeysNonZeroColor(int animationId, int frameId, Array rzkeys, int keyCount, int color)
{
	if (rzkeys.size())
	{
		int* ptrRzkeys = new int[rzkeys.size()];
		for (int i = 0; i < rzkeys.size(); ++i)
		{
			ptrRzkeys[i] = (int)rzkeys[i];
		}
		ChromaAnimationAPI::SetKeysNonZeroColor(animationId, frameId, ptrRzkeys, keyCount, color);
		delete[] ptrRzkeys;
	}
}

/*
	Set an array of animation keys to a static color for the given frame where
	the color is not black. Animation is referenced by id.
*/
void godot::NodeChromaSDK::SetKeysNonZeroColorAllFrames(int animationId, Array rzkeys, int keyCount, int color)
{
	if (rzkeys.size())
	{
		int* ptrRzkeys = new int[rzkeys.size()];
		for (int i = 0; i < rzkeys.size(); ++i)
		{
			ptrRzkeys[i] = (int)rzkeys[i];
		}
		ChromaAnimationAPI::SetKeysNonZeroColorAllFrames(animationId, ptrRzkeys, keyCount, color);
		delete[] ptrRzkeys;
	}
}

/*
	Set an array of animation keys to a static color for all frames if the existing
	color is not already black. Reference animation by name.
*/
void godot::NodeChromaSDK::SetKeysNonZeroColorAllFramesName(String path, Array rzkeys, int keyCount, int color)
{
	if (rzkeys.size())
	{
		int* ptrRzkeys = new int[rzkeys.size()];
		for (int i = 0; i < rzkeys.size(); ++i)
		{
			ptrRzkeys[i] = (int)rzkeys[i];
		}
		ChromaAnimationAPI::SetKeysNonZeroColorAllFramesName(path.utf8().get_data(), ptrRzkeys, keyCount, color);
		delete[] ptrRzkeys;
	}
}

/*
	Set an array of animation keys to a static color for the given frame if
	the existing color is not already black. Reference animation by name.
*/
void godot::NodeChromaSDK::SetKeysNonZeroColorName(String path, int frameId, Array rzkeys, int keyCount, int color)
{
	if (rzkeys.size())
	{
		int* ptrRzkeys = new int[rzkeys.size()];
		for (int i = 0; i < rzkeys.size(); ++i)
		{
			ptrRzkeys[i] = (int)rzkeys[i];
		}
		ChromaAnimationAPI::SetKeysNonZeroColorName(path.utf8().get_data(), frameId, ptrRzkeys, keyCount, color);
		delete[] ptrRzkeys;
	}
}

/*
	Set an array of animation keys to a static color for the given frame where
	the color is not black. Animation is referenced by id.
*/
void godot::NodeChromaSDK::SetKeysNonZeroColorRGB(int animationId, int frameId, Array rzkeys, int keyCount, int red, int green, int blue)
{
	if (rzkeys.size())
	{
		int* ptrRzkeys = new int[rzkeys.size()];
		for (int i = 0; i < rzkeys.size(); ++i)
		{
			ptrRzkeys[i] = (int)rzkeys[i];
		}
		ChromaAnimationAPI::SetKeysNonZeroColorRGB(animationId, frameId, ptrRzkeys, keyCount, red, green, blue);
		delete[] ptrRzkeys;
	}
}

/*
	Set an array of animation keys to a static color for the given frame where
	the color is not black. Animation is referenced by name.
*/
void godot::NodeChromaSDK::SetKeysNonZeroColorRGBName(String path, int frameId, Array rzkeys, int keyCount, int red, int green, int blue)
{
	if (rzkeys.size())
	{
		int* ptrRzkeys = new int[rzkeys.size()];
		for (int i = 0; i < rzkeys.size(); ++i)
		{
			ptrRzkeys[i] = (int)rzkeys[i];
		}
		ChromaAnimationAPI::SetKeysNonZeroColorRGBName(path.utf8().get_data(), frameId, ptrRzkeys, keyCount, red, green, blue);
		delete[] ptrRzkeys;
	}
}

/*
	Set an array of animation keys to a static color for the given frame where
	the color is black. Animation is referenced by id.
*/
void godot::NodeChromaSDK::SetKeysZeroColor(int animationId, int frameId, Array rzkeys, int keyCount, int color)
{
	if (rzkeys.size())
	{
		int* ptrRzkeys = new int[rzkeys.size()];
		for (int i = 0; i < rzkeys.size(); ++i)
		{
			ptrRzkeys[i] = (int)rzkeys[i];
		}
		ChromaAnimationAPI::SetKeysZeroColor(animationId, frameId, ptrRzkeys, keyCount, color);
		delete[] ptrRzkeys;
	}
}

/*
	Set an array of animation keys to a static color for all frames where the
	color is black. Animation is referenced by id.
*/
void godot::NodeChromaSDK::SetKeysZeroColorAllFrames(int animationId, Array rzkeys, int keyCount, int color)
{
	if (rzkeys.size())
	{
		int* ptrRzkeys = new int[rzkeys.size()];
		for (int i = 0; i < rzkeys.size(); ++i)
		{
			ptrRzkeys[i] = (int)rzkeys[i];
		}
		ChromaAnimationAPI::SetKeysZeroColorAllFrames(animationId, ptrRzkeys, keyCount, color);
		delete[] ptrRzkeys;
	}
}

/*
	Set an array of animation keys to a static color for all frames where the
	color is black. Animation is referenced by name.
*/
void godot::NodeChromaSDK::SetKeysZeroColorAllFramesName(String path, Array rzkeys, int keyCount, int color)
{
	if (rzkeys.size())
	{
		int* ptrRzkeys = new int[rzkeys.size()];
		for (int i = 0; i < rzkeys.size(); ++i)
		{
			ptrRzkeys[i] = (int)rzkeys[i];
		}
		ChromaAnimationAPI::SetKeysZeroColorAllFramesName(path.utf8().get_data(), ptrRzkeys, keyCount, color);
		delete[] ptrRzkeys;
	}
}

/*
	Set an array of animation keys to a static color for all frames where the
	color is black. Animation is referenced by id.
*/
void godot::NodeChromaSDK::SetKeysZeroColorAllFramesRGB(int animationId, Array rzkeys, int keyCount, int red, int green, int blue)
{
	if (rzkeys.size())
	{
		int* ptrRzkeys = new int[rzkeys.size()];
		for (int i = 0; i < rzkeys.size(); ++i)
		{
			ptrRzkeys[i] = (int)rzkeys[i];
		}
		ChromaAnimationAPI::SetKeysZeroColorAllFramesRGB(animationId, ptrRzkeys, keyCount, red, green, blue);
		delete[] ptrRzkeys;
	}
}

/*
	Set an array of animation keys to a static color for all frames where the
	color is black. Animation is referenced by name.
*/
void godot::NodeChromaSDK::SetKeysZeroColorAllFramesRGBName(String path, Array rzkeys, int keyCount, int red, int green, int blue)
{
	if (rzkeys.size())
	{
		int* ptrRzkeys = new int[rzkeys.size()];
		for (int i = 0; i < rzkeys.size(); ++i)
		{
			ptrRzkeys[i] = (int)rzkeys[i];
		}
		ChromaAnimationAPI::SetKeysZeroColorAllFramesRGBName(path.utf8().get_data(), ptrRzkeys, keyCount, red, green, blue);
		delete[] ptrRzkeys;
	}
}

/*
	Set an array of animation keys to a static color for the given frame where
	the color is black. Animation is referenced by name.
*/
void godot::NodeChromaSDK::SetKeysZeroColorName(String path, int frameId, Array rzkeys, int keyCount, int color)
{
	if (rzkeys.size())
	{
		int* ptrRzkeys = new int[rzkeys.size()];
		for (int i = 0; i < rzkeys.size(); ++i)
		{
			ptrRzkeys[i] = (int)rzkeys[i];
		}
		ChromaAnimationAPI::SetKeysZeroColorName(path.utf8().get_data(), frameId, ptrRzkeys, keyCount, color);
		delete[] ptrRzkeys;
	}
}

/*
	Set an array of animation keys to a static color for the given frame where
	the color is black. Animation is referenced by id.
*/
void godot::NodeChromaSDK::SetKeysZeroColorRGB(int animationId, int frameId, Array rzkeys, int keyCount, int red, int green, int blue)
{
	if (rzkeys.size())
	{
		int* ptrRzkeys = new int[rzkeys.size()];
		for (int i = 0; i < rzkeys.size(); ++i)
		{
			ptrRzkeys[i] = (int)rzkeys[i];
		}
		ChromaAnimationAPI::SetKeysZeroColorRGB(animationId, frameId, ptrRzkeys, keyCount, red, green, blue);
		delete[] ptrRzkeys;
	}
}

/*
	Set an array of animation keys to a static color for the given frame where
	the color is black. Animation is referenced by name.
*/
void godot::NodeChromaSDK::SetKeysZeroColorRGBName(String path, int frameId, Array rzkeys, int keyCount, int red, int green, int blue)
{
	if (rzkeys.size())
	{
		int* ptrRzkeys = new int[rzkeys.size()];
		for (int i = 0; i < rzkeys.size(); ++i)
		{
			ptrRzkeys[i] = (int)rzkeys[i];
		}
		ChromaAnimationAPI::SetKeysZeroColorRGBName(path.utf8().get_data(), frameId, ptrRzkeys, keyCount, red, green, blue);
		delete[] ptrRzkeys;
	}
}

/*
	Set animation key to a static color for the given frame where the color
	is black. Animation is referenced by id.
*/
void godot::NodeChromaSDK::SetKeyZeroColor(int animationId, int frameId, int rzkey, int color)
{
	ChromaAnimationAPI::SetKeyZeroColor(animationId, frameId, rzkey, color);
}

/*
	Set animation key to a static color for the given frame where the color
	is black. Animation is referenced by name.
*/
void godot::NodeChromaSDK::SetKeyZeroColorName(String path, int frameId, int rzkey, int color)
{
	ChromaAnimationAPI::SetKeyZeroColorName(path.utf8().get_data(), frameId, rzkey, color);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::SetKeyZeroColorNameD(String path, double frameId, double rzkey, double color)
{
	return ChromaAnimationAPI::SetKeyZeroColorNameD(path.utf8().get_data(), frameId, rzkey, color);
}

/*
	Set animation key to a static color for the given frame where the color
	is black. Animation is referenced by id.
*/
void godot::NodeChromaSDK::SetKeyZeroColorRGB(int animationId, int frameId, int rzkey, int red, int green, int blue)
{
	ChromaAnimationAPI::SetKeyZeroColorRGB(animationId, frameId, rzkey, red, green, blue);
}

/*
	Set animation key to a static color for the given frame where the color
	is black. Animation is referenced by name.
*/
void godot::NodeChromaSDK::SetKeyZeroColorRGBName(String path, int frameId, int rzkey, int red, int green, int blue)
{
	ChromaAnimationAPI::SetKeyZeroColorRGBName(path.utf8().get_data(), frameId, rzkey, red, green, blue);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::SetKeyZeroColorRGBNameD(String path, double frameId, double rzkey, double red, double green, double blue)
{
	return ChromaAnimationAPI::SetKeyZeroColorRGBNameD(path.utf8().get_data(), frameId, rzkey, red, green, blue);
}

/*
	Invokes the setup for a debug logging callback so that `stdout` is redirected
	to the callback. This is used by `Unity` so that debug messages can appear
	in the console window.
*/
void godot::NodeChromaSDK::SetLogDelegate(DebugLogPtr fp)
{
	ChromaAnimationAPI::SetLogDelegate(fp);
}

/*
	Sets the target device to the static color.
*/
void godot::NodeChromaSDK::SetStaticColor(int deviceType, int device, int color)
{
	ChromaAnimationAPI::SetStaticColor(deviceType, device, color);
}

/*
	Sets all devices to the static color.
*/
void godot::NodeChromaSDK::SetStaticColorAll(int color)
{
	ChromaAnimationAPI::SetStaticColorAll(color);
}

/*
	Sets the target device to the static color.
*/
void godot::NodeChromaSDK::StaticColor(int deviceType, int device, int color)
{
	ChromaAnimationAPI::StaticColor(deviceType, device, color);
}

/*
	Sets all devices to the static color.
*/
void godot::NodeChromaSDK::StaticColorAll(int color)
{
	ChromaAnimationAPI::StaticColorAll(color);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::StaticColorD(double deviceType, double device, double color)
{
	return ChromaAnimationAPI::StaticColorD(deviceType, device, color);
}

/*
	`PluginStopAll` will automatically stop all animations that are playing.
*/
void godot::NodeChromaSDK::StopAll()
{
	ChromaAnimationAPI::StopAll();
}

/*
	Stops animation playback if in progress. Returns the animation id upon success.
	Returns negative one upon failure.
*/
int godot::NodeChromaSDK::StopAnimation(int animationId)
{
	return ChromaAnimationAPI::StopAnimation(animationId);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::StopAnimationD(double animationId)
{
	return ChromaAnimationAPI::StopAnimationD(animationId);
}

/*
	`PluginStopAnimationName` automatically handles initializing the `ChromaSDK`.
	The named `.chroma` animation file will be automatically opened. The animation
	will stop if playing.
*/
void godot::NodeChromaSDK::StopAnimationName(String path)
{
	ChromaAnimationAPI::StopAnimationName(path.utf8().get_data());
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::StopAnimationNameD(String path)
{
	return ChromaAnimationAPI::StopAnimationNameD(path.utf8().get_data());
}

/*
	`PluginStopAnimationType` automatically handles initializing the `ChromaSDK`.
	If any animation is playing for the `deviceType` and `device` combination,
	it will be stopped.
*/
void godot::NodeChromaSDK::StopAnimationType(int deviceType, int device)
{
	ChromaAnimationAPI::StopAnimationType(deviceType, device);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::StopAnimationTypeD(double deviceType, double device)
{
	return ChromaAnimationAPI::StopAnimationTypeD(deviceType, device);
}

/*
	`PluginStopComposite` automatically handles initializing the `ChromaSDK`.
	The named animation files for the `.chroma` set will be automatically opened.
	The set of animations will be stopped if playing.
*/
void godot::NodeChromaSDK::StopComposite(String name)
{
	ChromaAnimationAPI::StopComposite(name.utf8().get_data());
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::StopCompositeD(String name)
{
	return ChromaAnimationAPI::StopCompositeD(name.utf8().get_data());
}

/*
	Return color1 - color2
*/
int godot::NodeChromaSDK::SubtractColor(const int color1, const int color2)
{
	return ChromaAnimationAPI::SubtractColor(color1, color2);
}

/*
	Subtract the source color from the target color for the frame where the
	target color is not black. Source and target are referenced by id.
*/
void godot::NodeChromaSDK::SubtractNonZeroAllKeys(int sourceAnimationId, int targetAnimationId, int frameId)
{
	ChromaAnimationAPI::SubtractNonZeroAllKeys(sourceAnimationId, targetAnimationId, frameId);
}

/*
	Subtract the source color from the target color for all frames where the
	target color is not black. Source and target are referenced by id.
*/
void godot::NodeChromaSDK::SubtractNonZeroAllKeysAllFrames(int sourceAnimationId, int targetAnimationId)
{
	ChromaAnimationAPI::SubtractNonZeroAllKeysAllFrames(sourceAnimationId, targetAnimationId);
}

/*
	Subtract the source color from the target color for all frames where the
	target color is not black. Source and target are referenced by name.
*/
void godot::NodeChromaSDK::SubtractNonZeroAllKeysAllFramesName(String sourceAnimation, String targetAnimation)
{
	ChromaAnimationAPI::SubtractNonZeroAllKeysAllFramesName(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data());
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::SubtractNonZeroAllKeysAllFramesNameD(String sourceAnimation, String targetAnimation)
{
	return ChromaAnimationAPI::SubtractNonZeroAllKeysAllFramesNameD(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data());
}

/*
	Subtract the source color from the target color for all frames where the
	target color is not black starting at offset for the length of the source.
	Source and target are referenced by id.
*/
void godot::NodeChromaSDK::SubtractNonZeroAllKeysAllFramesOffset(int sourceAnimationId, int targetAnimationId, int offset)
{
	ChromaAnimationAPI::SubtractNonZeroAllKeysAllFramesOffset(sourceAnimationId, targetAnimationId, offset);
}

/*
	Subtract the source color from the target color for all frames where the
	target color is not black starting at offset for the length of the source.
	Source and target are referenced by name.
*/
void godot::NodeChromaSDK::SubtractNonZeroAllKeysAllFramesOffsetName(String sourceAnimation, String targetAnimation, int offset)
{
	ChromaAnimationAPI::SubtractNonZeroAllKeysAllFramesOffsetName(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data(), offset);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::SubtractNonZeroAllKeysAllFramesOffsetNameD(String sourceAnimation, String targetAnimation, double offset)
{
	return ChromaAnimationAPI::SubtractNonZeroAllKeysAllFramesOffsetNameD(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data(), offset);
}

/*
	Subtract the source color from the target color for the frame where the
	target color is not black. Source and target are referenced by name.
*/
void godot::NodeChromaSDK::SubtractNonZeroAllKeysName(String sourceAnimation, String targetAnimation, int frameId)
{
	ChromaAnimationAPI::SubtractNonZeroAllKeysName(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data(), frameId);
}

/*
	Subtract the source color from the target where color is not black for the
	source frame and target offset frame, reference source and target by id.
*/
void godot::NodeChromaSDK::SubtractNonZeroAllKeysOffset(int sourceAnimationId, int targetAnimationId, int frameId, int offset)
{
	ChromaAnimationAPI::SubtractNonZeroAllKeysOffset(sourceAnimationId, targetAnimationId, frameId, offset);
}

/*
	Subtract the source color from the target where color is not black for the
	source frame and target offset frame, reference source and target by name.
*/
void godot::NodeChromaSDK::SubtractNonZeroAllKeysOffsetName(String sourceAnimation, String targetAnimation, int frameId, int offset)
{
	ChromaAnimationAPI::SubtractNonZeroAllKeysOffsetName(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data(), frameId, offset);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::SubtractNonZeroAllKeysOffsetNameD(String sourceAnimation, String targetAnimation, double frameId, double offset)
{
	return ChromaAnimationAPI::SubtractNonZeroAllKeysOffsetNameD(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data(), frameId, offset);
}

/*
	Subtract the source color from the target color where the target color is
	not black for all frames. Reference source and target by id.
*/
void godot::NodeChromaSDK::SubtractNonZeroTargetAllKeysAllFrames(int sourceAnimationId, int targetAnimationId)
{
	ChromaAnimationAPI::SubtractNonZeroTargetAllKeysAllFrames(sourceAnimationId, targetAnimationId);
}

/*
	Subtract the source color from the target color where the target color is
	not black for all frames. Reference source and target by name.
*/
void godot::NodeChromaSDK::SubtractNonZeroTargetAllKeysAllFramesName(String sourceAnimation, String targetAnimation)
{
	ChromaAnimationAPI::SubtractNonZeroTargetAllKeysAllFramesName(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data());
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::SubtractNonZeroTargetAllKeysAllFramesNameD(String sourceAnimation, String targetAnimation)
{
	return ChromaAnimationAPI::SubtractNonZeroTargetAllKeysAllFramesNameD(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data());
}

/*
	Subtract the source color from the target color where the target color is
	not black for all frames starting at the target offset for the length of
	the source. Reference source and target by id.
*/
void godot::NodeChromaSDK::SubtractNonZeroTargetAllKeysAllFramesOffset(int sourceAnimationId, int targetAnimationId, int offset)
{
	ChromaAnimationAPI::SubtractNonZeroTargetAllKeysAllFramesOffset(sourceAnimationId, targetAnimationId, offset);
}

/*
	Subtract the source color from the target color where the target color is
	not black for all frames starting at the target offset for the length of
	the source. Reference source and target by name.
*/
void godot::NodeChromaSDK::SubtractNonZeroTargetAllKeysAllFramesOffsetName(String sourceAnimation, String targetAnimation, int offset)
{
	ChromaAnimationAPI::SubtractNonZeroTargetAllKeysAllFramesOffsetName(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data(), offset);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::SubtractNonZeroTargetAllKeysAllFramesOffsetNameD(String sourceAnimation, String targetAnimation, double offset)
{
	return ChromaAnimationAPI::SubtractNonZeroTargetAllKeysAllFramesOffsetNameD(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data(), offset);
}

/*
	Subtract the source color from the target color where the target color is
	not black from the source frame to the target offset frame. Reference source
	and target by id.
*/
void godot::NodeChromaSDK::SubtractNonZeroTargetAllKeysOffset(int sourceAnimationId, int targetAnimationId, int frameId, int offset)
{
	ChromaAnimationAPI::SubtractNonZeroTargetAllKeysOffset(sourceAnimationId, targetAnimationId, frameId, offset);
}

/*
	Subtract the source color from the target color where the target color is
	not black from the source frame to the target offset frame. Reference source
	and target by name.
*/
void godot::NodeChromaSDK::SubtractNonZeroTargetAllKeysOffsetName(String sourceAnimation, String targetAnimation, int frameId, int offset)
{
	ChromaAnimationAPI::SubtractNonZeroTargetAllKeysOffsetName(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data(), frameId, offset);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::SubtractNonZeroTargetAllKeysOffsetNameD(String sourceAnimation, String targetAnimation, double frameId, double offset)
{
	return ChromaAnimationAPI::SubtractNonZeroTargetAllKeysOffsetNameD(sourceAnimation.utf8().get_data(), targetAnimation.utf8().get_data(), frameId, offset);
}

/*
	Subtract all frames with the min RGB color where the animation color is
	less than the min threshold AND with the max RGB color where the animation
	is more than the max threshold. Animation is referenced by id.
*/
void godot::NodeChromaSDK::SubtractThresholdColorsMinMaxAllFramesRGB(const int animationId, const int minThreshold, const int minRed, const int minGreen, const int minBlue, const int maxThreshold, const int maxRed, const int maxGreen, const int maxBlue)
{
	ChromaAnimationAPI::SubtractThresholdColorsMinMaxAllFramesRGB(animationId, minThreshold, minRed, minGreen, minBlue, maxThreshold, maxRed, maxGreen, maxBlue);
}

/*
	Subtract all frames with the min RGB color where the animation color is
	less than the min threshold AND with the max RGB color where the animation
	is more than the max threshold. Animation is referenced by name.
*/
void godot::NodeChromaSDK::SubtractThresholdColorsMinMaxAllFramesRGBName(String path, const int minThreshold, const int minRed, const int minGreen, const int minBlue, const int maxThreshold, const int maxRed, const int maxGreen, const int maxBlue)
{
	ChromaAnimationAPI::SubtractThresholdColorsMinMaxAllFramesRGBName(path.utf8().get_data(), minThreshold, minRed, minGreen, minBlue, maxThreshold, maxRed, maxGreen, maxBlue);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::SubtractThresholdColorsMinMaxAllFramesRGBNameD(String path, double minThreshold, double minRed, double minGreen, double minBlue, double maxThreshold, double maxRed, double maxGreen, double maxBlue)
{
	return ChromaAnimationAPI::SubtractThresholdColorsMinMaxAllFramesRGBNameD(path.utf8().get_data(), minThreshold, minRed, minGreen, minBlue, maxThreshold, maxRed, maxGreen, maxBlue);
}

/*
	Subtract the specified frame with the min RGB color where the animation
	color is less than the min threshold AND with the max RGB color where the
	animation is more than the max threshold. Animation is referenced by id.
*/
void godot::NodeChromaSDK::SubtractThresholdColorsMinMaxRGB(const int animationId, const int frameId, const int minThreshold, const int minRed, const int minGreen, const int minBlue, const int maxThreshold, const int maxRed, const int maxGreen, const int maxBlue)
{
	ChromaAnimationAPI::SubtractThresholdColorsMinMaxRGB(animationId, frameId, minThreshold, minRed, minGreen, minBlue, maxThreshold, maxRed, maxGreen, maxBlue);
}

/*
	Subtract the specified frame with the min RGB color where the animation
	color is less than the min threshold AND with the max RGB color where the
	animation is more than the max threshold. Animation is referenced by name.
*/
void godot::NodeChromaSDK::SubtractThresholdColorsMinMaxRGBName(String path, const int frameId, const int minThreshold, const int minRed, const int minGreen, const int minBlue, const int maxThreshold, const int maxRed, const int maxGreen, const int maxBlue)
{
	ChromaAnimationAPI::SubtractThresholdColorsMinMaxRGBName(path.utf8().get_data(), frameId, minThreshold, minRed, minGreen, minBlue, maxThreshold, maxRed, maxGreen, maxBlue);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::SubtractThresholdColorsMinMaxRGBNameD(String path, const int frameId, const int minThreshold, const int minRed, const int minGreen, const int minBlue, const int maxThreshold, const int maxRed, const int maxGreen, const int maxBlue)
{
	return ChromaAnimationAPI::SubtractThresholdColorsMinMaxRGBNameD(path.utf8().get_data(), frameId, minThreshold, minRed, minGreen, minBlue, maxThreshold, maxRed, maxGreen, maxBlue);
}

/*
	Trim the end of the animation. The length of the animation will be the lastFrameId
	plus one. Reference the animation by id.
*/
void godot::NodeChromaSDK::TrimEndFrames(int animationId, int lastFrameId)
{
	ChromaAnimationAPI::TrimEndFrames(animationId, lastFrameId);
}

/*
	Trim the end of the animation. The length of the animation will be the lastFrameId
	plus one. Reference the animation by name.
*/
void godot::NodeChromaSDK::TrimEndFramesName(String path, int lastFrameId)
{
	ChromaAnimationAPI::TrimEndFramesName(path.utf8().get_data(), lastFrameId);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::TrimEndFramesNameD(String path, double lastFrameId)
{
	return ChromaAnimationAPI::TrimEndFramesNameD(path.utf8().get_data(), lastFrameId);
}

/*
	Remove the frame from the animation. Reference animation by id.
*/
void godot::NodeChromaSDK::TrimFrame(int animationId, int frameId)
{
	ChromaAnimationAPI::TrimFrame(animationId, frameId);
}

/*
	Remove the frame from the animation. Reference animation by name.
*/
void godot::NodeChromaSDK::TrimFrameName(String path, int frameId)
{
	ChromaAnimationAPI::TrimFrameName(path.utf8().get_data(), frameId);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::TrimFrameNameD(String path, double frameId)
{
	return ChromaAnimationAPI::TrimFrameNameD(path.utf8().get_data(), frameId);
}

/*
	Trim the start of the animation starting at frame 0 for the number of frames.
	Reference the animation by id.
*/
void godot::NodeChromaSDK::TrimStartFrames(int animationId, int numberOfFrames)
{
	ChromaAnimationAPI::TrimStartFrames(animationId, numberOfFrames);
}

/*
	Trim the start of the animation starting at frame 0 for the number of frames.
	Reference the animation by name.
*/
void godot::NodeChromaSDK::TrimStartFramesName(String path, int numberOfFrames)
{
	ChromaAnimationAPI::TrimStartFramesName(path.utf8().get_data(), numberOfFrames);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::TrimStartFramesNameD(String path, double numberOfFrames)
{
	return ChromaAnimationAPI::TrimStartFramesNameD(path.utf8().get_data(), numberOfFrames);
}

/*
	Uninitializes the `ChromaSDK`. Returns 0 upon success. Returns negative
	one upon failure.
*/
RZRESULT godot::NodeChromaSDK::Uninit()
{
	return ChromaAnimationAPI::Uninit();
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::UninitD()
{
	return ChromaAnimationAPI::UninitD();
}

/*
	Unloads `Chroma` effects to free up resources. Returns the animation id
	upon success. Returns negative one upon failure. Reference the animation
	by id.
*/
int godot::NodeChromaSDK::UnloadAnimation(int animationId)
{
	return ChromaAnimationAPI::UnloadAnimation(animationId);
}

/*
	D suffix for limited data types.
*/
double godot::NodeChromaSDK::UnloadAnimationD(double animationId)
{
	return ChromaAnimationAPI::UnloadAnimationD(animationId);
}

/*
	Unload the animation effects. Reference the animation by name.
*/
void godot::NodeChromaSDK::UnloadAnimationName(String path)
{
	ChromaAnimationAPI::UnloadAnimationName(path.utf8().get_data());
}

/*
	Unload the the composite set of animation effects. Reference the animation
	by name.
*/
void godot::NodeChromaSDK::UnloadComposite(String name)
{
	ChromaAnimationAPI::UnloadComposite(name.utf8().get_data());
}

/*
	Unload the Razer Chroma SDK Library before exiting the application.
*/
void godot::NodeChromaSDK::UnloadLibrarySDK()
{
	ChromaAnimationAPI::UnloadLibrarySDK();
}

/*
	Unload the Razer Chroma Streaming Plugin Library before exiting the application.
*/
void godot::NodeChromaSDK::UnloadLibraryStreamingPlugin()
{
	ChromaAnimationAPI::UnloadLibraryStreamingPlugin();
}

/*
	Updates the `frameIndex` of the `Chroma` animation referenced by id and
	sets the `duration` (in seconds). The `color` is expected to be an array
	of the dimensions for the `deviceType/device`. The `length` parameter is
	the size of the `color` array. For `EChromaSDKDevice1DEnum` the array size
	should be `MAX LEDS`. For `EChromaSDKDevice2DEnum` the array size should
	be `MAX ROW` times `MAX COLUMN`. Keys are populated only for EChromaSDKDevice2DEnum::DE_Keyboard
	and EChromaSDKDevice2DEnum::DE_KeyboardExtended. Keys will only use the
	EChromaSDKDevice2DEnum::DE_Keyboard `MAX_ROW` times `MAX_COLUMN` keysLength.
*/
int godot::NodeChromaSDK::UpdateFrame(int animationId, int frameIndex, float duration, int* colors, int length, int* keys, int keysLength)
{
	return ChromaAnimationAPI::UpdateFrame(animationId, frameIndex, duration, colors, length, keys, keysLength);
}

/*
	Update the `frameIndex` of the `Chroma` animation referenced by name and
	sets the `duration` (in seconds). The `color` is expected to be an array
	of the dimensions for the `deviceType/device`. The `length` parameter is
	the size of the `color` array. For `EChromaSDKDevice1DEnum` the array size
	should be `MAX LEDS`. For `EChromaSDKDevice2DEnum` the array size should
	be `MAX ROW` times `MAX COLUMN`. Keys are populated only for EChromaSDKDevice2DEnum::DE_Keyboard
	and EChromaSDKDevice2DEnum::DE_KeyboardExtended. Keys will only use the
	EChromaSDKDevice2DEnum::DE_Keyboard `MAX_ROW` times `MAX_COLUMN` keysLength.
	Returns the animation id upon success. Returns negative one upon failure.
*/
int godot::NodeChromaSDK::UpdateFrameName(String path, int frameIndex, float duration, int* colors, int length, int* keys, int keysLength)
{
	return ChromaAnimationAPI::UpdateFrameName(path.utf8().get_data(), frameIndex, duration, colors, length, keys, keysLength);
}

/*
	When the idle animation flag is true, when no other animations are playing,
	the idle animation will be used. The idle animation will not be affected
	by the API calls to PluginIsPlaying, PluginStopAnimationType, PluginGetPlayingAnimationId,
	and PluginGetPlayingAnimationCount. Then the idle animation flag is false,
	the idle animation is disabled. `Device` uses `EChromaSDKDeviceEnum` enums.
*/
void godot::NodeChromaSDK::UseIdleAnimation(int device, bool flag)
{
	ChromaAnimationAPI::UseIdleAnimation(device, flag);
}

/*
	Set idle animation flag for all devices.
*/
void godot::NodeChromaSDK::UseIdleAnimations(bool flag)
{
	ChromaAnimationAPI::UseIdleAnimations(flag);
}

/*
	Set preloading animation flag, which is set to true by default. Reference
	animation by id.
*/
void godot::NodeChromaSDK::UsePreloading(int animationId, bool flag)
{
	ChromaAnimationAPI::UsePreloading(animationId, flag);
}

/*
	Set preloading animation flag, which is set to true by default. Reference
	animation by name.
*/
void godot::NodeChromaSDK::UsePreloadingName(String path, bool flag)
{
	ChromaAnimationAPI::UsePreloadingName(path.utf8().get_data(), flag);
}

#pragma endregion

godot::NodeChromaSDK::NodeChromaSDK()
{
}

godot::NodeChromaSDK::~NodeChromaSDK()
{
}

bool godot::NodeChromaSDK::IsAPIInitialized() const
{
	return ChromaAnimationAPI::GetIsInitializedAPI();
}
